"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[1867],{96681:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"react/styles-and-assets/post-processing-css","title":"Post Processing CSS","description":"Learn how to leverage post-processing CSS in Create React App to enhance your stylesheets and ensure cross-browser compatibility. Automatically add vendor prefixes, embrace new CSS features, and more.","source":"@site/docs/react/styles-and-assets/post-processing-css.md","sourceDirName":"react/styles-and-assets","slug":"/react/styles-and-assets/post-processing-css","permalink":"/docs/react/styles-and-assets/post-processing-css","draft":false,"unlisted":false,"editUrl":"https://github.com/Ajay-Dhangar/ajay-dhangar.github.io/edit/main/docs/react/styles-and-assets/post-processing-css.md","tags":[{"inline":true,"label":"react","permalink":"/docs/tags/react"},{"inline":true,"label":"create-react-app","permalink":"/docs/tags/create-react-app"},{"inline":true,"label":"css","permalink":"/docs/tags/css"},{"inline":true,"label":"stylesheet","permalink":"/docs/tags/stylesheet"},{"inline":true,"label":"styling","permalink":"/docs/tags/styling"},{"inline":true,"label":"react-scripts","permalink":"/docs/tags/react-scripts"},{"inline":true,"label":"react-dom","permalink":"/docs/tags/react-dom"},{"inline":true,"label":"react-app","permalink":"/docs/tags/react-app"}],"version":"current","lastUpdatedBy":"ajay-dhangar","lastUpdatedAt":1710610499000,"sidebarPosition":5,"frontMatter":{"id":"post-processing-css","title":"Post Processing CSS","sidebar_label":"Post Processing CSS","sidebar_position":5,"tags":["react","create-react-app","css","stylesheet","styling","react-scripts","react-dom","react-app"],"description":"Learn how to leverage post-processing CSS in Create React App to enhance your stylesheets and ensure cross-browser compatibility. Automatically add vendor prefixes, embrace new CSS features, and more."},"sidebar":"tutorialSidebar","previous":{"title":"CSS Reset","permalink":"/docs/react/styles-and-assets/adding-css-reset"},"next":{"title":"Images Fonts and Files","permalink":"/docs/react/styles-and-assets/adding-images-fonts-and-files"}}');var n=r(74848),i=r(28453);const o={id:"post-processing-css",title:"Post Processing CSS",sidebar_label:"Post Processing CSS",sidebar_position:5,tags:["react","create-react-app","css","stylesheet","styling","react-scripts","react-dom","react-app"],description:"Learn how to leverage post-processing CSS in Create React App to enhance your stylesheets and ensure cross-browser compatibility. Automatically add vendor prefixes, embrace new CSS features, and more."},a=void 0,l={},c=[{value:"Introduction:",id:"introduction",level:2},{value:"Customizing Browser Support",id:"customizing-browser-support",level:2},{value:"A Magical Transformation",id:"a-magical-transformation",level:2},{value:"Fine-Tuning Autoprefixer",id:"fine-tuning-autoprefixer",level:2},{value:"For Example",id:"for-example",level:2},{value:"Live Coding",id:"live-coding",level:2},{value:"Conclusion",id:"conclusion",level:2}];function p(e){const s={a:"a",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components},{BrowserWindow:r}=s;return r||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("BrowserWindow",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h2,{id:"introduction",children:"Introduction:"}),"\n",(0,n.jsxs)(s.p,{children:["Welcome to the enchanting world of post-processing CSS! In Create React App, your CSS is automatically minified and provided with vendor prefixes by the powerful ",(0,n.jsx)(s.a,{href:"https://github.com/postcss/autoprefixer",children:"Autoprefixer"}),", saving you from the hassle. If you've ever wished to sprinkle a touch of magic onto your stylesheets, you've come to the right place. In this guide, we'll delve into the fascinating realm of post-processing CSS and explore how it can enhance your React applications."]}),"\n",(0,n.jsx)(s.p,{children:"Moreover, with the support of post-processing tools, you can embrace new CSS features and ensure compatibility with older browsers. Custom properties, media query ranges, and other cutting-edge features are automatically polyfilled to deliver a consistent experience."}),"\n",(0,n.jsx)(s.h2,{id:"customizing-browser-support",children:"Customizing Browser Support"}),"\n",(0,n.jsxs)(s.p,{children:["You have the flexibility to define your target browser support by adjusting the ",(0,n.jsx)(s.code,{children:"browserslist"})," key in your ",(0,n.jsx)(s.code,{children:"package.json"})," file. This allows you to cater to your specific audience while considering the ",(0,n.jsx)(s.a,{href:"https://github.com/browserslist/browserslist#readme",children:"Browserslist specification"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["For example, you can specify support for modern browsers by updating your ",(0,n.jsx)(s.code,{children:"browserslist"})," to:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:'"browserslist": [\n  "last 2 Chrome versions",\n  "last 2 Firefox versions",\n  "last 2 Safari versions"\n]\n'})}),"\n",(0,n.jsx)(s.h2,{id:"a-magical-transformation",children:"A Magical Transformation"}),"\n",(0,n.jsx)(s.p,{children:"Let's witness the enchanting transformation of a CSS class using Autoprefixer:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-css",children:"/* Before */\n.App {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-css",children:"/* After */\n.App {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n}\n"})}),"\n",(0,n.jsx)(s.p,{children:"Isn't it magical? Autoprefixer gracefully adds the necessary vendor prefixes, ensuring the widest browser compatibility for your styles."}),"\n",(0,n.jsx)(s.h2,{id:"fine-tuning-autoprefixer",children:"Fine-Tuning Autoprefixer"}),"\n",(0,n.jsxs)(s.p,{children:["If, for any reason, you need to disable Autoprefixer for specific CSS rules, you can follow ",(0,n.jsx)(s.a,{href:"https://github.com/postcss/autoprefixer#disabling",children:"this section"})," to learn how."]}),"\n",(0,n.jsxs)(s.p,{children:["By default, Autoprefixer doesn't add prefixes for ",(0,n.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout",children:"CSS Grid Layout"}),". However, manual prefixes will be preserved. If you'd like to opt-in to CSS Grid prefixing, make sure you understand its limitations by reading ",(0,n.jsx)(s.a,{href:"https://github.com/postcss/autoprefixer#does-autoprefixer-polyfill-grid-layout-for-ie",children:"this documentation"}),"."]}),"\n",(0,n.jsx)(s.p,{children:"To enable CSS Grid prefixing, simply add the following comment at the top of your CSS file:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-css",children:"/* autoprefixer grid: autoplace */\n"})}),"\n",(0,n.jsx)(s.p,{children:"Now, go forth and create captivating styles with the power of post-processing CSS in Create React App!"}),"\n",(0,n.jsx)(s.h2,{id:"for-example",children:"For Example"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.em,{children:(0,n.jsx)(s.strong,{children:"Step-by-step example demonstrating the post-processing CSS capabilities in Create React App:"})})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"1. Create a new React application using Create React App by running the following command in your terminal:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-shell",children:"npx create-react-app my-app\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"2. Navigate into the project directory:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-shell",children:"cd my-app\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsxs)(s.strong,{children:["3. Open the ",(0,n.jsx)(s.code,{children:"src/App.css"})," file in your preferred code editor."]})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"4. Replace the existing CSS code with the following:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-css",children:".App {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n}\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"5. Save the file and start the development server:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-shell",children:"npm start\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsxs)(s.strong,{children:["6. Open your browser and visit ",(0,n.jsx)(s.code,{children:"http://localhost:3000"})," to see the React application running."]})}),"\n",(0,n.jsx)(r,{children:(0,n.jsxs)("div",{style:{display:"grid",gridTemplateColumns:" repeat(2, 1fr)"},children:[(0,n.jsx)("h1",{children:"Welcome to My Magical App"}),(0,n.jsx)("p",{children:"Enjoy the wonders of post-processing CSS!"})]})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsxs)(s.strong,{children:["1. Now, let's witness the magic of post-processing CSS. Open the browser's developer tools and inspect the ",(0,n.jsx)(s.code,{children:".App"})," element."]})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsxs)(s.strong,{children:["2. In the Styles tab, you'll notice that the CSS properties have been automatically prefixed by the browser. For example, the ",(0,n.jsx)(s.code,{children:"display: grid"})," property is transformed into:"]})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-css",children:"display: -ms-grid;\ndisplay: grid;\n"})}),"\n",(0,n.jsx)(s.p,{children:"This transformation is performed by Autoprefixer, one of the post-processing tools integrated with Create React App. It ensures that your styles are compatible with various browsers."}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsxs)(s.strong,{children:["9. Stop the development server by pressing ",(0,n.jsx)(s.code,{children:"Ctrl + C"})," in the terminal."]})}),"\n",(0,n.jsxs)(s.p,{children:["Congratulations! You have successfully experienced the post-processing CSS in Create React App. In this example, Autoprefixer automatically added the necessary prefixes to the CSS property ",(0,n.jsx)(s.code,{children:"display: grid"}),", ensuring cross-browser compatibility."]}),"\n",(0,n.jsx)(s.p,{children:"Feel free to explore more CSS features and observe how Autoprefixer and other post-processing tools enhance your styles in Create React App."}),"\n",(0,n.jsx)(s.h2,{id:"live-coding",children:"Live Coding"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-jsx",metastring:"live",live:!0,children:"function App() {\n  return (\n    <div style={{display:'grid', gridTemplateColumns:'repeat(3, 1fr)', gap: '20px'}}>\n      <div style={{backgroundColor: '#f0e', padding: '20px', textAlign: 'center'}}>Box 1</div>\n      <div style={{backgroundColor: '#f0e', padding: '20px', textAlign: 'center'}}>Box 2</div>\n      <div style={{backgroundColor: '#f0e', padding: '20px', textAlign: 'center'}}>Box 3</div>\n    </div>\n  );\n}\n"})}),"\n",(0,n.jsx)(s.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,n.jsx)(s.p,{children:"In this guide, we explored the captivating world of post-processing CSS in Create React App. By leveraging the power of post-processing tools like Autoprefixer, you can effortlessly enhance your stylesheets and ensure cross-browser compatibility. Whether you're embracing new CSS features or catering to specific browser requirements, post-processing CSS has got you covered. Now, go forth and create captivating styles with the magic of post-processing CSS in Create React App!"})]})}function d(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},28453:(e,s,r)=>{r.d(s,{R:()=>o,x:()=>a});var t=r(96540);const n={},i=t.createContext(n);function o(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);