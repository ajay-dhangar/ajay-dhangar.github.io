"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[33471],{90796:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"javascript/set-in-javascript","title":"Sets in JavaScript","description":"In this tutorial, we will learn about sets in JavaScript. We will learn how to use sets to store unique values in JavaScript.","source":"@site/docs/javascript/sets.md","sourceDirName":"javascript","slug":"/javascript/set-in-javascript","permalink":"/docs/javascript/set-in-javascript","draft":false,"unlisted":false,"editUrl":"https://github.com/Ajay-Dhangar/ajay-dhangar.github.io/edit/main/docs/javascript/sets.md","tags":[{"inline":true,"label":"JavaScript","permalink":"/docs/tags/java-script"},{"inline":true,"label":"Set","permalink":"/docs/tags/set"},{"inline":true,"label":"Data Structure","permalink":"/docs/tags/data-structure"},{"inline":true,"label":"Collection","permalink":"/docs/tags/collection"},{"inline":true,"label":"Unique","permalink":"/docs/tags/unique"},{"inline":true,"label":"Values","permalink":"/docs/tags/values"},{"inline":true,"label":"Iteration","permalink":"/docs/tags/iteration"},{"inline":true,"label":"Iterative","permalink":"/docs/tags/iterative"},{"inline":true,"label":"Statements","permalink":"/docs/tags/statements"},{"inline":true,"label":"Loops","permalink":"/docs/tags/loops"},{"inline":true,"label":"Iteration","permalink":"/docs/tags/iteration"},{"inline":true,"label":"Iterating","permalink":"/docs/tags/iterating"},{"inline":true,"label":"Iterations","permalink":"/docs/tags/iterations"},{"inline":true,"label":"Spread Operator","permalink":"/docs/tags/spread-operator"},{"inline":true,"label":"Set Methods","permalink":"/docs/tags/set-methods"}],"version":"current","lastUpdatedBy":"ajay-dhangar","lastUpdatedAt":1710868693000,"sidebarPosition":26,"frontMatter":{"id":"set-in-javascript","title":"Sets in JavaScript","sidebar_label":"Sets","sidebar_position":26,"tags":["JavaScript","Set","Data Structure","Collection","Unique","Values","Iteration","Iterative","Statements","Loops","Iteration","Iterating","Iterations","Spread Operator","Set Methods"],"description":"In this tutorial, we will learn about sets in JavaScript. We will learn how to use sets to store unique values in JavaScript."},"sidebar":"tutorialSidebar","previous":{"title":"Break","permalink":"/docs/javascript/breack-statement-in-javascript"},"next":{"title":"Maps","permalink":"/docs/javascript/map-in-javascript"}}');var r=n(74848),i=n(28453);const a={id:"set-in-javascript",title:"Sets in JavaScript",sidebar_label:"Sets",sidebar_position:26,tags:["JavaScript","Set","Data Structure","Collection","Unique","Values","Iteration","Iterative","Statements","Loops","Iteration","Iterating","Iterations","Spread Operator","Set Methods"],description:"In this tutorial, we will learn about sets in JavaScript. We will learn how to use sets to store unique values in JavaScript."},o=void 0,l={},d=[{value:"Creating a Set",id:"creating-a-set",level:2},{value:"Adding Elements to a Set",id:"adding-elements-to-a-set",level:2},{value:"Deleting Elements from a Set",id:"deleting-elements-from-a-set",level:2},{value:"Checking for the Presence of an Element in a Set",id:"checking-for-the-presence-of-an-element-in-a-set",level:2},{value:"Iterating Over a Set",id:"iterating-over-a-set",level:2},{value:"Converting a Set to an Array",id:"converting-a-set-to-an-array",level:2},{value:"Using the Set Constructor",id:"using-the-set-constructor",level:2},{value:"Using the Spread Operator",id:"using-the-spread-operator",level:2},{value:"Using the Set Methods",id:"using-the-set-methods",level:2},{value:"Summary",id:"summary",level:2}];function c(e){const t={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["In JavaScript, a ",(0,r.jsx)(t.code,{children:"Set"})," is a built-in object that allows you to store unique values. It is often used when you want to store a collection of unique values without any duplicates."]}),"\n",(0,r.jsx)(t.h2,{id:"creating-a-set",children:"Creating a Set"}),"\n",(0,r.jsxs)(t.p,{children:["You can create a new ",(0,r.jsx)(t.code,{children:"Set"})," by using the ",(0,r.jsx)(t.code,{children:"new"})," keyword followed by the ",(0,r.jsx)(t.code,{children:"Set"})," constructor. You can pass an iterable"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="app.js"',children:"const set = new Set([1, 2, 3, 4, 5]);\nconsole.log(set); // Set { 1, 2, 3, 4, 5 }\n"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"Set"})," constructor creates a new ",(0,r.jsx)(t.code,{children:"Set"})," object."]}),"\n",(0,r.jsxs)(t.li,{children:["You can pass an iterable (such as an array) to the ",(0,r.jsx)(t.code,{children:"Set"})," constructor to initialize the set with the values from the iterable."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"Set"})," object stores unique values, so any duplicate values will be removed."]}),"\n",(0,r.jsxs)(t.li,{children:["The order of elements in a ",(0,r.jsx)(t.code,{children:"Set"})," is guaranteed to be the same as the order of insertion."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"Set"})," object is iterable, so you can use it in a ",(0,r.jsx)(t.code,{children:"for...of"})," loop to iterate over its elements."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"Set"})," object has a ",(0,r.jsx)(t.code,{children:"size"})," property that returns the number of elements in the set."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"Set"})," object has methods to add, delete, and check for the presence of elements."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"Set"})," object does not have methods to access elements by index, as it does not maintain the order of elements."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"adding-elements-to-a-set",children:"Adding Elements to a Set"}),"\n",(0,r.jsxs)(t.p,{children:["You can add elements to a ",(0,r.jsx)(t.code,{children:"Set"})," by using the ",(0,r.jsx)(t.code,{children:"add"})," method."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="app.js"',children:"const set = new Set();\nset.add(1);\nset.add(2);\nset.add(3);\nconsole.log(set); // Set { 1, 2, 3 }\n"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"add"})," method is used to add a new element to the set."]}),"\n",(0,r.jsx)(t.li,{children:"If the element is already present in the set, it will not be added again."}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"add"})," method returns the ",(0,r.jsx)(t.code,{children:"Set"})," object, so you can chain multiple ",(0,r.jsx)(t.code,{children:"add"})," calls together."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"add"})," method is chainable, so you can add multiple elements to the set in a single statement."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"deleting-elements-from-a-set",children:"Deleting Elements from a Set"}),"\n",(0,r.jsxs)(t.p,{children:["You can delete elements from a ",(0,r.jsx)(t.code,{children:"Set"})," by using the ",(0,r.jsx)(t.code,{children:"delete"})," method."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="app.js"',children:"const set = new Set([1, 2, 3, 4, 5]);\nset.delete(3);\nconsole.log(set); // Set { 1, 2, 4, 5 }\n"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"delete"})," method is used to remove an element from the set."]}),"\n",(0,r.jsxs)(t.li,{children:["If the element is present in the set, it will be removed, and the method will return ",(0,r.jsx)(t.code,{children:"true"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["If the element is not present in the set, the method will return ",(0,r.jsx)(t.code,{children:"false"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"delete"})," method returns ",(0,r.jsx)(t.code,{children:"true"})," if the element is removed, and ",(0,r.jsx)(t.code,{children:"false"})," otherwise."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"delete"})," method is chainable, so you can remove multiple elements from the set in a single statement."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"delete"})," method does not throw an error if the element is not present in the set."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"delete"})," method does not return the removed element."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"checking-for-the-presence-of-an-element-in-a-set",children:"Checking for the Presence of an Element in a Set"}),"\n",(0,r.jsxs)(t.p,{children:["You can check if an element is present in a ",(0,r.jsx)(t.code,{children:"Set"})," by using the ",(0,r.jsx)(t.code,{children:"has"})," method."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="app.js"',children:"const set = new Set([1, 2, 3, 4, 5]);\nconsole.log(set.has(3)); // true\nconsole.log(set.has(6)); // false\n"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"has"})," method is used to check if an element is present in the set."]}),"\n",(0,r.jsxs)(t.li,{children:["If the element is present in the set, the method will return ",(0,r.jsx)(t.code,{children:"true"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["If the element is not present in the set, the method will return ",(0,r.jsx)(t.code,{children:"false"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"has"})," method is chainable, so you can check for the presence of multiple elements in a single statement."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"has"})," method does not throw an error if the element is not present in the set."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"has"})," method does not return the element itself."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"has"})," method is often used to check if a value is present in the set before adding or deleting it."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"iterating-over-a-set",children:"Iterating Over a Set"}),"\n",(0,r.jsxs)(t.p,{children:["You can iterate over the elements of a ",(0,r.jsx)(t.code,{children:"Set"})," by using a ",(0,r.jsx)(t.code,{children:"for...of"})," loop."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="app.js"',children:"const set = new Set([1, 2, 3, 4, 5]);\nfor (const element of set) {\n  console.log(element);\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"for...of"})," loop is used to iterate over the elements of the set. In each iteration, the value of the current element is assigned to the loop variable ",(0,r.jsx)(t.code,{children:"element"}),", and the loop body is executed."]}),"\n",(0,r.jsx)(t.p,{children:"The output of the above example will be:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-plaintext",metastring:'title="Output"',children:"1\n2\n3\n4\n5\n"})}),"\n",(0,r.jsx)(t.p,{children:"In each iteration, the value of the current element is printed to the console."}),"\n",(0,r.jsx)(t.h2,{id:"converting-a-set-to-an-array",children:"Converting a Set to an Array"}),"\n",(0,r.jsxs)(t.p,{children:["You can convert a ",(0,r.jsx)(t.code,{children:"Set"})," to an array by using the ",(0,r.jsx)(t.code,{children:"Array.from"})," method or the spread operator (",(0,r.jsx)(t.code,{children:"..."}),")."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="app.js"',children:"const set = new Set([1, 2, 3, 4, 5]);\nconst array = Array.from(set);\nconsole.log(array); // [1, 2, 3, 4, 5]\n"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"Array.from"})," method is used to create a new array from an iterable (such as a ",(0,r.jsx)(t.code,{children:"Set"}),")."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"Array.from"})," method returns a new array that contains the elements of the iterable."]}),"\n",(0,r.jsxs)(t.li,{children:["The spread operator (",(0,r.jsx)(t.code,{children:"..."}),") can also be used to create a new array from an iterable."]}),"\n",(0,r.jsxs)(t.li,{children:["The spread operator (",(0,r.jsx)(t.code,{children:"..."}),") returns a new array that contains the elements of the iterable."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"using-the-set-constructor",children:"Using the Set Constructor"}),"\n",(0,r.jsxs)(t.p,{children:["You can use the ",(0,r.jsx)(t.code,{children:"Set"})," constructor to create an empty ",(0,r.jsx)(t.code,{children:"Set"})," and then add elements to it."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="app.js"',children:"const set = new Set();\nset.add(1);\nset.add(2);\nset.add(3);\nconsole.log(set); // Set { 1, 2, 3 }\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"Set"})," constructor creates a new empty ",(0,r.jsx)(t.code,{children:"Set"})," object. You can then use the ",(0,r.jsx)(t.code,{children:"add"})," method to add elements to the set. The ",(0,r.jsx)(t.code,{children:"Set"})," object stores unique values, so any duplicate values will be removed."]}),"\n",(0,r.jsx)(t.h2,{id:"using-the-spread-operator",children:"Using the Spread Operator"}),"\n",(0,r.jsxs)(t.p,{children:["You can use the spread operator (",(0,r.jsx)(t.code,{children:"..."}),") to create a new ",(0,r.jsx)(t.code,{children:"Set"})," from an existing ",(0,r.jsx)(t.code,{children:"Set"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="app.js"',children:"const set1 = new Set([1, 2, 3]);\nconst set2 = new Set([...set1, 4, 5]);\nconsole.log(set2); // Set { 1, 2, 3, 4, 5 }\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The spread operator (",(0,r.jsx)(t.code,{children:"..."}),") is used to create a new ",(0,r.jsx)(t.code,{children:"Set"})," that contains the elements of an existing ",(0,r.jsx)(t.code,{children:"Set"}),", as well as additional elements. The new ",(0,r.jsx)(t.code,{children:"Set"})," will contain the unique values from the existing ",(0,r.jsx)(t.code,{children:"Set"})," and the additional elements."]}),"\n",(0,r.jsx)(t.h2,{id:"using-the-set-methods",children:"Using the Set Methods"}),"\n",(0,r.jsxs)(t.p,{children:["You can use the ",(0,r.jsx)(t.code,{children:"Set"})," methods to add, delete, and check for the presence of elements in a ",(0,r.jsx)(t.code,{children:"Set"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="app.js"',children:"const set = new Set([1, 2, 3, 4, 5]);\nset.add(6);\nset.delete(3);\nconsole.log(set.has(3)); // false\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"add"})," method is used to add a new element to the set. The ",(0,r.jsx)(t.code,{children:"delete"})," method is used to remove an element from the set. The ",(0,r.jsx)(t.code,{children:"has"})," method is used to check if an element is present in the set."]}),"\n",(0,r.jsxs)(t.admonition,{title:"\ud83d\udcdd Note",type:"info",children:[(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"Set"})," object is iterable, so you can use it in a ",(0,r.jsx)(t.code,{children:"for...of"})," loop to iterate over its elements. The ",(0,r.jsx)(t.code,{children:"Set"})," object has a ",(0,r.jsx)(t.code,{children:"size"})," property that returns the number of elements in the set."]}),(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"1. Spread Operator:"})," The spread operator (",(0,r.jsx)(t.code,{children:"..."}),") can be used to create a new ",(0,r.jsx)(t.code,{children:"Set"})," from an existing ",(0,r.jsx)(t.code,{children:"Set"}),". The new ",(0,r.jsx)(t.code,{children:"Set"})," will contain the unique values from the existing ",(0,r.jsx)(t.code,{children:"Set and the additional elements. The spread operator can also be used to convert a "}),"Set` to an array."]}),(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"2. Set Methods:"})," The ",(0,r.jsx)(t.code,{children:"Set"})," object has methods to add, delete, and check for the presence of elements. The ",(0,r.jsx)(t.code,{children:"add"})," method is used to add a new element to the set. The ",(0,r.jsx)(t.code,{children:"delete"})," method is used to remove an element from the set. The ",(0,r.jsx)(t.code,{children:"has"})," method is used to check if an element is present in the set."]}),(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"3. Iterating Over a Set:"})," The ",(0,r.jsx)(t.code,{children:"Set"})," object is iterable, so you can use it in a ",(0,r.jsx)(t.code,{children:"for...of"})," loop to iterate over its elements. In each iteration, the value of the current element is assigned to the loop variable, and the loop body is executed."]}),(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"4. Converting a Set to an Array:"})," You can convert a ",(0,r.jsx)(t.code,{children:"Set"})," to an array by using the ",(0,r.jsx)(t.code,{children:"Array.from"})," method or the spread operator (",(0,r.jsx)(t.code,{children:"..."}),"). The ",(0,r.jsx)(t.code,{children:"Array.from"})," method is used to create a new array from an iterable, such as a ",(0,r.jsx)(t.code,{children:"Set"}),". The spread operator (",(0,r.jsx)(t.code,{children:"..."}),") can also be used to create a new array from an iterable."]})]}),"\n",(0,r.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsxs)(t.p,{children:["In this tutorial, we learned about sets in JavaScript. We learned how to use sets to store unique values in JavaScript. We learned about the ",(0,r.jsx)(t.code,{children:"Set"})," object and its methods for adding, deleting, and checking for the presence of elements. We also learned how to iterate over the elements of a ",(0,r.jsx)(t.code,{children:"Set"})," and convert a ",(0,r.jsx)(t.code,{children:"Set"})," to an array."]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(96540);const r={},i=s.createContext(r);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);