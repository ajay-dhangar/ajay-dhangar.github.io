"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[48130],{77735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2025/09/04/fix-git-clone-rpc-failed-error","metadata":{"permalink":"/blog/2025/09/04/fix-git-clone-rpc-failed-error","editUrl":"https://github.com/Ajay-Dhangar/ajay-dhangar.github.io/edit/main/blog/2025-09-04/fix-git-clone-rpc-failed-error.mdx","source":"@site/blog/2025-09-04/fix-git-clone-rpc-failed-error.mdx","title":"Fixing Git Clone Error: RPC Failed, HTTP/2 Stream Cancelled","description":"How to fix the \'RPC failed; curl 92 HTTP/2 stream 0 was not closed cleanly: CANCEL (err 8)\' error when cloning large Git repositories.","date":"2025-09-04T10:00:00.000Z","tags":[{"inline":true,"label":"Git","permalink":"/blog/tags/git"},{"inline":true,"label":"GitHub","permalink":"/blog/tags/git-hub"},{"inline":true,"label":"Errors","permalink":"/blog/tags/errors"},{"inline":true,"label":"Cloning Repositories","permalink":"/blog/tags/cloning-repositories"},{"inline":true,"label":"Fixes","permalink":"/blog/tags/fixes"}],"readingTime":2.795,"hasTruncateMarker":true,"authors":[{"name":"Ajay Dhangar","url":"https://github.com/ajay-dhangar","imageURL":"https://avatars.githubusercontent.com/u/99037494?v=4","key":"ajay-dhangar","page":null}],"frontMatter":{"title":"Fixing Git Clone Error: RPC Failed, HTTP/2 Stream Cancelled","authors":["ajay-dhangar"],"tags":["Git","GitHub","Errors","Cloning Repositories","Fixes"],"date":"2025-09-04T10:00:00.000Z","description":"How to fix the \'RPC failed; curl 92 HTTP/2 stream 0 was not closed cleanly: CANCEL (err 8)\' error when cloning large Git repositories.","draft":false},"unlisted":false,"nextItem":{"title":"Getting Started with React and Vite","permalink":"/blog/getting-started-with-vite"}},"content":"In this post, I\u2019ll show you how to fix the frustrating `RPC failed; curl 92 HTTP/2 stream 0 was not closed cleanly: CANCEL (err 8)` error that can occur when cloning large Git repositories. If you\'ve encountered this error, you\'re not alone! Let\'s dive into the causes and solutions.\\n\\n\x3c!-- truncate --\x3e\\n\\n![Git Clone Error](./git-clone-error.png)\\n\\n## Introduction\\n\\nThe other day, I was trying to clone my GitHub repository, but I ran into a frustrating error.  \\nIf you\u2019ve ever seen something like this, you know how annoying it feels:\\n\\n```bash\\nerror: RPC failed; curl 92 HTTP/2 stream 0 was not closed cleanly: CANCEL (err 8)\\nerror: 3547 bytes of body are still expected\\nfetch-pack: unexpected disconnect while reading sideband packet\\nfatal: early EOF\\nfatal: fetch-pack: invalid index-pack output\\n````\\n\\nAt first, I thought something was wrong with my Git setup. But after digging in, I realized the problem was with **large repository size, network limits, and Git\u2019s default settings**.  \\n\\nIn this blog, I\u2019ll break down **why this happens** and the **step-by-step solutions** I tried to fix it.\\n\\n---\\n\\n## Why This Error Happens  \\n\\nThis error usually shows up when:  \\n- Your repository is **very large** (hundreds of MBs or more).  \\n- Git\u2019s default **HTTP buffer size is too small**.  \\n- The repo has **too many objects (commits, files, branches, blobs)**.\\n- Network interruptions cause Git to cancel the fetch.  \\n\\nBasically, Git starts downloading your repo, but before finishing, the connection breaks \u2014 and Git doesn\u2019t know what to do with the incomplete data.\\n\\n---\\n\\n## Solutions That Worked  \\n\\nHere are the methods I tried to fix it:\\n\\n### 1. Increase Git Buffer Size  \\nGit\u2019s default HTTP buffer is small. Let\u2019s make it bigger:  \\n\\n```bash\\ngit config --global http.postBuffer 524288000\\ngit config --global http.maxRequests 100\\ngit config --global http.version HTTP/1.1\\n```\\n\\nThis allows Git to handle bigger repositories without choking.\\n\\n---\\n\\n### 2. Use a Shallow Clone (Fastest Fix)\\n\\nIf you only need the latest commit (not the full history):\\n\\n```bash\\ngit clone --depth=1 https://github.com/ajay-dhangar/ajay-dhangar.github.io.git\\n```\\n\\n\ud83d\udc49 This grabs the newest version quickly.\\nIf you later need full history:\\n\\n```bash\\ncd ajay-dhangar.github.io\\ngit fetch --unshallow\\n```\\n\\nThis way, you start small and expand as needed.\\n\\n---\\n\\n### 3. Clone Only One Branch\\n\\nIf the repo has multiple branches, but you just want `main`:\\n\\n```bash\\ngit clone --single-branch --branch main https://github.com/ajay-dhangar/ajay-dhangar.github.io.git\\n```\\n\\nThis avoids fetching unnecessary data.\\n\\n---\\n\\n### 4. Switch to SSH\\n\\nSometimes HTTPS causes issues. If you have SSH keys set up:\\n\\n```bash\\ngit clone git@github.com:ajay-dhangar/ajay-dhangar.github.io.git\\n```\\n\\nThis is often more reliable for big repos.\\n\\n---\\n\\n### 5. Sparse Checkout (Download Only What You Need)\\n\\nIf you don\u2019t need the whole repo, just a folder:\\n\\n```bash\\ngit clone --filter=blob:none https://github.com/ajay-dhangar/ajay-dhangar.github.io.git\\ncd ajay-dhangar.github.io\\ngit sparse-checkout init --cone\\ngit sparse-checkout set <folder-you-need>\\n```\\n\\nThis keeps your local clone lightweight.\\n\\n---\\n\\n### 6. Use Git LFS for Large Files\\n\\nIf your repo has big media files, install [Git LFS](https://git-lfs.com/):\\n\\n```bash\\ngit lfs install\\ngit lfs clone https://github.com/ajay-dhangar/ajay-dhangar.github.io.git\\n```\\n\\nThis prevents huge files from breaking your clone process.\\n\\n---\\n\\n## Final Takeaway\\n\\nIf you\u2019re facing the `RPC failed; curl 92 HTTP/2` error:\\n\\n* Start with **`--depth=1`** (quickest fix).\\n* If you need full history, increase the buffer size.\\n* For big repos with assets, use **Git LFS or sparse checkout**.\\n\\nThese tricks saved me hours of frustration, and I hope they help you too."},{"id":"/getting-started-with-vite","metadata":{"permalink":"/blog/getting-started-with-vite","editUrl":"https://github.com/Ajay-Dhangar/ajay-dhangar.github.io/edit/main/blog/getting-started-with-vite/index.md","source":"@site/blog/getting-started-with-vite/index.md","title":"Getting Started with React and Vite","description":"Learn how to get started with React by creating a new app using Vite. Follow the steps to set up your development environment and build your first React application.","date":"2024-03-17T12:15:07.000Z","tags":[{"inline":true,"label":"React","permalink":"/blog/tags/react"},{"inline":true,"label":"JavaScript","permalink":"/blog/tags/java-script"},{"inline":true,"label":"User interfaces","permalink":"/blog/tags/user-interfaces"},{"inline":true,"label":"Library","permalink":"/blog/tags/library"},{"inline":true,"label":"Virtual DOM","permalink":"/blog/tags/virtual-dom"},{"inline":true,"label":"Declarative syntax","permalink":"/blog/tags/declarative-syntax"},{"inline":true,"label":"Components","permalink":"/blog/tags/components"},{"inline":true,"label":"Rendering","permalink":"/blog/tags/rendering"},{"inline":true,"label":"Web applications","permalink":"/blog/tags/web-applications"},{"inline":true,"label":"Node.js","permalink":"/blog/tags/node-js"},{"inline":true,"label":"Vite","permalink":"/blog/tags/vite"},{"inline":true,"label":"React documentation","permalink":"/blog/tags/react-documentation"},{"inline":true,"label":"React hooks","permalink":"/blog/tags/react-hooks"},{"inline":true,"label":"React Router","permalink":"/blog/tags/react-router"},{"inline":true,"label":"React Context API","permalink":"/blog/tags/react-context-api"},{"inline":true,"label":"Awesome React","permalink":"/blog/tags/awesome-react"}],"readingTime":6.16,"hasTruncateMarker":true,"authors":[{"name":"Ajay Dhangar","url":"https://github.com/ajay-dhangar","imageURL":"https://avatars.githubusercontent.com/u/99037494?v=4","key":"ajay-dhangar","page":null}],"frontMatter":{"title":"Getting Started with React and Vite","authors":["ajay-dhangar"],"tags":["React","JavaScript","User interfaces","Library","Virtual DOM","Declarative syntax","Components","Rendering","Web applications","Node.js","Vite","React documentation","React hooks","React Router","React Context API","Awesome React"],"date":"2024-03-17T12:15:07.000Z","description":"Learn how to get started with React by creating a new app using Vite. Follow the steps to set up your development environment and build your first React application."},"unlisted":false,"prevItem":{"title":"Fixing Git Clone Error: RPC Failed, HTTP/2 Stream Cancelled","permalink":"/blog/2025/09/04/fix-git-clone-rpc-failed-error"},"nextItem":{"title":" Git Best Practices: Commit Often, Perfect Later, Publish Once","permalink":"/blog/git-best-practicies"}},"content":"import \'./style.css\';\\n\\n![Getting Started with React and Vite](./react-and-vite.jpg)\\n\\nVite is a modern build tool that offers faster development times and optimized builds. It aligns with modern web standards and provides out-of-the-box support for TypeScript, making it an excellent choice for React development. In this blog post, we will learn how to get started with React by creating a new app using Vite. We will follow the steps to set up our development environment and build our first React application.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Quick Start\\n\\nTo get started with Vite, we need to have Node.js installed on our system. We can install Node.js by downloading the installer from the official website or using a package manager. Once we have Node.js installed, we can use npm to create a new Vite project with the React template.\\n\\n**To quickly get started with Vite and React, follow these steps:**\\n\\n```bash\\nnpm create vite@latest my-app --template react\\n```\\n\\nThis command will create a new Vite project called `my-app` using the React template. It will set up the project structure and install the necessary dependencies. We can then navigate to the `my-app` directory and start the development server to see our new React application in action.\\n\\n**Now navigate to the `my-app` directory:**\\n\\n```bash\\ncd my-app\\n```\\n\\n**if you prefer using npm:**\\n\\n```bash\\nnpm install\\n```\\n\\n**Or, if you prefer using yarn:**\\n\\n```bash\\nyarn\\n```\\n\\n**Now start the development server:**\\n\\n```bash\\nnpm start\\n```\\n\\n**Or, if you prefer using yarn:**\\n\\n```bash\\nyarn start\\n```\\n\\nOnce the development server has started, open [http://localhost:3000/](http://localhost:3000/) in your browser to see your new React application. You can start building your React components, defining routes, and managing state using the React Context API.\\n\\n## Project Structure\\n\\nThe Vite project structure for a new React application is minimal and easy to understand. It provides a clean and organized layout that aligns with modern web development practices. Here is an overview of the project structure:\\n\\n```plaintext\\nmy-app\\n\u251c\u2500\u2500 node_modules\\n\u251c\u2500\u2500 public\\n\u2502   \u251c\u2500\u2500 favicon.ico\\n\u2502   \u251c\u2500\u2500 index.html\\n\u251c\u2500\u2500 src\\n\u2502   \u251c\u2500\u2500 App.css\\n\u2502   \u251c\u2500\u2500 App.jsx\\n\u2502   \u251c\u2500\u2500 index.css\\n\u2502   \u251c\u2500\u2500 index.jsx\\n\u251c\u2500\u2500 .gitignore\\n\u251c\u2500\u2500 package.json\\n\u251c\u2500\u2500 README.md\\n```\\n\\nThe `public` directory contains the static assets for our application, such as the `index.html` file and the `favicon.ico` icon. The `src` directory contains the source code for our React application, including the main `index.jsx` file and the `App.jsx` component.\\n\\n## Building Our First React Application\\n\\nNow that we have our development environment set up and our project structure in place, we can start building our first React application. We can create new components, define routes, and manage state using the React Context API. We can also use popular libraries such as React Router and React hooks to enhance our application.\\n\\nTo learn more about building React applications with Vite, refer to the official [React documentation](https://reactjs.org/docs/getting-started.html). The documentation provides detailed information on React concepts, best practices, and advanced topics.\\n\\n## Why Vite?\\n\\nVite offers several advantages for React development, including:\\n\\n- **Faster Development**: Vite provides a lightning-fast development server with hot module replacement (HMR) and instant server start. It eliminates the need for a bundler during development, resulting in faster build times and a smoother development experience.\\n- **Optimized Builds**: Vite optimizes the production build by leveraging native ES module support in modern browsers. It generates highly optimized and tree-shaken builds, resulting in smaller bundle sizes and improved performance.\\n- **Modern Web Standards**: Vite aligns with modern web standards and leverages native browser features such as ES modules, dynamic imports, and web workers. It provides an efficient development environment that embraces the latest web technologies.\\n- **TypeScript Support**: Vite offers out-of-the-box support for TypeScript, enabling us to write type-safe code and leverage advanced TypeScript features. It provides seamless integration with React and TypeScript, making it an excellent choice for React development.\\n- **Plugin Ecosystem**: Vite has a rich plugin ecosystem that allows us to extend its functionality and customize the build process. We can use plugins to add features such as CSS preprocessing, asset optimization, and code transformation.\\n- **Developer Experience**: Vite provides an excellent developer experience with features such as instant server start, optimized builds, and real-time feedback. It streamlines the development workflow and enables us to focus on building great React applications.\\n- **Community Support**: Vite has a growing community and active maintainers who contribute to its development and provide support. It has gained popularity in the React ecosystem and is widely adopted by developers.\\n- **Migration Path**: Vite offers a smooth migration path for existing React projects by providing a Vite-compatible React template. It allows us to migrate our projects to Vite without significant changes to the codebase.\\n- **Future Compatibility**: Vite is designed to be future-compatible and aligns with the latest web standards and best practices. It provides a solid foundation for building modern React applications that are ready for the future.\\n- **Open Source**: Vite is an open-source project with a permissive license that allows us to use, modify, and distribute it freely. It is developed in the open and welcomes contributions from the community.\\n- **Continuous Improvement**: Vite is continuously improved and updated with new features, optimizations, and bug fixes. It has a roadmap for future releases and aims to provide a cutting-edge development experience for React developers.\\n- **Integration with Vercel**: Vite has seamless integration with Vercel, a popular platform for deploying web applications. It allows us to deploy our Vite projects to Vercel with minimal configuration and take advantage of Vercel\'s features such as serverless functions and edge caching.\\n- **Developer Tools**: Vite provides a set of developer tools that enhance the development experience, including a built-in development server, optimized builds, and real-time feedback. It offers a comprehensive toolkit for building and debugging React applications.\\n- **Performance Optimization**: Vite optimizes the development and production builds by leveraging modern web standards and best practices. It provides a performant and efficient build process that results in faster load times and improved user experience.\\n- **Community Plugins**: Vite has a rich ecosystem of community plugins that extend its functionality and provide additional features. We can use plugins to add support for features such as PWA, internationalization, and analytics to our Vite projects.\\n- **Learning Resources**: Vite has a growing collection of learning resources, tutorials, and documentation that help developers get started with Vite and build great React applications. It provides comprehensive guidance on using Vite effectively and efficiently.\\n- **Developer Community**: Vite has a vibrant developer community that actively contributes to its development and provides support to fellow developers. It has a dedicated Discord server, GitHub repository, and community forums where developers can connect and collaborate.\\n\\n:::info \ud83d\udcda Learn More:\\nTo learn more about Vite, visit the official [Vite documentation](https://vitejs.dev/).\\n:::\\n\\n## Conclusion\\n\\nIn this blog post, we learned how to get started with React by creating a new app using Vite. We followed the steps to set up our development environment and build our first React application. We explored the advantages of using Vite for React development and discussed its features, benefits, and community support. We also learned about the project structure of a new React application created with Vite and how to build our first React application. We hope this blog post has provided you with valuable insights into using Vite for React development and has inspired you to explore the possibilities of building modern web applications with Vite and React."},{"id":"/git-best-practicies","metadata":{"permalink":"/blog/git-best-practicies","editUrl":"https://github.com/Ajay-Dhangar/ajay-dhangar.github.io/edit/main/blog/git-best-practicies.md","source":"@site/blog/git-best-practicies.md","title":" Git Best Practices: Commit Often, Perfect Later, Publish Once","description":"Git is a powerful tool for managing the development of software projects, but it can be challenging to use effectively. In this article, we\'ll take a look at some best practices for using Git, including how to structure your commits, how to manage branches, and how to collaborate with others. By following these best practices, you can make your development process more efficient and less error-prone.","date":"2024-03-15T14:37:46.000Z","tags":[{"inline":true,"label":"git","permalink":"/blog/tags/git"},{"inline":true,"label":"best practicies","permalink":"/blog/tags/best-practicies"}],"readingTime":4.245,"hasTruncateMarker":true,"authors":[{"name":"Ajay Dhangar","url":"https://github.com/ajay-dhangar","imageURL":"https://avatars.githubusercontent.com/u/99037494?v=4","key":"ajay-dhangar","page":null}],"frontMatter":{"title":" Git Best Practices: Commit Often, Perfect Later, Publish Once","sidebar_label":"Git Best Practicies","authors":["ajay-dhangar"],"tags":["git","best practicies"],"date":"2024-03-15T14:37:46.000Z","hide_table_of_contents":true},"unlisted":false,"prevItem":{"title":"Getting Started with React and Vite","permalink":"/blog/getting-started-with-vite"},"nextItem":{"title":"Sed: Normalize markdown file with Regex","permalink":"/blog/sed-normalize-md-file-with-regex"}},"content":"Git is a powerful tool for managing the development of software projects, but it can be challenging to use effectively. In this article, we\'ll take a look at some best practices for using Git, including how to structure your commits, how to manage branches, and how to collaborate with others. By following these best practices, you can make your development process more efficient and less error-prone.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Commit Often, Perfect Later, Publish Once\\n\\nOne of the most important best practices for using Git is to commit your changes often. This means that you should make small, focused commits that capture a single logical change to your code. By committing often, you can keep a detailed history of your changes, which makes it easier to understand the evolution of your codebase and to track down bugs.\\n\\nWhen you\'re working on a new feature or fixing a bug, it\'s important to commit your changes frequently, even if they\'re not perfect. You can always go back and revise your commits later to clean them up and make them more coherent. By committing often and revising later, you can avoid the temptation to make large, sweeping changes to your code all at once, which can lead to confusion and errors.\\n\\nOnce you\'re satisfied with your changes, you can publish them to a shared repository, such as GitHub or Bitbucket. By publishing your changes once, you can make it easier for others to review your work and to collaborate with you. This can help to prevent merge conflicts and to ensure that everyone is working from the most up-to-date version of the codebase.\\n\\n## Structure Your Commits\\n\\nWhen you\'re committing your changes, it\'s important to structure your commits in a way that makes it easy to understand the evolution of your codebase. This means that you should avoid making large, monolithic commits that capture multiple unrelated changes. Instead, you should make small, focused commits that capture a single logical change to your code.\\n\\nOne way to structure your commits is to use the \\"atomic commit\\" pattern, which involves making a series of small, focused commits that capture a single logical change to your code. For example, if you\'re working on a new feature, you might make a series of commits that add individual components of the feature, such as the user interface, the business logic, and the data model. By structuring your commits in this way, you can make it easier to understand the evolution of your codebase and to track down bugs.\\n\\nAnother way to structure your commits is to use the \\"semantic commit\\" pattern, which involves using a standardized format for your commit messages. For example, you might use a format like \\"feat: add new feature\\" or \\"fix: correct bug in user interface\\". By using a standardized format for your commit messages, you can make it easier to understand the purpose of each commit and to navigate through the history of your codebase.\\n\\n## Manage Your Branches\\n\\nWhen you\'re working on a software project, it\'s important to manage your branches effectively. This means that you should create a new branch for each new feature or bug fix that you\'re working on, and that you should merge your branches back into the main codebase once you\'re finished with them.\\n\\nBy managing your branches effectively, you can make it easier to collaborate with others and to keep your codebase organized. For example, if you\'re working on a new feature, you might create a new branch for the feature, make your changes on the branch, and then merge the branch back into the main codebase once the feature is complete. By doing this, you can make it easier for others to review your work and to collaborate with you, and you can avoid introducing bugs and conflicts into the main codebase.\\n\\n## Collaborate with Others\\n\\nOne of the most powerful features of Git is its ability to help you collaborate with others. By using Git, you can make it easier to share your work with others, to review their work, and to resolve conflicts and merge changes together.\\n\\nWhen you\'re collaborating with others, it\'s important to communicate effectively and to follow best practices for using Git. For example, you should make sure to pull the latest changes from the shared repository before you start working on a new feature or bug fix, and you should make sure to push your changes to the shared repository once you\'re finished with them. By following these best practices, you can make it easier to collaborate with others and to keep your codebase organized and up-to-date.\\n\\n## Conclusion\\n\\nGit is a powerful tool for managing the development of software projects, but it can be challenging to use effectively. By following best practices for using Git, such as committing often, structuring your commits, managing your branches, and collaborating with others, you can make your development process more efficient and less error-prone. By doing this, you can make it easier to understand the evolution of your codebase, to track down bugs, and to collaborate with others. Happy coding!"},{"id":"/sed-normalize-md-file-with-regex","metadata":{"permalink":"/blog/sed-normalize-md-file-with-regex","editUrl":"https://github.com/Ajay-Dhangar/ajay-dhangar.github.io/edit/main/blog/sed-normalize-md-file-with-regex.md","source":"@site/blog/sed-normalize-md-file-with-regex.md","title":"Sed: Normalize markdown file with Regex","description":"How to normalize markdown file with Regex","date":"2024-03-15T14:37:46.000Z","tags":[{"inline":true,"label":"sed","permalink":"/blog/tags/sed"},{"inline":true,"label":"regex","permalink":"/blog/tags/regex"},{"inline":true,"label":"web clipper","permalink":"/blog/tags/web-clipper"}],"readingTime":2.27,"hasTruncateMarker":true,"authors":[{"name":"Ajay Dhangar","key":null,"page":null}],"frontMatter":{"title":"Sed: Normalize markdown file with Regex","author":"Ajay Dhangar","tags":["sed","regex","web clipper"],"date":"2024-03-15T14:37:46.000Z","description":"How to normalize markdown file with Regex","draft":false},"unlisted":false,"prevItem":{"title":" Git Best Practices: Commit Often, Perfect Later, Publish Once","permalink":"/blog/git-best-practicies"},"nextItem":{"title":"nvs: One Node Version Per Terminal in Windows","permalink":"/blog/nvs-one-node-version-per-terminal-in-windows"}},"content":"I have been using [web clipper](https://www.notion.so/web-clipper) to save articles and blog posts for a while now. It\'s a great tool to save content from the web and organize it in a clean and readable format. However, the markdown files generated by web clipper are not always consistent, and I often find myself manually editing them to make them more readable.\\n\\n\x3c!-- truncate --\x3e\\n\\nOne of the common issues I encounter is inconsistent formatting of the front matter in the markdown files. The front matter is a block of metadata at the beginning of a markdown file that contains information such as the title, author, tags, date, and description of the content. Here\'s an example of what the front matter looks like:\\n\\n```markdown\\n---\\ntitle: \'Sed: Normalize markdown file with Regex\'\\nauthor: Ajay Dhangar\\ntags: [sed, regex, web clipper]\\ndate: 2020-11-26 21:13:28\\ndescription: How to normalize markdown file with Regex\\ndraft: false\\n---\\n```\\n\\nAs you can see, the front matter is enclosed in three dashes (`---`) at the beginning and end of the block, and each key-value pair is separated by a colon (`:`). The keys and values are also enclosed in single quotes (`\'`) to ensure that special characters are escaped properly.\\n\\nTo make the front matter consistent across all my markdown files, I decided to use the `sed` command-line utility to write a simple regular expression that would normalize the front matter. Here\'s the regular expression I came up with:\\n\\n```bash\\nsed -i -E \\"s/^---\\\\n(.*: .*\\\\n)+---\\\\n//g\\" file.md\\n```\\n\\nLet\'s break down the regular expression:\\n\\n- `^---\\\\n` matches the opening three dashes at the beginning of the file, followed by a newline character.\\n- `(.*: .*\\\\n)+` matches one or more lines containing a key-value pair, where the key is followed by a colon and a space, and the value is followed by a newline character.\\n- `---\\\\n` matches the closing three dashes at the end of the block, followed by a newline character.\\n- `/g` is a flag that tells `sed` to perform the substitution globally, i.e., on all matching lines in the file.\\n\\nWhen I run this command on a markdown file, it removes the existing front matter and leaves me with just the content of the file. This is exactly what I want, as I can then manually add a consistent front matter to the file.\\n\\nI hope this example gives you an idea of how powerful regular expressions can be when used with command-line utilities like `sed`. With a little bit of practice, you can write regular expressions to perform complex text manipulations with ease. If you\'re interested in learning more about regular expressions, I highly recommend checking out the [RegexOne](https://regexone.com/) interactive tutorial, which is a great resource for beginners."},{"id":"/nvs-one-node-version-per-terminal-in-windows","metadata":{"permalink":"/blog/nvs-one-node-version-per-terminal-in-windows","editUrl":"https://github.com/Ajay-Dhangar/ajay-dhangar.github.io/edit/main/blog/nvs-one-node-version-per-terminal-in-windows.mdx","source":"@site/blog/nvs-one-node-version-per-terminal-in-windows.mdx","title":"nvs: One Node Version Per Terminal in Windows","description":"nvs is a cross-platform Node.js version manager that allows you to install and use multiple versions of Node.js on the same machine. It is similar to nvm for Unix-based systems. nvs is a simple and easy-to-use tool that allows you to switch between different versions of Node.js with a single command.","date":"2024-03-15T13:37:46.000Z","tags":[{"inline":true,"label":"nvs","permalink":"/blog/tags/nvs"},{"inline":true,"label":"node","permalink":"/blog/tags/node"}],"readingTime":1.145,"hasTruncateMarker":true,"authors":[{"name":"Ajay Dhangar","url":"https://github.com/ajay-dhangar","imageURL":"https://avatars.githubusercontent.com/u/99037494?v=4","key":"ajay-dhangar","page":null}],"frontMatter":{"title":"nvs: One Node Version Per Terminal in Windows","authors":["ajay-dhangar"],"tags":["nvs","node"],"date":"2024-03-15T13:37:46.000Z","decription":"Install and setup nvs to Windows for PowerShell and Git-Bash","draft":false},"unlisted":false,"prevItem":{"title":"Sed: Normalize markdown file with Regex","permalink":"/blog/sed-normalize-md-file-with-regex"},"nextItem":{"title":"CI evolution: From FTP client to GitHub Action","permalink":"/blog/from-ftp-client-to-github-action"}},"content":"`nvs` is a cross-platform Node.js version manager that allows you to install and use multiple versions of Node.js on the same machine. It is similar to `nvm` for Unix-based systems. `nvs` is a simple and easy-to-use tool that allows you to switch between different versions of Node.js with a single command.\\n\\n\x3c!-- truncate --\x3e\\n\\nIn this article, we will learn how to install and set up `nvs` on Windows for PowerShell and Git-Bash.\\n\\n## Install `nvs`\\n\\nTo install `nvs` on Windows, you can use the following PowerShell command:\\n\\n\\n\\n## Set up `nvs` for PowerShell\\n\\nTo set up `nvs` for PowerShell, you need to add the following line to your PowerShell profile (`$PROFILE`):\\n\\n```powershell\\nnvs --use=8.17.0\\n```\\n\\n## Set up `nvs` for Git-Bash\\n\\nTo set up `nvs` for Git-Bash, you need to add the following line to your Git-Bash profile (`~/.bashrc`):\\n\\n```bash\\nnvs --use=8.17.0\\n```\\n\\n## Conclusion\\n\\nIn this article, we learned how to install and set up `nvs` on Windows for PowerShell and Git-Bash. `nvs` is a powerful tool that allows you to manage multiple versions of Node.js on the same machine, making it easy to switch between different versions for different projects. If you are working on multiple Node.js projects with different version requirements, `nvs` is a great tool to have in your toolkit. Give it a try and see how it can simplify your Node.js development workflow."},{"id":"/from-ftp-client-to-github-action","metadata":{"permalink":"/blog/from-ftp-client-to-github-action","editUrl":"https://github.com/Ajay-Dhangar/ajay-dhangar.github.io/edit/main/blog/from-ftp-client-to-github-action.md","source":"@site/blog/from-ftp-client-to-github-action.md","title":"CI evolution: From FTP client to GitHub Action","description":"In the early days of web development, the most common way to deploy a website was to use an FTP client. This involved manually uploading files to a remote server, which was a time-consuming and error-prone process. As web development practices evolved, so did the tools and techniques for deploying websites. One of the most significant advancements in this area has been the introduction of continuous integration (CI) and continuous deployment (CD) pipelines, which automate the process of building and deploying web applications.","date":"2024-03-15T11:37:46.000Z","tags":[{"inline":true,"label":"ftp","permalink":"/blog/tags/ftp"},{"inline":true,"label":"sftp","permalink":"/blog/tags/sftp"},{"inline":true,"label":"GitHub Action","permalink":"/blog/tags/git-hub-action"},{"inline":true,"label":"ftp deploy","permalink":"/blog/tags/ftp-deploy"}],"readingTime":2.225,"hasTruncateMarker":true,"authors":[{"name":"Ajay Dhangar","key":null,"page":null}],"frontMatter":{"title":"CI evolution: From FTP client to GitHub Action","author":"Ajay Dhangar","tags":["ftp","sftp","GitHub Action","ftp deploy"],"date":"2024-03-15T11:37:46.000Z","decription":"The evolution of remote file management","draft":false},"unlisted":false,"prevItem":{"title":"nvs: One Node Version Per Terminal in Windows","permalink":"/blog/nvs-one-node-version-per-terminal-in-windows"},"nextItem":{"title":"Install MongoDB Windows","permalink":"/blog/install-mongodb-windows"}},"content":"In the early days of web development, the most common way to deploy a website was to use an FTP client. This involved manually uploading files to a remote server, which was a time-consuming and error-prone process. As web development practices evolved, so did the tools and techniques for deploying websites. One of the most significant advancements in this area has been the introduction of continuous integration (CI) and continuous deployment (CD) pipelines, which automate the process of building and deploying web applications.\\n\\n\x3c!-- truncate --\x3e\\n\\nIn this article, we\'ll take a look at the evolution of remote file management, from the use of FTP clients to the adoption of GitHub Actions for automated deployment.\\n\\n## The FTP client era\\n\\nIn the early days of web development, the most common way to deploy a website was to use an FTP client. This involved manually uploading files to a remote server, which was a time-consuming and error-prone process. Developers would typically make changes to their local files, then use an FTP client to upload those changes to the server. This process was often slow and cumbersome, and it was easy to make mistakes that could result in broken websites.\\n\\n## The rise of CI/CD pipelines\\n\\nAs web development practices evolved, so did the tools and techniques for deploying websites. One of the most significant advancements in this area has been the introduction of continuous integration (CI) and continuous deployment (CD) pipelines. CI/CD pipelines automate the process of building and deploying web applications, making it faster, more reliable, and less error-prone than manual deployment methods.\\n\\n## GitHub Actions for automated deployment\\n\\nOne of the most popular CI/CD solutions for web development is GitHub Actions. GitHub Actions is a powerful, flexible, and easy-to-use tool for automating the build, test, and deployment processes of web applications. With GitHub Actions, you can define custom workflows that automatically build and deploy your web applications whenever you push changes to your repository. This makes it easy to ensure that your websites are always up-to-date and error-free, without the need for manual intervention.\\n\\n## Conclusion\\n\\nThe evolution of remote file management has come a long way since the days of using FTP clients to manually upload files to remote servers. With the introduction of CI/CD pipelines and tools like GitHub Actions, web developers now have powerful, automated solutions for building and deploying web applications. These tools make it faster, easier, and more reliable to deploy websites, and they help ensure that your websites are always up-to-date and error-free. If you\'re still using an FTP client to deploy your websites, it\'s time to consider upgrading to a more modern, automated solution like GitHub Actions."},{"id":"/install-mongodb-windows","metadata":{"permalink":"/blog/install-mongodb-windows","editUrl":"https://github.com/Ajay-Dhangar/ajay-dhangar.github.io/edit/main/blog/install-mongodb-windows.md","source":"@site/blog/install-mongodb-windows.md","title":"Install MongoDB Windows","description":"Installation MongoDB and mongosh","date":"2024-03-15T10:37:46.000Z","tags":[{"inline":true,"label":"database","permalink":"/blog/tags/database"},{"inline":true,"label":"mongodb","permalink":"/blog/tags/mongodb"},{"inline":true,"label":"mongosh","permalink":"/blog/tags/mongosh"},{"inline":true,"label":"windows","permalink":"/blog/tags/windows"}],"readingTime":2.215,"hasTruncateMarker":true,"authors":[{"name":"Ajay Dhangar","url":"https://github.com/ajay-dhangar","imageURL":"https://avatars.githubusercontent.com/u/99037494?v=4","key":"ajay-dhangar","page":null}],"frontMatter":{"title":"Install MongoDB Windows","authors":["ajay-dhangar"],"tags":["database","mongodb","mongosh","windows"],"date":"2024-03-15T10:37:46.000Z","description":"Installation MongoDB and mongosh","draft":false},"unlisted":false,"prevItem":{"title":"CI evolution: From FTP client to GitHub Action","permalink":"/blog/from-ftp-client-to-github-action"},"nextItem":{"title":"Install MongoDB Linux","permalink":"/blog/install-mongodb-linux"}},"content":"MongoDB is a popular NoSQL database that is known for its flexibility and scalability. It is widely used in modern web applications and is a great choice for storing and managing large volumes of data. In this article, we will walk you through the process of installing MongoDB on a Windows system.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Step 1: Download the MongoDB Installer\\n\\nThe first step is to download the MongoDB installer from the official MongoDB website. You can find the installer at the following URL: [https://www.mongodb.com/try/download/community](https://www.mongodb.com/try/download/community)\\n\\n## Step 2: Run the MongoDB Installer\\n\\nOnce the installer has been downloaded, you can run it to start the installation process. Follow the on-screen instructions to complete the installation. You can choose the \\"Complete\\" setup type to install all the MongoDB tools, including the MongoDB shell (mongosh).\\n\\n## Step 3: Add MongoDB to the System Path\\n\\nAfter the installation is complete, you need to add the MongoDB binaries to your system\'s PATH environment variable. This will allow you to run MongoDB and mongosh commands from any directory in your terminal.\\n\\nTo add MongoDB to the system PATH, follow these steps:\\n\\n1. Open the Control Panel and navigate to \\"System and Security\\" > \\"System\\" > \\"Advanced system settings\\".\\n2. In the System Properties window, click on the \\"Environment Variables\\" button.\\n3. In the Environment Variables window, select the \\"Path\\" variable under \\"System variables\\" and click the \\"Edit\\" button.\\n4. Click the \\"New\\" button and add the path to the \\"bin\\" directory of your MongoDB installation (e.g., `C:\\\\Program Files\\\\MongoDB\\\\Server\\\\5.0\\\\bin`).\\n5. Click \\"OK\\" to save the changes and close the Environment Variables window.\\n6. Click \\"OK\\" again to close the System Properties window.\\n7. Restart your terminal to apply the changes.\\n8. You can now run MongoDB and mongosh commands from any directory in your terminal.\\n9. To verify that MongoDB and mongosh are installed correctly, you can run the following commands in your terminal:\\n\\n```bash\\nmongod --version\\nmongosh --version\\n```\\n\\n## Step 4: Start the MongoDB Service\\n\\nTo start the MongoDB service, you can run the following command in your terminal:\\n\\n```bash\\nmongod\\n```\\n\\nThis will start the MongoDB server on your local machine. You can now connect to the MongoDB server using the mongosh shell.\\n\\n## Step 5: Connect to the MongoDB Server\\n\\nTo connect to the MongoDB server, you can run the following command in your terminal:\\n\\n```bash\\nmongosh\\n```\\n\\nThis will open the mongosh shell, and you can start interacting with the MongoDB server using JavaScript-like syntax.\\n\\nCongratulations! You have successfully installed MongoDB and mongosh on your Windows system. You are now ready to start building powerful applications with MongoDB as your database. Happy coding!"},{"id":"/install-mongodb-linux","metadata":{"permalink":"/blog/install-mongodb-linux","editUrl":"https://github.com/Ajay-Dhangar/ajay-dhangar.github.io/edit/main/blog/install-mongodb-linux.md","source":"@site/blog/install-mongodb-linux.md","title":"Install MongoDB Linux","description":"Installation MongoDB and mongosh","date":"2024-03-15T08:37:46.000Z","tags":[{"inline":true,"label":"database","permalink":"/blog/tags/database"},{"inline":true,"label":"mongodb","permalink":"/blog/tags/mongodb"},{"inline":true,"label":"mongosh","permalink":"/blog/tags/mongosh"},{"inline":true,"label":"linux","permalink":"/blog/tags/linux"},{"inline":true,"label":"debian","permalink":"/blog/tags/debian"},{"inline":true,"label":"bullseye","permalink":"/blog/tags/bullseye"}],"readingTime":1.99,"hasTruncateMarker":true,"authors":[{"name":"Ajay Dhangar","url":"https://github.com/ajay-dhangar","imageURL":"https://avatars.githubusercontent.com/u/99037494?v=4","key":"ajay-dhangar","page":null}],"frontMatter":{"title":"Install MongoDB Linux","authors":["ajay-dhangar"],"tags":["database","mongodb","mongosh","linux","debian","bullseye"],"date":"2024-03-15T08:37:46.000Z","description":"Installation MongoDB and mongosh","draft":false},"unlisted":false,"prevItem":{"title":"Install MongoDB Windows","permalink":"/blog/install-mongodb-windows"},"nextItem":{"title":"Step-by-Step Guide Debugging Tests in Create React App","permalink":"/blog/debugging"}},"content":"MongoDB is a popular NoSQL database that is known for its flexibility and scalability. It is widely used in modern web applications and is a great choice for storing and managing large volumes of data. In this article, we will walk you through the process of installing MongoDB on a Linux system, specifically Debian Bullseye.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Step 1: Import the MongoDB GPG Key\\n\\nThe first step is to import the MongoDB GPG key, which is used to verify the authenticity of the MongoDB packages. You can do this by running the following command in your terminal:\\n\\n```bash\\nwget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -\\n```\\n\\n## Step 2: Create a MongoDB Source List File\\n\\nNext, you need to create a source list file for MongoDB. You can do this by running the following command:\\n\\n```bash\\necho \\"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/debian bullseye/mongodb-org/5.0 main\\" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list\\n```\\n\\n## Step 3: Update the Package Database\\n\\nAfter creating the source list file, you need to update the package database to include the MongoDB repository. You can do this by running the following command:\\n\\n```bash\\nsudo apt update\\n```\\n\\n## Step 4: Install MongoDB\\n\\nNow that the MongoDB repository has been added to your package database, you can install MongoDB by running the following command:\\n\\n```bash\\nsudo apt install -y mongodb-org\\n```\\n\\n## Step 5: Start the MongoDB Service\\n\\nOnce MongoDB is installed, you can start the MongoDB service by running the following command:\\n\\n```bash\\nsudo systemctl start mongod\\n```\\n\\nYou can also enable the MongoDB service to start automatically at boot time by running the following command:\\n\\n```bash\\nsudo systemctl enable mongod\\n```\\n\\n## Step 6: Verify the MongoDB Installation\\n\\nTo verify that MongoDB has been installed successfully, you can run the following command to check the status of the MongoDB service:\\n\\n```bash\\nsudo systemctl status mongod\\n```\\n\\nYou should see output indicating that the MongoDB service is active and running.\\n\\n## Step 7: Install mongosh\\n\\nFinally, you can install `mongosh`, the official MongoDB shell, by running the following command:\\n\\n```bash\\nsudo apt install -y mongosh\\n```\\n\\n## Conclusion\\n\\nCongratulations! You have successfully installed MongoDB and `mongosh` on your Debian Bullseye system. You can now start using MongoDB to store and manage your data. If you have any questions or run into any issues, feel free to consult the official [MongoDB documentation](https://docs.mongodb.com/). Happy coding!"},{"id":"/debugging","metadata":{"permalink":"/blog/debugging","editUrl":"https://github.com/Ajay-Dhangar/ajay-dhangar.github.io/edit/main/blog/debugging.md","source":"@site/blog/debugging.md","title":"Step-by-Step Guide Debugging Tests in Create React App","description":"Step-by-Step Guide Debugging Tests in Create React App","date":"2024-03-14T14:37:46.000Z","tags":[{"inline":true,"label":"Debugging Tests","permalink":"/blog/tags/debugging-tests"}],"readingTime":2.375,"hasTruncateMarker":true,"authors":[{"name":"Ajay Dhangar","url":"https://github.com/ajay-dhangar","imageURL":"https://avatars.githubusercontent.com/u/99037494?v=4","key":"ajay-dhangar","page":null}],"frontMatter":{"title":"Step-by-Step Guide Debugging Tests in Create React App","authors":["ajay-dhangar"],"tags":["Debugging Tests"],"date":"2024-03-14T14:37:46.000Z","description":"Step-by-Step Guide Debugging Tests in Create React App","draft":false},"unlisted":false,"prevItem":{"title":"Install MongoDB Linux","permalink":"/blog/install-mongodb-linux"},"nextItem":{"title":"VS Code: Fix Bug in Any Extension by Rebuilding It","permalink":"/blog/fix-bug-in-vscode-extension"}},"content":"Debugging tests in a React application can be challenging, but fear not! We\'ve got you covered with this step-by-step guide to help you overcome the common hurdles and make your tests shine. Let\'s dive in:\\n\\n\x3c!-- truncate --\x3e\\n\\n**Step 1: Install Create React App**\\n\\nIf you haven\'t already set up your Create React App project, start by installing it:\\n\\n```bash\\nnpx create-react-app my-app\\ncd my-app\\n```\\n\\n**Step 2: Writing a Test**\\n\\nCreate a simple React component (e.g., a Button) in a separate file and write a test for it. For example:\\n\\n```jsx title=\\"src/Button.js\\"\\nimport React from \'react\';\\n\\nconst Button = () => {\\n  return <button>Click Me</button>;\\n};\\n\\nexport default Button;\\n```\\n\\n```jsx title=\\"src/Button.test.js\\"\\nimport React from \'react\';\\nimport { render, screen } from \'@testing-library/react\';\\nimport Button from \'./Button\';\\n\\ntest(\'renders the button\', () => {\\n  render(<Button />);\\n  const buttonElement = screen.getByText(\'Click Me\');\\n  expect(buttonElement).toBeInTheDocument();\\n});\\n```\\n\\n**Step 3: Run the Tests**\\n\\nExecute the tests using the following command:\\n\\n```bash\\nnpm test\\n```\\n\\n**Step 4: Spotting the Failure**\\n\\nIf the test fails, don\'t panic! First, identify the failing test case.\\n\\n**Step 5: Reproduce the Failure Locally**\\n\\nMake sure the failure occurs consistently by reproducing it locally. Ensure that you\'re running the correct test files and dependencies.\\n\\n**Step 6: Debugging Techniques**\\n\\nNow, let\'s employ some debugging techniques to resolve the issue:\\n\\n**6.1. Use `console.log`**\\n\\nPlace `console.log` statements at different points in your test to check the values of variables or components. For example:\\n\\n```jsx\\ntest(\'renders the button\', () => {\\n  render(<Button />);\\n  console.log(screen.getByRole(\'button\').outerHTML);\\n  const buttonElement = screen.getByText(\'Click Me\');\\n  console.log(buttonElement); // Check the button element in the console\\n  expect(buttonElement).toBeInTheDocument();\\n});\\n```\\n\\n**6.2. Utilize `debugger`**\\n\\nYou can use the `debugger` keyword to pause test execution at a specific point. Open your browser\'s developer tools to inspect variables and the call stack. For example:\\n\\n```jsx\\ntest(\'renders the button\', () => {\\n  render(<Button />);\\n  debugger; // Execution will pause here, and you can inspect the app and test code.\\n  const buttonElement = screen.getByText(\'Click Me\');\\n  expect(buttonElement).toBeInTheDocument();\\n});\\n```\\n\\n**6.3. Inspect with Chrome DevTools**\\n\\nOpen your app in Chrome, right-click, and select \\"Inspect.\\" Navigate to the \\"Console\\" tab to interactively debug your tests using the same tools you use for your regular app.\\n\\n**6.4. Snapshot Testing**\\n\\nIf you suspect issues with rendering, consider using snapshot testing. Jest can generate snapshots of your components and compare them for changes. Learn more about snapshot testing in the official documentation.\\n\\n**Step 7: Fix the Test**\\n\\nBased on your observations during debugging, fix the failing test case. It might involve modifying the component or adjusting your expectations in the test.\\n\\n**Step 8: Rerun the Tests**\\n\\nAfter making changes, run the tests again to ensure everything is working correctly:\\n\\n```bash\\nnpm test\\n```\\n\\n**Step 9: Celebrate Success!**\\n\\nCongratulations! You\'ve successfully debugged your test and conquered the Bug Monsters. Repeat these steps whenever you encounter testing issues in your React applications."},{"id":"/fix-bug-in-vscode-extension","metadata":{"permalink":"/blog/fix-bug-in-vscode-extension","editUrl":"https://github.com/Ajay-Dhangar/ajay-dhangar.github.io/edit/main/blog/fix-bug-in-vscode-extension/index.md","source":"@site/blog/fix-bug-in-vscode-extension/index.md","title":"VS Code: Fix Bug in Any Extension by Rebuilding It","description":"How to fix a bug in any VS Code extension (.vsix) by rebuilding that extension","date":"2021-11-06T20:51:21.000Z","tags":[{"inline":true,"label":"vsix","permalink":"/blog/tags/vsix"},{"inline":true,"label":"VS Code","permalink":"/blog/tags/vs-code"},{"inline":true,"label":"extension","permalink":"/blog/tags/extension"}],"readingTime":2.305,"hasTruncateMarker":true,"authors":[{"name":"Ajay Dhangar","url":"https://github.com/ajay-dhangar","imageURL":"https://avatars.githubusercontent.com/u/99037494?v=4","key":"ajay-dhangar","page":null}],"frontMatter":{"title":"VS Code: Fix Bug in Any Extension by Rebuilding It","authors":["ajay-dhangar"],"tags":["vsix","VS Code","extension"],"date":"2021-11-06T20:51:21.000Z","description":"How to fix a bug in any VS Code extension (.vsix) by rebuilding that extension"},"unlisted":false,"prevItem":{"title":"Step-by-Step Guide Debugging Tests in Create React App","permalink":"/blog/debugging"},"nextItem":{"title":"Prompt Engineering Guide","permalink":"/blog/2024/03/15/prompt-engineering-guide"}},"content":"If you are a developer who uses Visual Studio Code (VS Code) regularly, you might have encountered a bug in one of the extensions you use. While you can report the bug to the extension\'s maintainer, you might also want to fix the bug yourself if you are comfortable with the codebase. In this article, we will walk you through the process of fixing a bug in any VS Code extension by rebuilding that extension from the source code.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Prerequisites\\n\\nBefore we begin, make sure you have the following prerequisites:\\n\\n- [Visual Studio Code](https://code.visualstudio.com/) installed on your machine.\\n- [Node.js](https://nodejs.org/) installed on your machine.\\n- [npm](https://www.npmjs.com/) installed on your machine.\\n- Basic knowledge of JavaScript and TypeScript.\\n\\n## Steps to Fix a Bug in a VS Code Extension\\n\\nHere are the steps to fix a bug in a VS Code extension:\\n\\n1. **Clone the Extension Repository**: The first step is to clone the repository of the extension you want to fix. You can find the repository link on the extension\'s marketplace page or GitHub repository.\\n2. **Install Dependencies**: Navigate to the cloned repository directory and install the dependencies using npm. You can do this by running the following command:\\n\\n   ```bash\\n   npm install\\n   ```\\n3. **Fix the Bug**: Identify the bug you want to fix and make the necessary changes to the codebase. You can use the debugging tools provided by VS Code to help you debug the issue.\\n4. **Build the Extension**: Once you have fixed the bug, you need to build the extension to generate the `.vsix` file. You can do this by running the following command:\\n\\n   ```bash\\n   npm run build\\n   ```\\n5. **Pack the Extension**: After building the extension, you can pack it to create the `.vsix` file. You can do this by running the following command:\\n\\n   ```bash\\n    npm run vsce package\\n    ```\\n6. **Install the Extension**: Finally, you can install the fixed extension by opening VS Code, navigating to the Extensions view, clicking on the ellipsis (`...`) icon, and selecting \\"Install from VSIX...\\". Choose the `.vsix` file you generated in the previous step to install the fixed version of the extension.\\n7. **Test the Extension**: Once the extension is installed, test it to ensure that the bug has been fixed successfully. You can also share the fixed version of the extension with the community or the extension maintainer.\\n8. **Contribute Back**: If you have fixed a bug in an open-source extension, consider contributing back to the original repository by creating a pull request. This will help the community benefit from your fix and improve the extension for everyone.\\n\\nBy following these steps, you can fix bugs in any VS Code extension and contribute to the improvement of the VS Code ecosystem. Happy coding! \ud83d\ude80"},{"id":"/2024/03/15/prompt-engineering-guide","metadata":{"permalink":"/blog/2024/03/15/prompt-engineering-guide","editUrl":"https://github.com/Ajay-Dhangar/ajay-dhangar.github.io/edit/main/blog/2024-03-15/prompt-engineering-guide.md","source":"@site/blog/2024-03-15/prompt-engineering-guide.md","title":"Prompt Engineering Guide","description":"Prompt Engineering is a process of creating a prompt that is used to guide the user through a series of steps to achieve a specific goal. It is a powerful tool that can help users complete complex tasks with ease and efficiency. In this guide, we will walk you through the process of creating an effective prompt that will help you achieve your desired outcome.","date":"2020-12-21T15:34:11.000Z","tags":[{"inline":true,"label":"Prompt Engineering Guide","permalink":"/blog/tags/prompt-engineering-guide"},{"inline":true,"label":"Engineering Guide","permalink":"/blog/tags/engineering-guide"}],"readingTime":1.965,"hasTruncateMarker":true,"authors":[{"name":"Ajay Dhangar","url":"https://github.com/ajay-dhangar","imageURL":"https://avatars.githubusercontent.com/u/99037494?v=4","key":"ajay-dhangar","page":null}],"frontMatter":{"title":"Prompt Engineering Guide","authors":["ajay-dhangar"],"tags":["Prompt Engineering Guide","Engineering Guide"],"date":"2020-12-21T15:34:11.000Z"},"unlisted":false,"prevItem":{"title":"VS Code: Fix Bug in Any Extension by Rebuilding It","permalink":"/blog/fix-bug-in-vscode-extension"}},"content":"Prompt Engineering is a process of creating a prompt that is used to guide the user through a series of steps to achieve a specific goal. It is a powerful tool that can help users complete complex tasks with ease and efficiency. In this guide, we will walk you through the process of creating an effective prompt that will help you achieve your desired outcome.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Step 1: Define the Goal\\n\\nThe first step in creating an effective prompt is to define the goal you want to achieve. This could be anything from completing a task, learning a new skill, or solving a problem. By clearly defining the goal, you can create a prompt that guides the user towards that goal.\\n\\n## Step 2: Identify the Steps\\n\\nOnce you have defined the goal, the next step is to identify the steps required to achieve that goal. Break down the goal into smaller, manageable steps that the user can follow to reach the desired outcome. This will help the user understand what they need to do and how to do it.\\n\\n\\n## Step 3: Design the Prompt\\n\\nWith the goal and steps identified, it\'s time to design the prompt. The prompt should be clear, concise, and easy to follow. Use simple language and provide clear instructions to guide the user through each step. You can use visual cues, such as arrows or icons, to help the user navigate the prompt.\\n\\n## Step 4: Test the Prompt\\n\\nBefore deploying the prompt, it\'s essential to test it to ensure that it works as intended. Test the prompt with a small group of users to gather feedback and identify any issues or areas for improvement. Make any necessary adjustments based on the feedback received.\\n\\n## Step 5: Deploy the Prompt\\n\\nOnce you have tested the prompt and made any necessary adjustments, it\'s time to deploy it. Make the prompt available to users and monitor its performance. Collect data on how users interact with the prompt and use this information to make further improvements.\\n\\n## Conclusion\\n\\nCreating an effective prompt is a valuable skill that can help you guide users through complex tasks and achieve your desired outcomes. By following these steps, you can create a prompt that is clear, concise, and easy to follow, helping users complete tasks with ease and efficiency. Happy prompting!"}]}}')}}]);