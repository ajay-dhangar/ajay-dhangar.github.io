"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[55829],{22467:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>x,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"javascript/operators/operators-in-javascript","title":"Operators in JavaScript","description":"What is the operators in JavaScript and how to use it.","source":"@site/docs/javascript/operators/operators-js.md","sourceDirName":"javascript/operators","slug":"/javascript/operators/operators-in-javascript","permalink":"/docs/javascript/operators/operators-in-javascript","draft":false,"unlisted":false,"editUrl":"https://github.com/Ajay-Dhangar/ajay-dhangar.github.io/edit/main/docs/javascript/operators/operators-js.md","tags":[{"inline":true,"label":"JavaScript","permalink":"/docs/tags/java-script"},{"inline":true,"label":"Operators","permalink":"/docs/tags/operators"},{"inline":true,"label":"Arithmetic Operators","permalink":"/docs/tags/arithmetic-operators"},{"inline":true,"label":"Assignment Operators","permalink":"/docs/tags/assignment-operators"},{"inline":true,"label":"Comparison Operators","permalink":"/docs/tags/comparison-operators"},{"inline":true,"label":"Logical Operators","permalink":"/docs/tags/logical-operators"},{"inline":true,"label":"Bitwise Operators","permalink":"/docs/tags/bitwise-operators"},{"inline":true,"label":"String Operators","permalink":"/docs/tags/string-operators"},{"inline":true,"label":"Conditional Operator","permalink":"/docs/tags/conditional-operator"},{"inline":true,"label":"Type Operators","permalink":"/docs/tags/type-operators"},{"inline":true,"label":"Comma Operator","permalink":"/docs/tags/comma-operator"},{"inline":true,"label":"Unary Operators","permalink":"/docs/tags/unary-operators"},{"inline":true,"label":"Relational Operators","permalink":"/docs/tags/relational-operators"},{"inline":true,"label":"Grouping Operators","permalink":"/docs/tags/grouping-operators"},{"inline":true,"label":"Exponentiation Operator","permalink":"/docs/tags/exponentiation-operator"},{"inline":true,"label":"Nullish Coalescing Operator","permalink":"/docs/tags/nullish-coalescing-operator"}],"version":"current","lastUpdatedBy":"ajay-dhangar","lastUpdatedAt":1708763135000,"sidebarPosition":1,"frontMatter":{"id":"operators-in-javascript","title":"Operators in JavaScript","sidebar_label":"Operators","sidebar_position":1,"tags":["JavaScript","Operators","Arithmetic Operators","Assignment Operators","Comparison Operators","Logical Operators","Bitwise Operators","String Operators","Conditional Operator","Type Operators","Comma Operator","Unary Operators","Relational Operators","Grouping Operators","Exponentiation Operator","Nullish Coalescing Operator"],"description":"What is the operators in JavaScript and how to use it."},"sidebar":"tutorialSidebar","previous":{"title":"Operators in JavaScript","permalink":"/docs/category/operators-in-javascript"},"next":{"title":"Arithmetic Operator","permalink":"/docs/javascript/operators/arithmetic-operator-in-javascript"}}');var s=r(74848),i=r(28453);const o={id:"operators-in-javascript",title:"Operators in JavaScript",sidebar_label:"Operators",sidebar_position:1,tags:["JavaScript","Operators","Arithmetic Operators","Assignment Operators","Comparison Operators","Logical Operators","Bitwise Operators","String Operators","Conditional Operator","Type Operators","Comma Operator","Unary Operators","Relational Operators","Grouping Operators","Exponentiation Operator","Nullish Coalescing Operator"],description:"What is the operators in JavaScript and how to use it."},l=void 0,a={},c=[{value:"What are Operators?",id:"what-are-operators",level:2},{value:"Arithmetic Operators",id:"arithmetic-operators",level:2},{value:"Assignment Operators",id:"assignment-operators",level:2},{value:"Comparison Operators",id:"comparison-operators",level:2},{value:"Logical Operators",id:"logical-operators",level:2},{value:"Bitwise Operators",id:"bitwise-operators",level:2},{value:"String Operators",id:"string-operators",level:2},{value:"Conditional (Ternary) Operator",id:"conditional-ternary-operator",level:2},{value:"Type Operators",id:"type-operators",level:2},{value:"Comma Operator",id:"comma-operator",level:2},{value:"Unary Operators",id:"unary-operators",level:2},{value:"Relational Operators",id:"relational-operators",level:2},{value:"Grouping Operators",id:"grouping-operators",level:2},{value:"Exponentiation Operator",id:"exponentiation-operator",level:2},{value:"Nullish Coalescing Operator",id:"nullish-coalescing-operator",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const t={blockquote:"blockquote",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"In JavaScript, operators are used to perform operations on variables and values. They are used to perform arithmetic, comparison, logical, and other operations. JavaScript supports a wide range of operators, including arithmetic operators, assignment operators, comparison operators, logical operators, and more."}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:(0,s.jsx)(t.strong,{children:"In this tutorial, you will learn about different types of operators in JavaScript and how to use them."})})}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"what-are-operators",children:"What are Operators?"}),"\n",(0,s.jsx)(t.p,{children:"Operators are special symbols that are used to perform operations on variables and values (operands). They are used to perform various operations, such as addition, subtraction, multiplication, division, comparison, logical operations, and more."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"JavaScript supports the following types of operators:"})}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Arithmetic Operators:"})," Used to perform arithmetic operations, such as addition, subtraction, multiplication, and division."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Assignment Operators:"})," Used to assign values to variables."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Comparison Operators:"})," Used to compare two values and return a boolean result."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Logical Operators:"})," Used to perform logical operations, such as AND, OR, and NOT."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Bitwise Operators:"})," Used to perform bitwise operations on binary representations of numbers."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"String Operators:"})," Used to concatenate strings."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Conditional (Ternary) Operator:"})," Used to assign a value to a variable based on a condition."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Type Operators:"})," Used to determine the type of a variable."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Comma Operator:"})," Used to evaluate multiple expressions and return the result of the last expression."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Unary Operators:"})," Used to perform operations on a single operand."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Relational Operators:"})," Used to determine the relationship between two operands."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Grouping Operators:"})," Used to control the order of operations."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Exponentiation Operator:"})," Used to raise a number to the power of another number."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Nullish Coalescing Operator:"})," Used to provide a default value for a variable if it is ",(0,s.jsx)(t.code,{children:"null"})," or ",(0,s.jsx)(t.code,{children:"undefined"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"arithmetic-operators",children:"Arithmetic Operators"}),"\n",(0,s.jsx)(t.p,{children:"Arithmetic operators are used to perform arithmetic operations on numeric values."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Here's an example of using arithmetic operators in JavaScript:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="arithmetic-operators.js"',children:"let x = 10;\nlet y = 5;\n\nlet sum = x + y; // Addition\nlet difference = x - y; // Subtraction\nlet product = x * y; // Multiplication\nlet quotient = x / y; // Division\nlet remainder = x % y; // Modulus\n\nconsole.log(sum); // Output: 15\nconsole.log(difference); // Output: 5\nconsole.log(product); // Output: 50\nconsole.log(quotient); // Output: 2\nconsole.log(remainder); // Output: 0\n"})}),"\n",(0,s.jsxs)(t.p,{children:["In this example, we have used arithmetic operators to perform addition, subtraction, multiplication, division, and modulus operations on the variables ",(0,s.jsx)(t.code,{children:"x"})," and ",(0,s.jsx)(t.code,{children:"y"}),"."]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Operator"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Description"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Example"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"+"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Addition"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x + y"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"-"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Subtraction"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x - y"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"*"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Multiplication"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x * y"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"/"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Division"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x / y"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"%"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Modulus"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x % y"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"++"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Increment"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x++"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"--"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Decrement"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x--"})})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"assignment-operators",children:"Assignment Operators"}),"\n",(0,s.jsx)(t.p,{children:"Assignment operators are used to assign values to variables."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Here's an example of using assignment operators in JavaScript:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="assignment-operators.js"',children:"let x = 10;\n\nx += 5; // Equivalent to x = x + 5\nconsole.log(x); // Output: 15\n\nx -= 5; // Equivalent to x = x - 5\nconsole.log(x); // Output: 10\n\nx *= 5; // Equivalent to x = x * 5\nconsole.log(x); // Output: 50\n\nx /= 5; // Equivalent to x = x / 5\nconsole.log(x); // Output: 10\n\nx %= 5; // Equivalent to x = x % 5\nconsole.log(x); // Output: 0\n"})}),"\n",(0,s.jsxs)(t.p,{children:["In this example, we have used assignment operators to assign values to the variable ",(0,s.jsx)(t.code,{children:"x"})," and perform arithmetic operations on it."]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Operator"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Description"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Example"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"="})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Assignment"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x = 10"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"+="})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Addition assignment"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x += 5"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"-="})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Subtraction assignment"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x -= 5"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"*="})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Multiplication assignment"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x *= 5"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"/="})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Division assignment"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x /= 5"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"%="})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Modulus assignment"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x %= 5"})})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"comparison-operators",children:"Comparison Operators"}),"\n",(0,s.jsx)(t.p,{children:"Comparison operators are used to compare two values and return a boolean result."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Here's an example of using comparison operators in JavaScript:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="comparison-operators.js"',children:"let x = 10;\nlet y = 5;\n\nconsole.log(x > y); // Output: true\nconsole.log(x < y); // Output: false\nconsole.log(x >= y); // Output: true\nconsole.log(x <= y); // Output: false\nconsole.log(x == y); // Output: false\nconsole.log(x != y); // Output: true\n"})}),"\n",(0,s.jsxs)(t.p,{children:["In this example, we have used comparison operators to compare the values of the variables ",(0,s.jsx)(t.code,{children:"x"})," and ",(0,s.jsx)(t.code,{children:"y"}),"."]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Operator"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Description"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Example"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:">"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Greater than"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x > y"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"<"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Less than"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x < y"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:">="})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Greater than or equal to"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x >= y"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"<="})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Less than or equal to"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x <= y"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"=="})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Equal to"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x == y"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"!="})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Not equal to"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x != y"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"==="})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Strict equal to"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x === y"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"!=="})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Strict not equal to"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x !== y"})})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"logical-operators",children:"Logical Operators"}),"\n",(0,s.jsx)(t.p,{children:"Logical operators are used to perform logical operations on boolean values."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Here's an example of using logical operators in JavaScript:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="logical-operators.js"',children:"let x = true;\nlet y = false;\n\nconsole.log(x && y); // Output: false\nconsole.log(x || y); // Output: true\nconsole.log(!x); // Output: false\n"})}),"\n",(0,s.jsxs)(t.p,{children:["In this example, we have used logical operators to perform logical AND, logical OR, and logical NOT operations on the boolean values of the variables ",(0,s.jsx)(t.code,{children:"x"})," and ",(0,s.jsx)(t.code,{children:"y"}),"."]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Operator"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Description"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Example"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"&&"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Logical AND"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x && y"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"`"}),(0,s.jsx)(t.td,{style:{textAlign:"center"}}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"`"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"!"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Logical NOT"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"!x"})})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"bitwise-operators",children:"Bitwise Operators"}),"\n",(0,s.jsx)(t.p,{children:"Bitwise operators are used to perform bitwise operations on binary representations of numbers."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Here's an example of using bitwise operators in JavaScript:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="bitwise-operators.js"',children:"let x = 5; // Binary representation: 0101\nlet y = 3; // Binary representation: 0011\n\nconsole.log(x & y); // Output: 1 (Binary representation: 0001)\nconsole.log(x | y); // Output: 7 (Binary representation: 0111)\nconsole.log(x ^ y); // Output: 6 (Binary representation: 0110)\nconsole.log(~x); // Output: -6\nconsole.log(x << 1); // Output: 10 (Binary representation: 1010)\nconsole.log(x >> 1); // Output: 2 (Binary representation: 0010)\nconsole.log(x >>> 1); // Output: 2 (Binary representation: 0010)\n"})}),"\n",(0,s.jsxs)(t.p,{children:["In this example, we have used bitwise operators to perform bitwise AND, bitwise OR, bitwise XOR, bitwise NOT, left shift, right shift, and zero-fill right shift operations on the binary representations of the numbers ",(0,s.jsx)(t.code,{children:"x"})," and ",(0,s.jsx)(t.code,{children:"y"}),"."]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Operator"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Description"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Example"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"&"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Bitwise AND"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x & y"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"`"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"`"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Bitwise OR"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"^"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Bitwise XOR"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x ^ y"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"~"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Bitwise NOT"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"~x"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"<<"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Left shift"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x << 1"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:">>"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Right shift"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x >> 1"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:">>>"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Zero-fill right shift"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.code,{children:"x >>> 1"})})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"string-operators",children:"String Operators"}),"\n",(0,s.jsx)(t.p,{children:"String operators are used to concatenate strings."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Here's an example of using string operators in JavaScript:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="string-operators.js"',children:'let firstName = "John";\nlet lastName = "Doe";\n\nlet fullName = firstName + " " + lastName;\nconsole.log(fullName); // Output: John Doe\n'})}),"\n",(0,s.jsxs)(t.p,{children:["In this example, we have used the string concatenation operator (",(0,s.jsx)(t.code,{children:"+"}),") to concatenate the strings ",(0,s.jsx)(t.code,{children:"firstName"})," and ",(0,s.jsx)(t.code,{children:"lastName"})," and store the result in the variable ",(0,s.jsx)(t.code,{children:"fullName"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"conditional-ternary-operator",children:"Conditional (Ternary) Operator"}),"\n",(0,s.jsx)(t.p,{children:"The conditional (ternary) operator is used to assign a value to a variable based on a condition."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Here's an example of using the conditional operator in JavaScript:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="conditional-operator.js"',children:'let age = 20;\n\nlet result = (age >= 18) ? "You are an adult" : "You are a minor";\n\nconsole.log(result); // Output: You are an adult\n'})}),"\n",(0,s.jsxs)(t.p,{children:['In this example, we have used the conditional operator to assign the value "You are an adult" to the variable ',(0,s.jsx)(t.code,{children:"result"})," if the condition ",(0,s.jsx)(t.code,{children:"age >= 18"}),' is true, and the value "You are a minor" if the condition is false.']}),"\n",(0,s.jsx)(t.h2,{id:"type-operators",children:"Type Operators"}),"\n",(0,s.jsx)(t.p,{children:"Type operators are used to determine the type of a variable."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsxs)(t.strong,{children:["Here's an example of using the ",(0,s.jsx)(t.code,{children:"typeof"})," operator in JavaScript:"]})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="type-operators.js"',children:'let x = 10;\nlet y = "Hello";\n\nconsole.log(typeof x); // Output: number\nconsole.log(typeof y); // Output: string\n'})}),"\n",(0,s.jsxs)(t.p,{children:["In this example, we have used the ",(0,s.jsx)(t.code,{children:"typeof"})," operator to determine the type of the variables ",(0,s.jsx)(t.code,{children:"x"})," and ",(0,s.jsx)(t.code,{children:"y"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"comma-operator",children:"Comma Operator"}),"\n",(0,s.jsx)(t.p,{children:"The comma operator is used to evaluate multiple expressions and return the result of the last expression."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Here's an example of using the comma operator in JavaScript:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="comma-operator.js"',children:"let x = (5 + 3, 7 - 2, 10 * 2);\n\nconsole.log(x); // Output: 20\n"})}),"\n",(0,s.jsxs)(t.p,{children:["In this example, we have used the comma operator to evaluate the expressions ",(0,s.jsx)(t.code,{children:"5 + 3"}),", ",(0,s.jsx)(t.code,{children:"7 - 2"}),", and ",(0,s.jsx)(t.code,{children:"10 * 2"}),", and return the result of the last expression ",(0,s.jsx)(t.code,{children:"10 * 2"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"unary-operators",children:"Unary Operators"}),"\n",(0,s.jsx)(t.p,{children:"Unary operators are used to perform operations on a single operand."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Here's an example of using unary operators in JavaScript:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="unary-operators.js"',children:"let x = 10;\n\nconsole.log(-x); // Output: -10\nconsole.log(++x); // Output: 11\nconsole.log(--x); // Output: 10\nconsole.log(+x); // Output: 10  \n"})}),"\n",(0,s.jsxs)(t.p,{children:["In this example, we have used unary operators to perform negation, increment, decrement, and identity operations on the variable ",(0,s.jsx)(t.code,{children:"x"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"relational-operators",children:"Relational Operators"}),"\n",(0,s.jsx)(t.p,{children:"Relational operators are used to determine the relationship between two operands."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Here's an example of using relational operators in JavaScript:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="relational-operators.js"',children:"let x = 10;\nlet y = 5;\n\nconsole.log(x > y); // Output: true\nconsole.log(x < y); // Output: false\n"})}),"\n",(0,s.jsxs)(t.p,{children:["In this example, we have used relational operators to determine the relationship between the values of the variables ",(0,s.jsx)(t.code,{children:"x"})," and ",(0,s.jsx)(t.code,{children:"y"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"grouping-operators",children:"Grouping Operators"}),"\n",(0,s.jsx)(t.p,{children:"Grouping operators are used to control the order of operations."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Here's an example of using grouping operators in JavaScript:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="grouping-operators.js"',children:"let x = 10;\nlet y = 5;\nlet z = 2;\n\nlet result = x * (y + z);\n\nconsole.log(result); // Output: 70\n"})}),"\n",(0,s.jsxs)(t.p,{children:["In this example, we have used grouping operators to control the order of operations and calculate the result of the expression ",(0,s.jsx)(t.code,{children:"x * (y + z)"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"exponentiation-operator",children:"Exponentiation Operator"}),"\n",(0,s.jsx)(t.p,{children:"The exponentiation operator is used to raise a number to the power of another number."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Here's an example of using the exponentiation operator in JavaScript:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="exponentiation-operator.js"',children:"let x = 2;\nlet y = 3;\n\nconsole.log(x ** y); // Output: 8\n"})}),"\n",(0,s.jsxs)(t.p,{children:["In this example, we have used the exponentiation operator to raise the number ",(0,s.jsx)(t.code,{children:"x"})," to the power of the number ",(0,s.jsx)(t.code,{children:"y"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"nullish-coalescing-operator",children:"Nullish Coalescing Operator"}),"\n",(0,s.jsxs)(t.p,{children:["The nullish coalescing operator is used to provide a default value for a variable if it is ",(0,s.jsx)(t.code,{children:"null"})," or ",(0,s.jsx)(t.code,{children:"undefined"}),"."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Here's an example of using the nullish coalescing operator in JavaScript:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="nullish-coalescing-operator.js"',children:"let x = null;\nlet y = 5;\n\nlet result = x ?? y;\n\nconsole.log(result); // Output: 5\n"})}),"\n",(0,s.jsxs)(t.p,{children:["In this example, we have used the nullish coalescing operator to provide the value of the variable ",(0,s.jsx)(t.code,{children:"y"})," as the result if the variable ",(0,s.jsx)(t.code,{children:"x"})," is ",(0,s.jsx)(t.code,{children:"null"})," or ",(0,s.jsx)(t.code,{children:"undefined"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(t.p,{children:"In this tutorial, you have learned about different types of operators in JavaScript and how to use them. You have also seen examples of using arithmetic, assignment, comparison, logical, bitwise, string, conditional, type, comma, unary, relational, grouping, exponentiation, and nullish coalescing operators in JavaScript. Operators are an essential part of JavaScript and are used to perform various operations on variables and values. You can use them to perform arithmetic, comparison, logical, and other operations in your JavaScript programs."}),"\n",(0,s.jsx)(t.p,{children:"I hope this tutorial has helped you understand the different types of operators in JavaScript and how to use them. Now you can use operators to perform various operations in your JavaScript programs. Happy coding!"})]})}function x(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>l});var n=r(96540);const s={},i=n.createContext(s);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);