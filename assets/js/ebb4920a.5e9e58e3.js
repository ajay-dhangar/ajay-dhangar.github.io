"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[23896],{84582:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>s,contentTitle:()=>n,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"javascript/operators/logical-operator-in-javascript","title":"Logical Operator in JavaScript","description":"What is the logical operator in JavaScript? Learn about the types of logical operators in JavaScript, including logical AND, logical OR, and logical NOT, and the precedence of logical operators.","source":"@site/docs/javascript/operators/logical-operators-js.md","sourceDirName":"javascript/operators","slug":"/javascript/operators/logical-operator-in-javascript","permalink":"/docs/javascript/operators/logical-operator-in-javascript","draft":false,"unlisted":false,"editUrl":"https://github.com/Ajay-Dhangar/ajay-dhangar.github.io/edit/main/docs/javascript/operators/logical-operators-js.md","tags":[{"inline":true,"label":"JavaScript","permalink":"/docs/tags/java-script"},{"inline":true,"label":"Operators","permalink":"/docs/tags/operators"},{"inline":true,"label":"Logical Operators","permalink":"/docs/tags/logical-operators"},{"inline":true,"label":"Logical AND","permalink":"/docs/tags/logical-and"},{"inline":true,"label":"Logical OR","permalink":"/docs/tags/logical-or"},{"inline":true,"label":"Logical NOT","permalink":"/docs/tags/logical-not"},{"inline":true,"label":"Precedence of Logical Operators","permalink":"/docs/tags/precedence-of-logical-operators"},{"inline":true,"label":"Truthy","permalink":"/docs/tags/truthy"},{"inline":true,"label":"Falsy","permalink":"/docs/tags/falsy"},{"inline":true,"label":"Nullish Values","permalink":"/docs/tags/nullish-values"},{"inline":true,"label":"Non-Boolean Values","permalink":"/docs/tags/non-boolean-values"},{"inline":true,"label":"Multiple Operands","permalink":"/docs/tags/multiple-operands"},{"inline":true,"label":"Side Effects","permalink":"/docs/tags/side-effects"}],"version":"current","lastUpdatedBy":"ajay-dhangar","lastUpdatedAt":1708855615000,"sidebarPosition":6,"frontMatter":{"id":"logical-operator-in-javascript","title":"Logical Operator in JavaScript","sidebar_label":"Logical Operator","sidebar_position":6,"tags":["JavaScript","Operators","Logical Operators","Logical AND","Logical OR","Logical NOT","Precedence of Logical Operators","Truthy","Falsy","Nullish Values","Non-Boolean Values","Multiple Operands","Side Effects"],"description":"What is the logical operator in JavaScript? Learn about the types of logical operators in JavaScript, including logical AND, logical OR, and logical NOT, and the precedence of logical operators."},"sidebar":"tutorialSidebar","previous":{"title":"String Operator","permalink":"/docs/javascript/operators/string-operator-in-javascript"},"next":{"title":"Bitwise Operator","permalink":"/docs/javascript/operators/bitwise-operator-in-javascript"}}');var l=a(74848),t=a(28453);const i={id:"logical-operator-in-javascript",title:"Logical Operator in JavaScript",sidebar_label:"Logical Operator",sidebar_position:6,tags:["JavaScript","Operators","Logical Operators","Logical AND","Logical OR","Logical NOT","Precedence of Logical Operators","Truthy","Falsy","Nullish Values","Non-Boolean Values","Multiple Operands","Side Effects"],description:"What is the logical operator in JavaScript? Learn about the types of logical operators in JavaScript, including logical AND, logical OR, and logical NOT, and the precedence of logical operators."},n=void 0,s={},c=[{value:"Types of Logical Operators in JavaScript",id:"types-of-logical-operators-in-javascript",level:2},{value:"Logical AND (&amp;&amp;)",id:"logical-and-",level:3},{value:"Logical OR (||)",id:"logical-or-",level:3},{value:"Logical NOT (!)",id:"logical-not-",level:3},{value:"Precedence of Logical Operators",id:"precedence-of-logical-operators",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const r={admonition:"admonition",code:"code",h2:"h2",h3:"h3",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(r.p,{children:["In JavaScript, the logical operators are used to perform logical operations on values. The logical operators include logical AND (",(0,l.jsx)(r.code,{children:"&&"}),"), logical OR (",(0,l.jsx)(r.code,{children:"||"}),"), and logical NOT (",(0,l.jsx)(r.code,{children:"!"}),")."]}),"\n",(0,l.jsx)(r.mermaid,{value:"---\ntitle: Logical Operators in JavaScript\n---\n\nclassDiagram\n    class LogicalOperation {\n        operand1\n        operand2\n        result\n        perform()\n    }\n\n    class LogicalAndOperation {\n        perform(): (operand1 && operand2)\n    }\n\n    class LogicalOrOperation {\n        perform(): (operand1 || operand2)\n    }\n\n    class LogicalNotOperation {\n        perform(): (!operand1)\n    }\n\n    LogicalOperation <|-- LogicalAndOperation\n    LogicalOperation <|-- LogicalOrOperation\n    LogicalOperation <|-- LogicalNotOperation"}),"\n",(0,l.jsx)(r.h2,{id:"types-of-logical-operators-in-javascript",children:"Types of Logical Operators in JavaScript"}),"\n",(0,l.jsx)(r.p,{children:"The following are the types of logical operators in JavaScript:"}),"\n",(0,l.jsx)(r.h3,{id:"logical-and-",children:"Logical AND (&&)"}),"\n",(0,l.jsxs)(r.p,{children:["The logical AND (",(0,l.jsx)(r.code,{children:"&&"}),") operator returns ",(0,l.jsx)(r.code,{children:"true"})," if both operands are ",(0,l.jsx)(r.code,{children:"true"}),", otherwise it returns ",(0,l.jsx)(r.code,{children:"false"}),"."]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-js",metastring:'{3} title="Logical AND Operator" showLineNumbers',children:"let a = true;\nlet b = false;\nconsole.log(a && b); // Output: false\n"})}),"\n",(0,l.jsx)(r.h3,{id:"logical-or-",children:"Logical OR (||)"}),"\n",(0,l.jsxs)(r.p,{children:["The logical OR (",(0,l.jsx)(r.code,{children:"||"}),") operator returns ",(0,l.jsx)(r.code,{children:"true"})," if at least one of the operands is ",(0,l.jsx)(r.code,{children:"true"}),", otherwise it returns ",(0,l.jsx)(r.code,{children:"false"}),"."]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-js",metastring:'{3} title="Logical OR Operator" showLineNumbers',children:"let a = true;\nlet b = false;\nconsole.log(a || b); // Output: true\n"})}),"\n",(0,l.jsx)(r.h3,{id:"logical-not-",children:"Logical NOT (!)"}),"\n",(0,l.jsxs)(r.p,{children:["The logical NOT (",(0,l.jsx)(r.code,{children:"!"}),") operator returns ",(0,l.jsx)(r.code,{children:"true"})," if the operand is ",(0,l.jsx)(r.code,{children:"false"}),", and returns ",(0,l.jsx)(r.code,{children:"false"})," if the operand is ",(0,l.jsx)(r.code,{children:"true"}),"."]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-js",metastring:'{2} title="Logical NOT Operator" showLineNumbers',children:"let a = true;\nconsole.log(!a); // Output: false\n"})}),"\n",(0,l.jsxs)(r.p,{children:["In the above examples, the logical AND (",(0,l.jsx)(r.code,{children:"&&"}),") operator returns ",(0,l.jsx)(r.code,{children:"false"})," because the second operand is ",(0,l.jsx)(r.code,{children:"false"}),". The logical OR (",(0,l.jsx)(r.code,{children:"||"}),") operator returns ",(0,l.jsx)(r.code,{children:"true"})," because the first operand is ",(0,l.jsx)(r.code,{children:"true"}),". The logical NOT (",(0,l.jsx)(r.code,{children:"!"}),") operator returns ",(0,l.jsx)(r.code,{children:"false"})," because the operand is ",(0,l.jsx)(r.code,{children:"true"}),"."]}),"\n",(0,l.jsx)(r.h2,{id:"precedence-of-logical-operators",children:"Precedence of Logical Operators"}),"\n",(0,l.jsxs)(r.p,{children:["The logical AND (",(0,l.jsx)(r.code,{children:"&&"}),") operator has higher precedence than the logical OR (",(0,l.jsx)(r.code,{children:"||"}),") operator. The logical NOT (",(0,l.jsx)(r.code,{children:"!"}),") operator has the highest precedence."]}),"\n",(0,l.jsx)(r.p,{children:"You can use parentheses to change the order of evaluation of logical operators."}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-js",metastring:'{4,5} title="Precedence of Logical Operators" showLineNumbers',children:"let a = true;\nlet b = false;\nlet c = true;\nconsole.log(a || b && c); // Output: true\nconsole.log((a || b) && c); // Output: true\n"})}),"\n",(0,l.jsxs)(r.admonition,{title:"tips and tricks",type:"tip",children:[(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.strong,{children:"1. Understanding Truthy and Falsy Values"}),": In JavaScript, every value is either truthy or falsy. The logical operators return the value of the operand that determined the result, rather than ",(0,l.jsx)(r.code,{children:"true"})," or ",(0,l.jsx)(r.code,{children:"false"}),". You can use the logical operators to check for truthy or falsy values."]}),(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.strong,{children:"2. Handling Nullish Values"}),": The logical operators can be used to handle nullish values. The logical OR (",(0,l.jsx)(r.code,{children:"||"}),") operator returns the first truthy operand, otherwise it returns the last operand. The logical AND (",(0,l.jsx)(r.code,{children:"&&"}),") operator returns the first falsy operand, otherwise it returns the last operand."]}),(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.strong,{children:"3. Logical Operators with Non-Boolean Values"}),": The logical operators can be used with non-boolean values. The logical NOT (",(0,l.jsx)(r.code,{children:"!"}),") operator converts the operand to a boolean value and negates it. The logical AND (",(0,l.jsx)(r.code,{children:"&&"}),") and logical OR (",(0,l.jsx)(r.code,{children:"||"}),") operators return the value of the operand that determined the result."]}),(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.strong,{children:"4. Logical Operators with Multiple Operands"}),": The logical operators can be used with multiple operands. The logical AND (",(0,l.jsx)(r.code,{children:"&&"}),") operator returns the first falsy operand, otherwise it returns the last operand. The logical OR (",(0,l.jsx)(r.code,{children:"||"}),") operator returns the first truthy operand, otherwise it returns the last operand."]}),(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.strong,{children:"5. Logical Operators with Side Effects"}),": The logical operators can be used with expressions that have side effects. The logical AND (",(0,l.jsx)(r.code,{children:"&&"}),") operator returns the first operand if it is falsy, otherwise it returns the second operand. The logical OR (",(0,l.jsx)(r.code,{children:"||"}),") operator returns the first operand if it is truthy, otherwise it returns the second operand."]})]}),"\n",(0,l.jsx)(r.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,l.jsxs)(r.p,{children:["In JavaScript, the logical operators are used to perform logical operations on values. The logical operators include logical AND (",(0,l.jsx)(r.code,{children:"&&"}),"), logical OR (",(0,l.jsx)(r.code,{children:"||"}),"), and logical NOT (",(0,l.jsx)(r.code,{children:"!"}),"). The logical AND (",(0,l.jsx)(r.code,{children:"&&"}),") operator returns ",(0,l.jsx)(r.code,{children:"true"})," if both operands are ",(0,l.jsx)(r.code,{children:"true"}),", otherwise it returns ",(0,l.jsx)(r.code,{children:"false"}),". The logical OR (",(0,l.jsx)(r.code,{children:"||"}),") operator returns ",(0,l.jsx)(r.code,{children:"true"})," if at least one of the operands is ",(0,l.jsx)(r.code,{children:"true"}),", otherwise it returns ",(0,l.jsx)(r.code,{children:"false"}),". The logical NOT (",(0,l.jsx)(r.code,{children:"!"}),") operator returns ",(0,l.jsx)(r.code,{children:"true"})," if the operand is ",(0,l.jsx)(r.code,{children:"false"}),", and returns ",(0,l.jsx)(r.code,{children:"false"})," if the operand is ",(0,l.jsx)(r.code,{children:"true"}),"."]})]})}function p(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,l.jsx)(r,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},28453:(e,r,a)=>{a.d(r,{R:()=>i,x:()=>n});var o=a(96540);const l={},t=o.createContext(l);function i(e){const r=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function n(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),o.createElement(t.Provider,{value:r},e.children)}}}]);