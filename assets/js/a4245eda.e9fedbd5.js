"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[401],{96126:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>s});const t=JSON.parse('{"id":"javascript/performance-in-javascript","title":"Performance in JavaScript","description":"In this tutorial, we will learn about performance optimization in JavaScript. We will discuss various techniques and best practices to improve the performance of your JavaScript code and make it run faster.","source":"@site/docs/javascript/performance-js.md","sourceDirName":"javascript","slug":"/javascript/performance-in-javascript","permalink":"/docs/javascript/performance-in-javascript","draft":false,"unlisted":false,"editUrl":"https://github.com/Ajay-Dhangar/ajay-dhangar.github.io/edit/main/docs/javascript/performance-js.md","tags":[{"inline":true,"label":"JavaScript","permalink":"/docs/tags/java-script"},{"inline":true,"label":"Performance","permalink":"/docs/tags/performance"},{"inline":true,"label":"JavaScript Performance","permalink":"/docs/tags/java-script-performance"},{"inline":true,"label":"JavaScript Performance Optimization","permalink":"/docs/tags/java-script-performance-optimization"},{"inline":true,"label":"JavaScript Performance Tips","permalink":"/docs/tags/java-script-performance-tips"},{"inline":true,"label":"JavaScript Performance Best Practices","permalink":"/docs/tags/java-script-performance-best-practices"},{"inline":true,"label":"JavaScript Performance Tutorial","permalink":"/docs/tags/java-script-performance-tutorial"},{"inline":true,"label":"JavaScript Performance Example","permalink":"/docs/tags/java-script-performance-example"}],"version":"current","lastUpdatedBy":"ajay-dhangar","lastUpdatedAt":1711259655000,"sidebarPosition":43,"frontMatter":{"id":"performance-in-javascript","title":"Performance in JavaScript","sidebar_label":"Performance","sidebar_position":43,"tags":["JavaScript","Performance","JavaScript Performance","JavaScript Performance Optimization","JavaScript Performance Tips","JavaScript Performance Best Practices","JavaScript Performance Tutorial","JavaScript Performance Example"],"description":"In this tutorial, we will learn about performance optimization in JavaScript. We will discuss various techniques and best practices to improve the performance of your JavaScript code and make it run faster."},"sidebar":"tutorialSidebar","previous":{"title":"Mistakes","permalink":"/docs/javascript/mistakes-in-js"},"next":{"title":"Versions of JavaScript","permalink":"/docs/category/versions-of-javascript"}}');var i=a(74848),o=a(28453);const r={id:"performance-in-javascript",title:"Performance in JavaScript",sidebar_label:"Performance",sidebar_position:43,tags:["JavaScript","Performance","JavaScript Performance","JavaScript Performance Optimization","JavaScript Performance Tips","JavaScript Performance Best Practices","JavaScript Performance Tutorial","JavaScript Performance Example"],description:"In this tutorial, we will learn about performance optimization in JavaScript. We will discuss various techniques and best practices to improve the performance of your JavaScript code and make it run faster."},c=void 0,l={},s=[{value:"Performance Optimization Techniques",id:"performance-optimization-techniques",level:2},{value:"Minimize DOM Manipulation",id:"minimize-dom-manipulation",level:3},{value:"Avoid Memory Leaks",id:"avoid-memory-leaks",level:3},{value:"Optimize Loops",id:"optimize-loops",level:3},{value:"Use Event Delegation",id:"use-event-delegation",level:3},{value:"Use Efficient Data Structures",id:"use-efficient-data-structures",level:3},{value:"Avoid Global Variables",id:"avoid-global-variables",level:3},{value:"Use <code>===</code> Instead of <code>==</code>",id:"use--instead-of-",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components},{TabItem:a,Tabs:t}=n;return a||m("TabItem",!0),t||m("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"JavaScript is a powerful and flexible language, but it can also be slow if not optimized properly. In this tutorial, we will learn about performance optimization in JavaScript. By following these techniques and best practices, you can improve the performance of your JavaScript code and make it run faster."}),"\n",(0,i.jsx)(n.h2,{id:"performance-optimization-techniques",children:"Performance Optimization Techniques"}),"\n",(0,i.jsx)(n.h3,{id:"minimize-dom-manipulation",children:"Minimize DOM Manipulation"}),"\n",(0,i.jsx)(n.p,{children:"One of the most common performance bottlenecks in JavaScript is excessive DOM manipulation. Every time you modify the DOM, the browser has to reflow and repaint the affected elements, which can be slow and resource-intensive. To improve performance, you should minimize DOM manipulation as much as possible."}),"\n",(0,i.jsxs)(t,{defaultValue:"good",groupId:"dom-manipulation",children:[(0,i.jsxs)(a,{value:"good",label:"Good",children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",metastring:'title="index.html"',children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta http-equiv="X-UA-Compatible" content="IE=edge">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>Document</title>\n</head>\n<body>\n  <div id="container"></div>\n  <script src="script.js"><\/script>\n</body>\n</html>\n'})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="script.js"',children:'const container = document.getElementById("container");\nconst fragment = document.createDocumentFragment();\n\nfor (let i = 0; i < 1000; i++) {\n  const div = document.createElement("div");\n  div.textContent = `Element ${i}`;\n  fragment.appendChild(div);\n}\n\ncontainer.appendChild(fragment);\n'})})]}),(0,i.jsxs)(a,{value:"bad",label:"Bad",children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",metastring:'title="index.html"',children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta http-equiv="X-UA-Compatible" content="IE=edge">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>Document</title>\n</head>\n<body>\n  <div id="container"></div>\n  <script src="script.js"><\/script>\n</body>\n</html>\n'})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="script.js"',children:'const container = document.getElementById("container");\n\nfor (let i = 0; i < 1000; i++) {\n  const div = document.createElement("div");\n  div.textContent = `Element ${i}`;\n  container.appendChild(div);\n}\n'})})]})]}),"\n",(0,i.jsx)(n.h3,{id:"avoid-memory-leaks",children:"Avoid Memory Leaks"}),"\n",(0,i.jsx)(n.p,{children:"Memory leaks can occur in JavaScript when objects are no longer needed but are still referenced, preventing them from being garbage collected. This can lead to increased memory usage and degraded performance over time. To avoid memory leaks, you should be mindful of object references and ensure that objects are properly cleaned up when they are no longer needed."}),"\n",(0,i.jsxs)(t,{defaultValue:"good",groupId:"memory-leaks",children:[(0,i.jsx)(a,{value:"good",label:"Good",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function createHeavyObject() {\n  const obj = { \n    /* heavy data */\n    data: Array.from({ length: 1000000 }, () => Math.random())\n   };\n  return obj;\n}\n\nlet obj = createHeavyObject();\n\nconsole.log(obj.data.length); // Use obj...\n\nobj = null; // Clean up obj\n"})})}),(0,i.jsx)(a,{value:"bad",label:"Bad",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function createHeavyObject() {\n  const obj = { \n    /* heavy data */\n    data: Array.from({ length: 1000000 }, () => Math.random())\n   };\n  return obj;\n}\n\nlet obj = createHeavyObject();\n\nconsole.log(obj.data.length); // Use obj...\n"})})})]}),"\n",(0,i.jsx)(n.h3,{id:"optimize-loops",children:"Optimize Loops"}),"\n",(0,i.jsx)(n.p,{children:"Loops are a common source of performance issues in JavaScript. Inefficient loops can slow down your code, especially when dealing with large datasets. To optimize loops, you should minimize the number of iterations, avoid unnecessary work inside the loop, and use appropriate loop constructs for the task at hand."}),"\n",(0,i.jsxs)(t,{defaultValue:"good",groupId:"loops",children:[(0,i.jsx)(a,{value:"good",label:"Good",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const data = [1, 2, 3, 4, 5];\n\nfor (let i = 0; i < data.length; i++) {\n  console.log(data[i]);\n}\n"})})}),(0,i.jsx)(a,{value:"bad",label:"Bad",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const data = [1, 2, 3, 4, 5];\n\ndata.forEach(item => {\n  console.log(item);\n});\n"})})})]}),"\n",(0,i.jsx)(n.h3,{id:"use-event-delegation",children:"Use Event Delegation"}),"\n",(0,i.jsx)(n.p,{children:"Event delegation is a technique in JavaScript that allows you to attach a single event listener to a parent element, rather than multiple event listeners to individual child elements. This can improve performance by reducing the number of event listeners and simplifying event handling."}),"\n",(0,i.jsxs)(t,{defaultValue:"good",groupId:"event-delegation",children:[(0,i.jsxs)(a,{value:"good",label:"Good",children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",metastring:'title="index.html"',children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta http-equiv="X-UA-Compatible" content="IE=edge">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>Document</title>\n</head>\n<body>\n  <ul id="list">\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n  </ul>\n  <script src="script.js"><\/script>\n</body>\n</html>\n'})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="script.js"',children:'const list = document.getElementById("list");\n\nlist.addEventListener("click", function(event) {\n  if (event.target.tagName === "LI") {\n    console.log(event.target.textContent);\n  }\n});\n'})})]}),(0,i.jsxs)(a,{value:"bad",label:"Bad",children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",metastring:'title="index.html"',children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta http-equiv="X-UA-Compatible" content="IE=edge">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>Document</title>\n</head>\n<body>\n  <ul id="list">\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n  </ul>\n  <script src="script.js"><\/script>\n</body>\n</html>\n'})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="script.js"',children:'const items = document.querySelectorAll("li");\n\nitems.forEach(item => {\n  item.addEventListener("click", function() {\n    console.log(item.textContent);\n  });\n});\n'})})]})]}),"\n",(0,i.jsx)(n.h3,{id:"use-efficient-data-structures",children:"Use Efficient Data Structures"}),"\n",(0,i.jsx)(n.p,{children:"Choosing the right data structure can have a significant impact on the performance of your JavaScript code. For example, using an object for key-value pairs can be more efficient than an array for lookups, especially for large datasets. By selecting the appropriate data structure for your needs, you can optimize the performance of your code."}),"\n",(0,i.jsxs)(t,{defaultValue:"good",groupId:"data-structures",children:[(0,i.jsx)(a,{value:"good",label:"Good",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'const data = {\n  key1: "value1",\n  key2: "value2",\n  key3: "value3"\n};\n\nconsole.log(data.key1);\n'})})}),(0,i.jsx)(a,{value:"bad",label:"Bad",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'const data = ["value1", "value2", "value3"];\n\nconsole.log(data[0]);\n'})})})]}),"\n",(0,i.jsx)(n.h3,{id:"avoid-global-variables",children:"Avoid Global Variables"}),"\n",(0,i.jsx)(n.p,{children:"Global variables can lead to performance issues in JavaScript, as they are accessible from anywhere in your code and can be modified by any part of your application. This can make it difficult to track changes and optimize performance. To avoid global variables, you should encapsulate your code in modules and use local variables whenever possible."}),"\n",(0,i.jsxs)(t,{defaultValue:"good",groupId:"global-variables",children:[(0,i.jsx)(a,{value:"good",label:"Good",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function myFunction() {\n  const localVar = 10;\n  console.log(localVar);\n}\n\nmyFunction(); // 10\n"})})}),(0,i.jsx)(a,{value:"bad",label:"Bad",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function myFunction() {\n  localVar = 10;\n  console.log(localVar);\n}\n\nmyFunction(); // 10\n"})})})]}),"\n",(0,i.jsxs)(n.h3,{id:"use--instead-of-",children:["Use ",(0,i.jsx)(n.code,{children:"==="})," Instead of ",(0,i.jsx)(n.code,{children:"=="})]}),"\n",(0,i.jsxs)(n.p,{children:["Another common mistake in JavaScript is using the ",(0,i.jsx)(n.code,{children:"=="})," operator instead of the ",(0,i.jsx)(n.code,{children:"==="})," operator. The ",(0,i.jsx)(n.code,{children:"=="})," operator performs type coercion, which means that it converts the operands to the same type before comparing them. This can lead to unexpected results and bugs in your code. The ",(0,i.jsx)(n.code,{children:"==="})," operator, on the other hand, performs strict equality comparison, which means that it compares the operands without type coercion."]}),"\n",(0,i.jsxs)(t,{defaultValue:"good",groupId:"equality-operator",children:[(0,i.jsx)(a,{value:"good",label:"Good",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'let x = 10;\nlet y = "10";\n\nif (x === 10) {\n  console.log("x is equal to 10");\n}\n\nif (x === y) {\n  console.log("x is equal to y");\n}\n'})})}),(0,i.jsx)(a,{value:"bad",label:"Bad",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'let x = 10;\nlet y = "10";\n\nif (x == 10) {\n  console.log("x is equal to 10");\n}\n\nif (x == y) {\n  console.log("x is equal to y");\n}\n'})})})]}),"\n",(0,i.jsx)(n.p,{children:"By following these performance optimization techniques and best practices, you can improve the performance of your JavaScript code and make it run faster. Remember to profile your code and identify bottlenecks before applying optimizations to ensure that you are addressing the most critical issues."}),"\n",(0,i.jsx)(n.admonition,{title:"\ud83d\ude80 Performance Tip",type:"info",children:(0,i.jsx)(n.p,{children:"Always measure the performance of your code before and after applying optimizations to ensure that you are achieving the desired improvements."})}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(n.p,{children:["In this tutorial, we learned about performance optimization in JavaScript. We discussed various techniques and best practices to improve the performance of your JavaScript code, including minimizing DOM manipulation, avoiding memory leaks, optimizing loops, using event delegation, choosing efficient data structures, avoiding global variables, and using ",(0,i.jsx)(n.code,{children:"==="})," instead of ",(0,i.jsx)(n.code,{children:"=="}),". By following these techniques, you can optimize the performance of your JavaScript code and make it run faster."]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},28453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>c});var t=a(96540);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);