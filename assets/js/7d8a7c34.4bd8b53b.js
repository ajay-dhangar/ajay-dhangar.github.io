"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[22836],{93106:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"javascript/reg-exp-in-javascript","title":"Regular Expressions in JavaScript","description":"In this tutorial, we will learn about regular expressions in JavaScript. We will learn how to create and use regular expressions to match, search, replace, and split strings in JavaScript.","source":"@site/docs/javascript/reg-exp.md","sourceDirName":"javascript","slug":"/javascript/reg-exp-in-javascript","permalink":"/docs/javascript/reg-exp-in-javascript","draft":false,"unlisted":false,"editUrl":"https://github.com/Ajay-Dhangar/ajay-dhangar.github.io/edit/main/docs/javascript/reg-exp.md","tags":[{"inline":true,"label":"JavaScript","permalink":"/docs/tags/java-script"},{"inline":true,"label":"Regular Expressions","permalink":"/docs/tags/regular-expressions"},{"inline":true,"label":"RegExp","permalink":"/docs/tags/reg-exp"},{"inline":true,"label":"Pattern","permalink":"/docs/tags/pattern"},{"inline":true,"label":"Match","permalink":"/docs/tags/match"},{"inline":true,"label":"Replace","permalink":"/docs/tags/replace"},{"inline":true,"label":"Search","permalink":"/docs/tags/search"},{"inline":true,"label":"Split","permalink":"/docs/tags/split"},{"inline":true,"label":"Test","permalink":"/docs/tags/test"},{"inline":true,"label":"RegExp Object","permalink":"/docs/tags/reg-exp-object"},{"inline":true,"label":"RegExp Methods","permalink":"/docs/tags/reg-exp-methods"},{"inline":true,"label":"RegExp Properties","permalink":"/docs/tags/reg-exp-properties"},{"inline":true,"label":"RegExp in JavaScript","permalink":"/docs/tags/reg-exp-in-java-script"},{"inline":true,"label":"Regular Expressions in JavaScript","permalink":"/docs/tags/regular-expressions-in-java-script"},{"inline":true,"label":"RegExp Object in JavaScript","permalink":"/docs/tags/reg-exp-object-in-java-script"},{"inline":true,"label":"RegExp Methods in JavaScript","permalink":"/docs/tags/reg-exp-methods-in-java-script"},{"inline":true,"label":"RegExp Properties in JavaScript","permalink":"/docs/tags/reg-exp-properties-in-java-script"}],"version":"current","lastUpdatedBy":"ajay-dhangar","lastUpdatedAt":1710935162000,"sidebarPosition":29,"frontMatter":{"id":"reg-exp-in-javascript","title":"Regular Expressions in JavaScript","sidebar_label":"Regular Expressions","sidebar_position":29,"tags":["JavaScript","Regular Expressions","RegExp","Pattern","Match","Replace","Search","Split","Test","RegExp Object","RegExp Methods","RegExp Properties","RegExp in JavaScript","Regular Expressions in JavaScript","RegExp Object in JavaScript","RegExp Methods in JavaScript","RegExp Properties in JavaScript"],"description":"In this tutorial, we will learn about regular expressions in JavaScript. We will learn how to create and use regular expressions to match, search, replace, and split strings in JavaScript."},"sidebar":"tutorialSidebar","previous":{"title":"typeof","permalink":"/docs/javascript/type-of-in-javascript"},"next":{"title":"Precedence and Associativity of Operators","permalink":"/docs/javascript/precedence-and-associativity-of-operators-in-javascript"}}');var t=n(74848),a=n(28453);const i={id:"reg-exp-in-javascript",title:"Regular Expressions in JavaScript",sidebar_label:"Regular Expressions",sidebar_position:29,tags:["JavaScript","Regular Expressions","RegExp","Pattern","Match","Replace","Search","Split","Test","RegExp Object","RegExp Methods","RegExp Properties","RegExp in JavaScript","Regular Expressions in JavaScript","RegExp Object in JavaScript","RegExp Methods in JavaScript","RegExp Properties in JavaScript"],description:"In this tutorial, we will learn about regular expressions in JavaScript. We will learn how to create and use regular expressions to match, search, replace, and split strings in JavaScript."},c=void 0,l={},o=[{value:"Creating a Regular Expression",id:"creating-a-regular-expression",level:2},{value:"Using the <code>RegExp</code> Object",id:"using-the-regexp-object",level:3},{value:"Using Regular Expression Literal",id:"using-regular-expression-literal",level:3},{value:"Regular Expression Patterns",id:"regular-expression-patterns",level:2},{value:"Literal Characters",id:"literal-characters",level:3},{value:"Metacharacters",id:"metacharacters",level:3},{value:"Regular Expression Flags",id:"regular-expression-flags",level:2},{value:"Regular Expression Methods",id:"regular-expression-methods",level:2},{value:"Using the <code>match()</code> Method",id:"using-the-match-method",level:3},{value:"Using the <code>search()</code> Method",id:"using-the-search-method",level:3},{value:"Using the <code>replace()</code> Method",id:"using-the-replace-method",level:3},{value:"Using the <code>split()</code> Method",id:"using-the-split-method",level:3},{value:"Using the <code>test()</code> Method",id:"using-the-test-method",level:3},{value:"Using the <code>exec()</code> Method",id:"using-the-exec-method",level:3},{value:"Regular Expression Properties",id:"regular-expression-properties",level:2},{value:"Regular Expression Examples",id:"regular-expression-examples",level:2},{value:"Matching a Pattern",id:"matching-a-pattern",level:3},{value:"Searching for a Pattern",id:"searching-for-a-pattern",level:3},{value:"Replacing a Pattern",id:"replacing-a-pattern",level:3},{value:"Splitting a String",id:"splitting-a-string",level:3},{value:"Matching Multiple Patterns",id:"matching-multiple-patterns",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const s={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.p,{children:"In JavaScript, a regular expression is an object that describes a pattern of characters. Regular expressions are used to perform pattern-matching and search-and-replace functions on strings. They are a powerful tool for working with strings and text data in JavaScript."}),"\n",(0,t.jsx)(s.h2,{id:"creating-a-regular-expression",children:"Creating a Regular Expression"}),"\n",(0,t.jsxs)(s.p,{children:["In JavaScript, you can create a regular expression using the ",(0,t.jsx)(s.code,{children:"RegExp"})," object or by using a regular expression literal."]}),"\n",(0,t.jsxs)(s.h3,{id:"using-the-regexp-object",children:["Using the ",(0,t.jsx)(s.code,{children:"RegExp"})," Object"]}),"\n",(0,t.jsxs)(s.p,{children:["You can create a regular expression using the ",(0,t.jsx)(s.code,{children:"RegExp"})," object as follows:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",metastring:'title="app.js"',children:'const pattern = new RegExp("hello");\n\nconsole.log(pattern); // /hello/\n'})}),"\n",(0,t.jsxs)(s.p,{children:["In this example, we have created a regular expression that matches the string ",(0,t.jsx)(s.code,{children:'"hello"'}),".\nThe ",(0,t.jsx)(s.code,{children:"RegExp"})," object takes two arguments: the pattern and the flags."]}),"\n",(0,t.jsx)(s.h3,{id:"using-regular-expression-literal",children:"Using Regular Expression Literal"}),"\n",(0,t.jsx)(s.p,{children:"You can also create a regular expression using a regular expression literal as follows:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",metastring:'title="app.js"',children:"const pattern = /hello/;\n"})}),"\n",(0,t.jsx)(s.p,{children:"In this example, we have created a regular expression using a regular expression literal."}),"\n",(0,t.jsx)(s.h2,{id:"regular-expression-patterns",children:"Regular Expression Patterns"}),"\n",(0,t.jsx)(s.p,{children:"A regular expression pattern is a sequence of characters that define a search pattern. It can include literal characters, metacharacters, and quantifiers."}),"\n",(0,t.jsx)(s.h3,{id:"literal-characters",children:"Literal Characters"}),"\n",(0,t.jsxs)(s.p,{children:["Literal characters are characters that match themselves. For example, the regular expression ",(0,t.jsx)(s.code,{children:"/hello/"})," matches the string ",(0,t.jsx)(s.code,{children:'"hello"'}),"."]}),"\n",(0,t.jsx)(s.h3,{id:"metacharacters",children:"Metacharacters"}),"\n",(0,t.jsx)(s.p,{children:"Metacharacters are special characters that have a special meaning in regular expressions. Some common metacharacters are:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"."}),": Matches any single character except the newline character."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"^"}),": Matches the beginning of a string."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"$"}),": Matches the end of a string."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"*"}),": Matches zero or more occurrences of the preceding character."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"+"}),": Matches one or more occurrences of the preceding character."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"?"}),": Matches zero or one occurrence of the preceding character."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"[]"}),": Matches any one of the characters inside the square brackets."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"()"}),": Groups multiple tokens together."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"|"}),": Matches either the expression before or after the ",(0,t.jsx)(s.code,{children:"|"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"\\"}),": Escapes a metacharacter or a special character."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"{}"}),": Matches a specific number of occurrences of the preceding character."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"^"}),": Inside square brackets, it negates the character set."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"\\b"}),": Matches a word boundary."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"\\B"}),": Matches a non-word boundary."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"\\d"}),": Matches a digit character."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"\\D"}),": Matches a non-digit character."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"\\s"}),": Matches a whitespace character."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"\\S"}),": Matches a non-whitespace character."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"\\w"}),": Matches a word character."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"\\W"}),": Matches a non-word character."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"\\n"}),": Matches a newline character."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"\\r"}),": Matches a carriage return character."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"\\t"}),": Matches a tab character."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"\\v"}),": Matches a vertical tab character."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"\\f"}),": Matches a form feed character."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"\\0"}),": Matches a null character."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Example for all metacharacters with their description or usage."})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",metastring:'title="app.js"',children:"const pattern1 = /./; // Matches any single character except the newline character\nconst pattern2 = /^hello/; // Matches the beginning of a string\nconst pattern3 = /world$/; // Matches the end of a string\nconst pattern4 = /a*/; // Matches zero or more occurrences of the preceding character\nconst pattern5 = /b+/; // Matches one or more occurrences of the preceding character\nconst pattern6 = /c?/; // Matches zero or one occurrence of the preceding character\nconst pattern7 = /[abc]/; // Matches any one of the characters inside the square brackets\nconst pattern8 = /(abc)/; // Groups multiple tokens together\nconst pattern9 = /a|b/; // Matches either the expression before or after the |\nconst pattern10 = /\\./; // Escapes a metacharacter or a special character\nconst pattern11 = /d{3}/; // Matches exactly 3 occurrences of the preceding character\nconst pattern12 = /[^abc]/; // Negates the character set\nconst pattern13 = /\\bword\\b/; // Matches a word boundary\nconst pattern14 = /\\d/; // Matches a digit character\nconst pattern15 = /\\D/; // Matches a non-digit character\nconst pattern16 = /\\s/; // Matches a whitespace character\nconst pattern17 = /\\S/; // Matches a non-whitespace character\nconst pattern18 = /\\w/; // Matches a word character\nconst pattern19 = /\\W/; // Matches a non-word character\nconst pattern20 = /\\n/; // Matches a newline character\nconst pattern21 = /\\r/; // Matches a carriage return character\nconst pattern22 = /\\t/; // Matches a tab character\nconst pattern23 = /\\v/; // Matches a vertical tab character\nconst pattern24 = /\\f/; // Matches a form feed character\nconst pattern25 = /\\0/; // Matches a null character\n\nconsole.log(pattern1);\n"})}),"\n",(0,t.jsx)(s.h2,{id:"regular-expression-flags",children:"Regular Expression Flags"}),"\n",(0,t.jsx)(s.p,{children:"Regular expressions can have flags that modify the behavior of the pattern-matching. Some common flags are:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"i"}),": Case-insensitive matching."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"g"}),": Global matching (find all matches)."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"m"}),": Multiline matching."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"s"}),": Allows ",(0,t.jsx)(s.code,{children:"."})," to match newline characters."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"u"}),": Enables full Unicode support."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"y"}),": Sticky matching (matches from the last index)."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"d"}),": Enables ECMAScript 2018 mode."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"x"}),": Ignores whitespace and allows comments in the pattern."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"A"}),": Enables the ",(0,t.jsx)(s.code,{children:"astral"})," mode."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"D"}),": Enables the ",(0,t.jsx)(s.code,{children:"dotAll"})," mode."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"U"}),": Enables the ",(0,t.jsx)(s.code,{children:"ungreedy"})," mode."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"J"}),": Enables the ",(0,t.jsx)(s.code,{children:"freeSpacing"})," mode."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"X"}),": Enables the ",(0,t.jsx)(s.code,{children:"extra"})," mode."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"T"}),": Enables the ",(0,t.jsx)(s.code,{children:"unicode"})," mode."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"S"}),": Enables the ",(0,t.jsx)(s.code,{children:"namedGroups"})," mode."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"R"}),": Enables the ",(0,t.jsx)(s.code,{children:"rightContext"})," mode."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"L"}),": Enables the ",(0,t.jsx)(s.code,{children:"lookbehind"})," mode."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"P"}),": Enables the ",(0,t.jsx)(s.code,{children:"hasIndices"})," mode."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"O"}),": Enables the ",(0,t.jsx)(s.code,{children:"optimize"})," mode."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"C"}),": Enables the ",(0,t.jsx)(s.code,{children:"constrained"})," mode."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"B"}),": Enables the ",(0,t.jsx)(s.code,{children:"backreferences"})," mode."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"F"}),": Enables the ",(0,t.jsx)(s.code,{children:"freeSpacing"})," mode."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"N"}),": Enables the ",(0,t.jsx)(s.code,{children:"newline"})," mode."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"K"}),": Enables the ",(0,t.jsx)(s.code,{children:"keepOrder"})," mode."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"I"}),": Enables the ",(0,t.jsx)(s.code,{children:"ignorePatternWhitespace"})," mode."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"M"}),": Enables the ",(0,t.jsx)(s.code,{children:"multiline"})," mode."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"Y"}),": Enables the ",(0,t.jsx)(s.code,{children:"sticky"})," mode."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"G"}),": Enables the ",(0,t.jsx)(s.code,{children:"global"})," mode."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Example for all flags with their description or usage."})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",metastring:'title="app.js"',children:"const pattern1 = /hello/i; // Case-insensitive matching\nconst pattern2 = /hello/g; // Global matching (find all matches)\nconst pattern3 = /hello/m; // Multiline matching\nconst pattern4 = /hello/s; // Allows . to match newline characters\nconst pattern5 = /hello/u; // Enables full Unicode support\nconst pattern6 = /hello/y; // Sticky matching (matches from the last index)\nconst pattern7 = /hello/d; // Enables ECMAScript 2018 mode\nconst pattern8 = /hello/x; // Ignores whitespace and allows comments in the pattern\nconst pattern9 = /hello/A; // Enables the astral mode\nconst pattern10 = /hello/D; // Enables the dotAll mode\nconst pattern11 = /hello/U; // Enables the ungreedy mode\nconst pattern12 = /hello/J; // Enables the freeSpacing mode\nconst pattern13 = /hello/X; // Enables the extra mode\nconst pattern14 = /hello/T; // Enables the unicode mode\nconst pattern15 = /hello/S; // Enables the namedGroups mode\nconst pattern16 = /hello/R; // Enables the rightContext mode\n\nconsole.log(pattern1);\n"})}),"\n",(0,t.jsx)(s.h2,{id:"regular-expression-methods",children:"Regular Expression Methods"}),"\n",(0,t.jsx)(s.p,{children:"In JavaScript, regular expressions are used with string methods to perform pattern-matching and search-and-replace functions on strings. Some common string methods that use regular expressions are:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"match()"}),": Returns an array of matches."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"search()"}),": Returns the index of the first match."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"replace()"}),": Replaces the matched substring with a new substring."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"split()"}),": Splits the string into an array of substrings."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"test()"}),": Tests for a match in a string."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"exec()"}),": Returns the next match."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"compile()"}),": Compiles a regular expression."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"toString()"}),": Returns the string representation of a regular expression."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"valueOf()"}),": Returns the primitive value of a regular expression."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"toSource()"}),": Returns the source code of a regular expression."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"toJSON()"}),": Returns the JSON representation of a regular expression."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"toLocaleString()"}),": Returns the localized string representation of a regular expression."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"hasInstance()"}),": Tests if a regular expression is an instance of another object."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"isConcatSpreadable()"}),": Tests if a regular expression is spreadable."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"iterator()"}),": Returns an iterator for a regular expression."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"matchAll()"}),": Returns an iterator of matches."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"species()"}),": Returns the constructor of a regular expression."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"unscopables()"}),": Returns an object of properties to exclude from a regular expression."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"flags()"}),": Returns the flags of a regular expression."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"dotAll()"}),": Returns the dotAll flag of a regular expression."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"sticky()"}),": Returns the sticky flag of a regular expression."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"unicode()"}),": Returns the unicode flag of a regular expression."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"hasIndices()"}),": Returns the hasIndices flag of a regular expression."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"ignoreCase()"}),": Returns the ignoreCase flag of a regular expression."]}),"\n"]}),"\n",(0,t.jsxs)(s.h3,{id:"using-the-match-method",children:["Using the ",(0,t.jsx)(s.code,{children:"match()"})," Method"]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"match()"})," method is used to match a string against a regular expression. It returns an array of matches if the pattern is found, or ",(0,t.jsx)(s.code,{children:"null"})," if the pattern is not found."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",metastring:'title="app.js"',children:"const str = \"Hello, World!\";\nconst pattern = /lo/;\nconst result = str.match(pattern); \n\nconsole.log(result); // [ 'lo', index: 3, input: 'Hello, World!', groups: undefined ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["In this example, we have used the ",(0,t.jsx)(s.code,{children:"match()"})," method to match the string ",(0,t.jsx)(s.code,{children:'"Hello, World!"'})," against the regular expression ",(0,t.jsx)(s.code,{children:"/lo/"}),". The ",(0,t.jsx)(s.code,{children:"match()"})," method returns an array of matches ",(0,t.jsx)(s.code,{children:"['lo']"}),"."]}),"\n",(0,t.jsxs)(s.h3,{id:"using-the-search-method",children:["Using the ",(0,t.jsx)(s.code,{children:"search()"})," Method"]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"search()"})," method is used to search for a pattern in a string. It returns the index of the first match if the pattern is found, or ",(0,t.jsx)(s.code,{children:"-1"})," if the pattern is not found."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",metastring:'title="app.js"',children:'const str = "Hello, World!";\nconst pattern = /lo/;\nconst result = str.search(pattern);\n\nconsole.log(result); // 3\n'})}),"\n",(0,t.jsxs)(s.p,{children:["In this example, we have used the ",(0,t.jsx)(s.code,{children:"search()"})," method to search for the pattern ",(0,t.jsx)(s.code,{children:"/lo/"})," in the string ",(0,t.jsx)(s.code,{children:'"Hello, World!"'}),". The ",(0,t.jsx)(s.code,{children:"search()"})," method returns the index ",(0,t.jsx)(s.code,{children:"3"})," where the pattern is found."]}),"\n",(0,t.jsxs)(s.h3,{id:"using-the-replace-method",children:["Using the ",(0,t.jsx)(s.code,{children:"replace()"})," Method"]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"replace()"})," method is used to replace a pattern in a string with a new substring."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",metastring:'title="app.js"',children:'const str = "Hello, World!";\nconst pattern = /lo/;\nconst result = str.replace(pattern, "123");\n\nconsole.log(result); // He123, World!\n'})}),"\n",(0,t.jsxs)(s.p,{children:["In this example, we have used the ",(0,t.jsx)(s.code,{children:"replace()"})," method to replace the pattern ",(0,t.jsx)(s.code,{children:"/lo/"})," in the string ",(0,t.jsx)(s.code,{children:'"Hello, World!"'})," with the new substring ",(0,t.jsx)(s.code,{children:'"123"'}),"."]}),"\n",(0,t.jsxs)(s.h3,{id:"using-the-split-method",children:["Using the ",(0,t.jsx)(s.code,{children:"split()"})," Method"]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"split()"})," method is used to split a string into an array of substrings using a regular expression or a specified separator."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",metastring:'title="app.js"',children:"const str = \"Hello, World!\";\nconst pattern = /lo/;\nconst result = str.split(pattern);\n\nconsole.log(result); // [ 'He', ', World!' ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["In this example, we have used the ",(0,t.jsx)(s.code,{children:"split()"})," method to split the string ",(0,t.jsx)(s.code,{children:'"Hello, World!"'})," into an array of substrings using the regular expression ",(0,t.jsx)(s.code,{children:"/lo/"}),"."]}),"\n",(0,t.jsxs)(s.h3,{id:"using-the-test-method",children:["Using the ",(0,t.jsx)(s.code,{children:"test()"})," Method"]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"test()"})," method is used to test for a match in a string. It returns ",(0,t.jsx)(s.code,{children:"true"})," if the pattern is found, or ",(0,t.jsx)(s.code,{children:"false"})," if the pattern is not found."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",metastring:'title="app.js"',children:'const str = "Hello, World!";\nconst pattern = /lo/;\nconst result = pattern.test(str);\n\nconsole.log(result); // true\n'})}),"\n",(0,t.jsxs)(s.p,{children:["In this example, we have used the ",(0,t.jsx)(s.code,{children:"test()"})," method to test for the pattern ",(0,t.jsx)(s.code,{children:"/lo/"})," in the string ",(0,t.jsx)(s.code,{children:'"Hello, World!"'}),". The ",(0,t.jsx)(s.code,{children:"test()"})," method returns ",(0,t.jsx)(s.code,{children:"true"})," because the pattern is found."]}),"\n",(0,t.jsxs)(s.h3,{id:"using-the-exec-method",children:["Using the ",(0,t.jsx)(s.code,{children:"exec()"})," Method"]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"exec()"})," method is used to return the next match in a string. It returns an array of matches if the pattern is found, or ",(0,t.jsx)(s.code,{children:"null"})," if the pattern is not found."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",metastring:'title="app.js"',children:"const str = \"Hello, World!\";\nconst pattern = /lo/;\nconst result = pattern.exec(str);\n\nconsole.log(result); // [ 'lo', index: 3, input: 'Hello, World!', groups: undefined ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["In this example, we have used the ",(0,t.jsx)(s.code,{children:"exec()"})," method to return the next match of the pattern ",(0,t.jsx)(s.code,{children:"/lo/"})," in the string ",(0,t.jsx)(s.code,{children:'"Hello, World!"'}),". The ",(0,t.jsx)(s.code,{children:"exec()"})," method returns an array of matches ",(0,t.jsx)(s.code,{children:"['lo']"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"regular-expression-properties",children:"Regular Expression Properties"}),"\n",(0,t.jsx)(s.p,{children:"A regular expression object has several properties that provide information about the regular expression."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"source"}),": Returns the source text of the regular expression."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"flags"}),": Returns the flags of the regular expression."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"global"}),": Returns ",(0,t.jsx)(s.code,{children:"true"})," if the ",(0,t.jsx)(s.code,{children:"g"})," flag is set, otherwise ",(0,t.jsx)(s.code,{children:"false"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"ignoreCase"}),": Returns ",(0,t.jsx)(s.code,{children:"true"})," if the ",(0,t.jsx)(s.code,{children:"i"})," flag is set, otherwise ",(0,t.jsx)(s.code,{children:"false"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"multiline"}),": Returns ",(0,t.jsx)(s.code,{children:"true"})," if the ",(0,t.jsx)(s.code,{children:"m"})," flag is set, otherwise ",(0,t.jsx)(s.code,{children:"false"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"dotAll"}),": Returns ",(0,t.jsx)(s.code,{children:"true"})," if the ",(0,t.jsx)(s.code,{children:"s"})," flag is set, otherwise ",(0,t.jsx)(s.code,{children:"false"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"unicode"}),": Returns ",(0,t.jsx)(s.code,{children:"true"})," if the ",(0,t.jsx)(s.code,{children:"u"})," flag is set, otherwise ",(0,t.jsx)(s.code,{children:"false"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"sticky"}),": Returns ",(0,t.jsx)(s.code,{children:"true"})," if the ",(0,t.jsx)(s.code,{children:"y"})," flag is set, otherwise ",(0,t.jsx)(s.code,{children:"false"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"hasIndices"}),": Returns ",(0,t.jsx)(s.code,{children:"true"})," if the ",(0,t.jsx)(s.code,{children:"d"})," flag is set, otherwise ",(0,t.jsx)(s.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Example for all properties with their description or usage."})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",metastring:'title="app.js"',children:"const pattern = /hello/gi;\n\nconsole.log(pattern.source); // hello\nconsole.log(pattern.flags); // gi\nconsole.log(pattern.global); // true\nconsole.log(pattern.ignoreCase); // true\nconsole.log(pattern.multiline); // false\nconsole.log(pattern.dotAll); // false\nconsole.log(pattern.unicode); // false\nconsole.log(pattern.sticky); // false\nconsole.log(pattern.hasIndices); // false\n"})}),"\n",(0,t.jsxs)(s.p,{children:["In this example, we have created a regular expression ",(0,t.jsx)(s.code,{children:"/hello/gi"})," and accessed its properties using the ",(0,t.jsx)(s.code,{children:"source"}),", ",(0,t.jsx)(s.code,{children:"flags"}),", ",(0,t.jsx)(s.code,{children:"global"}),", ",(0,t.jsx)(s.code,{children:"ignoreCase"}),", ",(0,t.jsx)(s.code,{children:"multiline"}),", ",(0,t.jsx)(s.code,{children:"dotAll"}),", ",(0,t.jsx)(s.code,{children:"unicode"}),", ",(0,t.jsx)(s.code,{children:"sticky"}),", and ",(0,t.jsx)(s.code,{children:"hasIndices"})," properties."]}),"\n",(0,t.jsx)(s.h2,{id:"regular-expression-examples",children:"Regular Expression Examples"}),"\n",(0,t.jsx)(s.h3,{id:"matching-a-pattern",children:"Matching a Pattern"}),"\n",(0,t.jsx)(s.p,{children:"You can use regular expressions to match a pattern in a string."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",metastring:'title="app.js"',children:'const str = "Hello, World!";\nconst pattern = /lo/;\nconst result = pattern.test(str);\n\nconsole.log(result); // true\n'})}),"\n",(0,t.jsxs)(s.p,{children:["In this example, we have used a regular expression to match the pattern ",(0,t.jsx)(s.code,{children:"/lo/"})," in the string ",(0,t.jsx)(s.code,{children:'"Hello, World!"'}),". The ",(0,t.jsx)(s.code,{children:"test()"})," method returns ",(0,t.jsx)(s.code,{children:"true"})," because the pattern is found."]}),"\n",(0,t.jsx)(s.h3,{id:"searching-for-a-pattern",children:"Searching for a Pattern"}),"\n",(0,t.jsx)(s.p,{children:"You can use regular expressions to search for a pattern in a string."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",metastring:'title="app.js"',children:'const str = "Hello, World!";\nconst pattern = /lo/;\nconst result = str.search(pattern);\n\nconsole.log(result); // 3\n'})}),"\n",(0,t.jsxs)(s.p,{children:["In this example, we have used a regular expression to search for the pattern ",(0,t.jsx)(s.code,{children:"/lo/"})," in the string ",(0,t.jsx)(s.code,{children:'"Hello, World!"'}),". The ",(0,t.jsx)(s.code,{children:"search()"})," method returns the index ",(0,t.jsx)(s.code,{children:"3"})," where the pattern is found."]}),"\n",(0,t.jsx)(s.h3,{id:"replacing-a-pattern",children:"Replacing a Pattern"}),"\n",(0,t.jsx)(s.p,{children:"You can use regular expressions to replace a pattern in a string with a new substring."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",metastring:'title="app.js"',children:'const str = "Hello, World!";\nconst pattern = /lo/;\nconst result = str.replace(pattern, "123");\n\nconsole.log(result); // He123, World!\n'})}),"\n",(0,t.jsxs)(s.p,{children:["In this example, we have used a regular expression to replace the pattern ",(0,t.jsx)(s.code,{children:"/lo/"})," in the string ",(0,t.jsx)(s.code,{children:'"Hello, World!"'})," with the new substring ",(0,t.jsx)(s.code,{children:'"123"'}),"."]}),"\n",(0,t.jsx)(s.h3,{id:"splitting-a-string",children:"Splitting a String"}),"\n",(0,t.jsx)(s.p,{children:"You can use regular expressions to split a string into an array of substrings."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",metastring:'title="app.js"',children:"const str = \"Hello, World!\";\nconst pattern = /lo/;\nconst result = str.split(pattern);\n\nconsole.log(result); // [ 'He', ', World!' ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["In this example, we have used a regular expression to split the string ",(0,t.jsx)(s.code,{children:'"Hello, World!"'})," into an array of substrings using the pattern ",(0,t.jsx)(s.code,{children:"/lo/"}),"."]}),"\n",(0,t.jsx)(s.h3,{id:"matching-multiple-patterns",children:"Matching Multiple Patterns"}),"\n",(0,t.jsx)(s.p,{children:"You can use regular expressions to match multiple patterns in a string."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",metastring:'title="app.js"',children:"const str = \"Hello, World!\";\nconst pattern = /lo/g;\nconst result = str.match(pattern);\n\nconsole.log(result); // [ 'lo' ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["In this example, we have used a regular expression to match the pattern ",(0,t.jsx)(s.code,{children:"/lo/g"})," in the string ",(0,t.jsx)(s.code,{children:'"Hello, World!"'}),". The ",(0,t.jsx)(s.code,{children:"match()"})," method returns an array of matches ",(0,t.jsx)(s.code,{children:"['lo']"}),"."]}),"\n",(0,t.jsxs)(s.admonition,{title:"\ud83d\udcdd Note",type:"tip",children:[(0,t.jsx)(s.p,{children:"Regular expressions are a powerful tool for working with strings and text data in JavaScript. They are widely used in web development for tasks such as form validation, data extraction, and text processing."}),(0,t.jsx)(s.p,{children:"Regular expressions are a complex topic, and there are many advanced features and techniques that you can learn to become proficient in using regular expressions in JavaScript."}),(0,t.jsx)(s.p,{children:"In this tutorial, we have covered the basics of regular expressions in JavaScript and how to create and use regular expressions to match, search, replace, and split strings. We have also covered regular expression patterns, flags, methods, and properties."}),(0,t.jsxs)(s.p,{children:["You can learn more about regular expressions by reading the ",(0,t.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions",children:"MDN Web Docs"})," and practicing with regular expressions in your own projects."]})]}),"\n",(0,t.jsx)(s.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(s.p,{children:"In this tutorial, you learned about regular expressions in JavaScript and how to create and use regular expressions to match, search, replace, and split strings. You also learned about regular expression patterns, flags, methods, and properties. Regular expressions are a powerful tool for working with strings and text data in JavaScript, and they are widely used in web development for tasks such as form validation, data extraction, and text processing. Regular expressions are a complex topic, and there are many advanced features and techniques that you can learn to become proficient in using regular expressions in JavaScript."})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>c});var r=n(96540);const t={},a=r.createContext(t);function i(e){const s=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(a.Provider,{value:s},e.children)}}}]);