"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[12074],{80341:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>u,frontMatter:()=>d,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"javascript/datatypes/primitive-data-types/undefined-in-javascript","title":"Undefined Data Types in JavaScript","description":"What is the undefined data type in JavaScript? Learn about the undefined data type and how to create undefined in JavaScript.","source":"@site/docs/javascript/datatypes/primitive-data-types/undefined-js.md","sourceDirName":"javascript/datatypes/primitive-data-types","slug":"/javascript/datatypes/primitive-data-types/undefined-in-javascript","permalink":"/docs/javascript/datatypes/primitive-data-types/undefined-in-javascript","draft":false,"unlisted":false,"editUrl":"https://github.com/Ajay-Dhangar/ajay-dhangar.github.io/edit/main/docs/javascript/datatypes/primitive-data-types/undefined-js.md","tags":[{"inline":true,"label":"JavaScript","permalink":"/docs/tags/java-script"},{"inline":true,"label":"Data Types","permalink":"/docs/tags/data-types"},{"inline":true,"label":"Primitive Data Types","permalink":"/docs/tags/primitive-data-types"},{"inline":true,"label":"Undefined","permalink":"/docs/tags/undefined"}],"version":"current","lastUpdatedBy":"ajay-dhangar","lastUpdatedAt":1709047234000,"sidebarPosition":4,"frontMatter":{"id":"undefined-in-javascript","title":"Undefined Data Types in JavaScript","sidebar_label":"Undefined","sidebar_position":4,"tags":["JavaScript","Data Types","Primitive Data Types","Undefined"],"description":"What is the undefined data type in JavaScript? Learn about the undefined data type and how to create undefined in JavaScript."},"sidebar":"tutorialSidebar","previous":{"title":"Boolean","permalink":"/docs/javascript/datatypes/primitive-data-types/boolean-in-javascript"},"next":{"title":"Null","permalink":"/docs/javascript/datatypes/primitive-data-types/null-in-javascript"}}');var t=a(74848),s=a(28453);const d={id:"undefined-in-javascript",title:"Undefined Data Types in JavaScript",sidebar_label:"Undefined",sidebar_position:4,tags:["JavaScript","Data Types","Primitive Data Types","Undefined"],description:"What is the undefined data type in JavaScript? Learn about the undefined data type and how to create undefined in JavaScript."},l=void 0,r={},o=[{value:"What is Undefined in JavaScript?",id:"what-is-undefined-in-javascript",level:2},{value:"How to Create Undefined in JavaScript?",id:"how-to-create-undefined-in-javascript",level:2},{value:"Checking for Undefined in JavaScript",id:"checking-for-undefined-in-javascript",level:2},{value:"Using the <code>typeof</code> Operator",id:"using-the-typeof-operator",level:3},{value:"Comparing to <code>undefined</code>",id:"comparing-to-undefined",level:3},{value:"Undefined vs. Null",id:"undefined-vs-null",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"undefined"})," is a primitive data type in JavaScript. It represents an undefined value. If a variable has been declared, but has not been assigned a value, it is of type ",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,t.jsx)(n.mermaid,{value:"flowchart TD\n    subgraph Undefined Data Types\n        Undefined --\x3e|Represents the absence of a value| UndefinedValue\n    end\n\n    classDef undefinedClass fill:#f9f,stroke:#333,stroke-width:2px;\n    class UndefinedValue undefinedClass;\n\n    classDef highlight fill:#f9f,stroke:#333,stroke-width:2px,stroke-dasharray: 5, 5;\n    class UndefinedValue highlight;\n\n    classDef visibleClass fill:#fff,stroke:#333,stroke-width:2px;\n    class UndefinedValue visibleClass;\n\n    classDef arrowClass fill:#f9f,stroke:#333,stroke-width:2px,stroke-dasharray: 5, 5;\n    class arrow arrowClass;\n\n    classDef hidden invisible;\n\n    class UndefinedValue,undefinedClass visibleClass;\n\n    UndefinedValue --\x3e|Initialize a variable without assigning a value| Value;\n    Value --\x3e|Use the variable without assigning a value| DisplayValue;\n    DisplayValue --\x3e|Displays 'undefined'| DisplayUndefined;\n    DisplayUndefined --\x3e|Output to the console or other output devices| OutputUndefined;\n"}),"\n",(0,t.jsx)(n.h2,{id:"what-is-undefined-in-javascript",children:"What is Undefined in JavaScript?"}),"\n",(0,t.jsxs)(n.p,{children:["In JavaScript, ",(0,t.jsx)(n.code,{children:"undefined"})," is a primitive data type that represents an undefined value. If a variable has been declared, but has not been assigned a value, it is of type ",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"how-to-create-undefined-in-javascript",children:"How to Create Undefined in JavaScript?"}),"\n",(0,t.jsxs)(n.p,{children:["You can create ",(0,t.jsx)(n.code,{children:"undefined"})," in JavaScript using the following syntax:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="Creating Undefined in JavaScript"',children:"let data;\n\nconsole.log(data); // Output: undefined\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In the above example, the variable ",(0,t.jsx)(n.code,{children:"data"})," is declared but not assigned a value. When you log the value of ",(0,t.jsx)(n.code,{children:"data"}),", it will output ",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"checking-for-undefined-in-javascript",children:"Checking for Undefined in JavaScript"}),"\n",(0,t.jsxs)(n.p,{children:["You can check if a variable is ",(0,t.jsx)(n.code,{children:"undefined"})," using the ",(0,t.jsx)(n.code,{children:"typeof"})," operator or by comparing the variable to ",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,t.jsxs)(n.h3,{id:"using-the-typeof-operator",children:["Using the ",(0,t.jsx)(n.code,{children:"typeof"})," Operator"]}),"\n",(0,t.jsxs)(n.p,{children:["You can use the ",(0,t.jsx)(n.code,{children:"typeof"})," operator to check if a variable is ",(0,t.jsx)(n.code,{children:"undefined"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="Using the typeof Operator to Check for Undefined"',children:"let data;\n\nconsole.log(typeof data === 'undefined'); // Output: true\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"comparing-to-undefined",children:["Comparing to ",(0,t.jsx)(n.code,{children:"undefined"})]}),"\n",(0,t.jsxs)(n.p,{children:["You can also compare a variable to ",(0,t.jsx)(n.code,{children:"undefined"})," to check if it is ",(0,t.jsx)(n.code,{children:"undefined"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="Comparing to Undefined to Check for Undefined"',children:"let data;\n\nconsole.log(data === undefined); // Output: true\n"})}),"\n",(0,t.jsx)(n.h2,{id:"undefined-vs-null",children:"Undefined vs. Null"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"undefined"})," and ",(0,t.jsx)(n.code,{children:"null"})," are both used to represent the absence of a value in JavaScript. However, they are not the same."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"undefined"})," is a primitive data type that represents an undefined value. If a variable has been declared, but has not been assigned a value, it is of type ",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"null"})," is an object that represents the absence of a value. It is often used to explicitly set a variable to have no value."]}),"\n",(0,t.jsxs)(n.admonition,{title:"\ud83d\udcdd Note",type:"info",children:[(0,t.jsxs)(n.p,{children:["In JavaScript, ",(0,t.jsx)(n.code,{children:"null"})," is of type ",(0,t.jsx)(n.code,{children:"object"}),". This is a bug in the language that has been kept for compatibility reasons."]}),(0,t.jsxs)(n.p,{children:["You can check if a variable is ",(0,t.jsx)(n.code,{children:"null"})," using the ",(0,t.jsx)(n.code,{children:"typeof"})," operator or by comparing the variable to ",(0,t.jsx)(n.code,{children:"null"}),"."]}),(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["1. Difference bitween ",(0,t.jsx)(n.code,{children:"undefined"})," and ",(0,t.jsx)(n.code,{children:"null"})]})}),(0,t.jsx)(n.mermaid,{value:"flowchart TD\n    subgraph Undefined vs. Null\n        Undefined --\x3e|Represents the absence of a value| UndefinedValue\n        Null --\x3e|Represents the absence of a value| NullValue\n    end\n\n    classDef undefinedClass fill:#f9f,stroke:#333,stroke-width:2px;\n    class UndefinedValue undefinedClass;\n\n    classDef nullClass fill:#f9f,stroke:#333,stroke-width:2px;\n    class NullValue nullClass;\n\n    classDef highlight fill:#f9f,stroke:#333,stroke-width:2px,stroke-dasharray: 5, 5;\n    class UndefinedValue highlight;\n    class NullValue highlight;\n\n    classDef visibleClass fill:#fff,stroke:#333,stroke-width:2px;\n    class UndefinedValue,NullValue visibleClass;\n\n    classDef arrowClass fill:#f9f,stroke:#333,stroke-width:2px,stroke-dasharray: 5, 5;\n    class arrow arrowClass;\n\n    classDef hidden invisible;\n\n    class UndefinedValue,undefinedClass visibleClass;\n    class NullValue,nullClass visibleClass;\n\n    UndefinedValue --\x3e|Initialize a variable without assigning a value| Value;\n    Value --\x3e|Use the variable without assigning a value| DisplayValue;\n    DisplayValue --\x3e|Displays 'undefined'| DisplayUndefined;\n    DisplayUndefined --\x3e|Output to the console or other output devices| OutputUndefined;\n\n    NullValue --\x3e|Initialize a variable with a null value| Value;\n    Value --\x3e|Use the variable with a null value| DisplayValue;\n    DisplayValue --\x3e|Displays 'null'| DisplayNull;\n    DisplayNull --\x3e|Output to the console or other output devices| OutputNull;"})]}),"\n",(0,t.jsxs)(n.admonition,{title:"tips and tricks",type:"tip",children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Why use undefined?"})}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"undefined"})," is used to represent the absence of a value. It is often used to check if a variable has been assigned a value or not. For example, you can use ",(0,t.jsx)(n.code,{children:"undefined"})," to check if a function argument has been passed or not."]}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"What means undefined?"})}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"undefined"})," means that a variable has been declared, but has not been assigned a value. It is a primitive data type that represents an undefined value."]}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Why JavaScript has undefined?"})}),(0,t.jsxs)(n.p,{children:["JavaScript has ",(0,t.jsx)(n.code,{children:"undefined"})," to represent the absence of a value. It is often used to check if a variable has been assigned a value or not."]}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Assume that a variable is undefined?"})}),(0,t.jsxs)(n.p,{children:["If a variable is ",(0,t.jsx)(n.code,{children:"undefined"}),", it means that it has been declared, but has not been assigned a value. You can check if a variable is ",(0,t.jsx)(n.code,{children:"undefined"})," using the ",(0,t.jsx)(n.code,{children:"typeof"})," operator or by comparing the variable to ",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"How to play with undefined?"})}),(0,t.jsxs)(n.p,{children:["You can create ",(0,t.jsx)(n.code,{children:"undefined"})," in JavaScript by declaring a variable without assigning a value to it. You can check if a variable is ",(0,t.jsx)(n.code,{children:"undefined"})," using the ",(0,t.jsx)(n.code,{children:"typeof"})," operator or by comparing the variable to ",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),(0,t.jsx)(n.p,{children:"for example:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="Creating Undefined in JavaScript"',children:"let data;\n\nconsole.log(data); // Output: undefined\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="Using the typeof Operator to Check for Undefined"',children:"let data;\n\nconsole.log(typeof data === 'undefined'); // Output: true\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="Comparing to Undefined to Check for Undefined"',children:"let data;\n\nconsole.log(data === undefined); // Output: true\n"})})]}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsxs)(n.p,{children:["In JavaScript, ",(0,t.jsx)(n.code,{children:"undefined"})," is a primitive data type that represents an undefined value. If a variable has been declared, but has not been assigned a value, it is of type ",(0,t.jsx)(n.code,{children:"undefined"}),". You can create ",(0,t.jsx)(n.code,{children:"undefined"})," in JavaScript by declaring a variable without assigning a value to it. You can check if a variable is ",(0,t.jsx)(n.code,{children:"undefined"})," using the ",(0,t.jsx)(n.code,{children:"typeof"})," operator or by comparing the variable to ",(0,t.jsx)(n.code,{children:"undefined"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>d,x:()=>l});var i=a(96540);const t={},s=i.createContext(t);function d(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);