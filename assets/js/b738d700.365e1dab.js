"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[83252],{18886:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"javascript/const-in-javascript","title":"Const Keyword in JavaScript","description":"What is the const keyword in JavaScript and how to use it.","source":"@site/docs/javascript/const-js.md","sourceDirName":"javascript","slug":"/javascript/const-in-javascript","permalink":"/docs/javascript/const-in-javascript","draft":false,"unlisted":false,"editUrl":"https://github.com/Ajay-Dhangar/ajay-dhangar.github.io/edit/main/docs/javascript/const-js.md","tags":[{"inline":true,"label":"JavaScript","permalink":"/docs/tags/java-script"},{"inline":true,"label":"const","permalink":"/docs/tags/const"},{"inline":true,"label":"ES6","permalink":"/docs/tags/es-6"},{"inline":true,"label":"Variables","permalink":"/docs/tags/variables"},{"inline":true,"label":"Block Scope","permalink":"/docs/tags/block-scope"},{"inline":true,"label":"Hoisting","permalink":"/docs/tags/hoisting"},{"inline":true,"label":"Redeclaration","permalink":"/docs/tags/redeclaration"},{"inline":true,"label":"Best Practices","permalink":"/docs/tags/best-practices"},{"inline":true,"label":"Comparison","permalink":"/docs/tags/comparison"},{"inline":true,"label":"let","permalink":"/docs/tags/let"},{"inline":true,"label":"var","permalink":"/docs/tags/var"},{"inline":true,"label":"Constants","permalink":"/docs/tags/constants"},{"inline":true,"label":"ECMAScript 6","permalink":"/docs/tags/ecma-script-6"},{"inline":true,"label":"ES6","permalink":"/docs/tags/es-6"},{"inline":true,"label":"ES2015","permalink":"/docs/tags/es-2015"},{"inline":true,"label":"Syntax","permalink":"/docs/tags/syntax"},{"inline":true,"label":"Example","permalink":"/docs/tags/example"},{"inline":true,"label":"Block Scope","permalink":"/docs/tags/block-scope"},{"inline":true,"label":"Reassignment","permalink":"/docs/tags/reassignment"},{"inline":true,"label":"Best Practices","permalink":"/docs/tags/best-practices"},{"inline":true,"label":"Comparison with let","permalink":"/docs/tags/comparison-with-let"},{"inline":true,"label":"Comparison with var","permalink":"/docs/tags/comparison-with-var"},{"inline":true,"label":"Hoisting","permalink":"/docs/tags/hoisting"},{"inline":true,"label":"Summary","permalink":"/docs/tags/summary"}],"version":"current","lastUpdatedBy":"ajay-dhangar","lastUpdatedAt":1708763135000,"sidebarPosition":9,"frontMatter":{"id":"const-in-javascript","title":"Const Keyword in JavaScript","sidebar_label":"Const Keyword","sidebar_position":9,"tags":["JavaScript","const","ES6","Variables","Block Scope","Hoisting","Redeclaration","Best Practices","Comparison","let","var","Constants","ECMAScript 6","ES6","ES2015","Syntax","Example","Block Scope","Reassignment","Best Practices","Comparison with let","Comparison with var","Hoisting","Summary"],"description":"What is the const keyword in JavaScript and how to use it."},"sidebar":"tutorialSidebar","previous":{"title":"Let Keyword","permalink":"/docs/javascript/let-in-javascript"},"next":{"title":"Operators in JavaScript","permalink":"/docs/category/operators-in-javascript"}}');var i=s(74848),a=s(28453);const r={id:"const-in-javascript",title:"Const Keyword in JavaScript",sidebar_label:"Const Keyword",sidebar_position:9,tags:["JavaScript","const","ES6","Variables","Block Scope","Hoisting","Redeclaration","Best Practices","Comparison","let","var","Constants","ECMAScript 6","ES6","ES2015","Syntax","Example","Block Scope","Reassignment","Best Practices","Comparison with let","Comparison with var","Hoisting","Summary"],description:"What is the const keyword in JavaScript and how to use it."},o=void 0,c={},l=[{value:"Syntax",id:"syntax",level:2},{value:"Example",id:"example",level:2},{value:"Block Scope",id:"block-scope",level:2},{value:"Reassignment",id:"reassignment",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Comparison with let",id:"comparison-with-let",level:2},{value:"Comparison with var",id:"comparison-with-var",level:2},{value:"Block Scope",id:"block-scope-1",level:3},{value:"Redeclaration",id:"redeclaration",level:3},{value:"Hoisting",id:"hoisting",level:3},{value:"Summary",id:"summary",level:2}];function d(e){const n={admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"const"})," keyword is used to declare a block-scoped variable that cannot be reassigned. It was introduced in ",(0,i.jsx)("mark",{children:"ECMAScript 6 (ES6)"})," and is the preferred way to declare constants in modern JavaScript."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"ES6 (ECMAScript 2015) is a major update to JavaScript that adds new syntax and features to the language. It was officially released in June 2015."})})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:["The syntax to declare a constant using the ",(0,i.jsx)(n.code,{children:"const"})," keyword is:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="Syntax"',children:"const variableName = value;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Here, ",(0,i.jsx)(n.code,{children:"variableName"})," is the name of the constant and ",(0,i.jsx)(n.code,{children:"value"})," is the value assigned to the constant."]}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(n.p,{children:["Let's see an example to understand how to use the ",(0,i.jsx)(n.code,{children:"const"})," keyword in JavaScript:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="Example"',children:"const PI = 3.14159;\nconsole.log(PI); // Output: 3.14159\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, we have declared a constant ",(0,i.jsx)(n.code,{children:"PI"})," using the ",(0,i.jsx)(n.code,{children:"const"})," keyword and assigned it a value ",(0,i.jsx)(n.code,{children:"3.14159"}),". We then printed the value of the constant using ",(0,i.jsx)(n.code,{children:"console.log()"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"block-scope",children:"Block Scope"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"const"})," keyword is block-scoped, which means that the constant declared using ",(0,i.jsx)(n.code,{children:"const"})," is only available within the block in which it is defined."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="Block Scope"',children:"{\n  const x = 10;\n  console.log(x); // Output: 10\n}\n\nconsole.log(x); // Uncaught ReferenceError: x is not defined\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the constant ",(0,i.jsx)(n.code,{children:"x"})," is only available within the block in which it is defined. If we try to access it outside the block, it will result in a ",(0,i.jsx)(n.code,{children:"ReferenceError"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"reassignment",children:"Reassignment"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"const"})," keyword does not allow reassignment of the same constant once it has been initialized."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="Reassignment"',children:"const x = 10;\nx = 20; // Uncaught TypeError: Assignment to constant variable.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, we are trying to reassign the value of the constant ",(0,i.jsx)(n.code,{children:"x"}),", which results in a ",(0,i.jsx)(n.code,{children:"TypeError"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use the ",(0,i.jsx)(n.code,{children:"const"})," keyword for values that are not intended to be reassigned."]}),"\n",(0,i.jsx)(n.li,{children:"Use descriptive variable names to improve code readability."}),"\n",(0,i.jsxs)(n.li,{children:["Use uppercase letters and underscores to name constants (e.g., ",(0,i.jsx)(n.code,{children:"MAX_LENGTH"}),", ",(0,i.jsx)(n.code,{children:"PI"}),", ",(0,i.jsx)(n.code,{children:"TAX_RATE"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["Avoid using ",(0,i.jsx)(n.code,{children:"const"})," for complex objects or arrays, as it only prevents reassignment of the variable itself, not its properties or elements."]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"let"})," or ",(0,i.jsx)(n.code,{children:"var"})," for values that need to be reassigned."]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"const"})," for values that are known at compile time and are not expected to change."]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"const"})," for function expressions, arrow functions, and classes to prevent accidental reassignment."]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"const"})," for values that are shared across multiple files or modules."]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"const"})," for values that are used as configuration settings or constants in your application."]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"const"})," for values that are used as default parameters in functions."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"comparison-with-let",children:"Comparison with let"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"const"})," keyword is similar to the ",(0,i.jsx)(n.code,{children:"let"})," keyword in that it is block-scoped and cannot be hoisted. However, the main difference is that a variable declared using ",(0,i.jsx)(n.code,{children:"const"})," cannot be reassigned, whereas a variable declared using ",(0,i.jsx)(n.code,{children:"let"})," can be reassigned."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="Comparison with let"',children:"const x = 10;\nx = 20; // Uncaught TypeError: Assignment to constant variable\n\nlet y = 10;\ny = 20; // No error\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, we are trying to reassign the value of the constant ",(0,i.jsx)(n.code,{children:"x"}),", which results in a ",(0,i.jsx)(n.code,{children:"TypeError"}),". However, we can reassign the value of the variable ",(0,i.jsx)(n.code,{children:"y"})," without any error."]}),"\n",(0,i.jsx)(n.h2,{id:"comparison-with-var",children:"Comparison with var"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"const"})," keyword differs from the ",(0,i.jsx)(n.code,{children:"var"})," keyword in terms of block scope, reassignment, and hoisting."]}),"\n",(0,i.jsx)(n.h3,{id:"block-scope-1",children:"Block Scope"}),"\n",(0,i.jsxs)(n.p,{children:["Variables declared using the ",(0,i.jsx)(n.code,{children:"var"})," keyword are function-scoped or globally-scoped, whereas variables declared using the ",(0,i.jsx)(n.code,{children:"const"})," keyword are block-scoped."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="Block Scope"',children:"// var\nfunction varExample() {\n  if (true) {\n    var x = 10;\n  }\n  console.log(x); // Output: 10\n}\n\n// const\n\n{\n  const y = 10;\n  console.log(y); // Output: 10\n}\n\nconsole.log(y); // Uncaught ReferenceError: y is not defined\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the variable ",(0,i.jsx)(n.code,{children:"x"})," declared using the ",(0,i.jsx)(n.code,{children:"var"})," keyword is available outside the block in which it is defined, whereas the constant ",(0,i.jsx)(n.code,{children:"y"})," declared using the ",(0,i.jsx)(n.code,{children:"const"})," keyword is not available outside the block."]}),"\n",(0,i.jsx)(n.h3,{id:"redeclaration",children:"Redeclaration"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"var"})," keyword allows redeclaration of the same variable within the same block scope, whereas the ",(0,i.jsx)(n.code,{children:"const"})," keyword does not allow redeclaration of the same constant within the same block scope."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="Redeclaration"',children:"var x = 10;\nvar x = 20; // No error\n\nconst y = 10;\nconst y = 20; // Uncaught SyntaxError: Identifier 'y' has already been declared\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, we are trying to redeclare the variable ",(0,i.jsx)(n.code,{children:"x"})," using the ",(0,i.jsx)(n.code,{children:"var"})," keyword, which does not result in an error. However, we are trying to redeclare the constant ",(0,i.jsx)(n.code,{children:"y"})," using the ",(0,i.jsx)(n.code,{children:"const"})," keyword, which results in a ",(0,i.jsx)(n.code,{children:"SyntaxError"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"hoisting",children:"Hoisting"}),"\n",(0,i.jsxs)(n.p,{children:["Variables declared using the ",(0,i.jsx)(n.code,{children:"var"})," keyword are hoisted to the top of their function or global scope, whereas variables declared using the ",(0,i.jsx)(n.code,{children:"const"})," keyword are not hoisted."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="Hoisting"',children:"console.log(x); // Output: undefined\nvar x = 10;\n\nconsole.log(y); // Uncaught ReferenceError: y is not defined\nconst y = 10;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the variable ",(0,i.jsx)(n.code,{children:"x"})," declared using the ",(0,i.jsx)(n.code,{children:"var"})," keyword is hoisted to the top of the global scope, whereas the constant ",(0,i.jsx)(n.code,{children:"y"})," declared using the ",(0,i.jsx)(n.code,{children:"const"})," keyword is not hoisted."]}),"\n",(0,i.jsx)(n.admonition,{title:"\ud83d\udcdd Note",type:"info",children:(0,i.jsxs)(n.p,{children:["It is recommended to use the ",(0,i.jsx)(n.code,{children:"const"})," keyword for values that are not intended to be reassigned and are known at compile time. This helps prevent accidental reassignment and improves code readability."]})}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsxs)(n.p,{children:["Constants are block-scoped variables that cannot be reassigned once they are initialized. The ",(0,i.jsx)(n.code,{children:"const"})," keyword is used to declare constants in JavaScript and is the preferred way to declare constants in modern JavaScript. It is similar to the ",(0,i.jsx)(n.code,{children:"let"})," keyword in terms of block scope and hoisting, but it differs in that it does not allow reassignment. It also differs from the ",(0,i.jsx)(n.code,{children:"var"})," keyword in terms of block scope, redeclaration, and hoisting. It is recommended to use the ",(0,i.jsx)(n.code,{children:"const"})," keyword for values that are not intended to be reassigned and are known at compile time."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(96540);const i={},a=t.createContext(i);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);