"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[93914],{40514:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>a,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"javascript/this-keyword-in-javascript","title":"this Keyword in JavaScript","description":"In this tutorial, we will learn about the `this` keyword in JavaScript. The `this` keyword refers to the object on which a function is being invoked. The value of `this` depends on how a function is called. We will see how `this` works in different contexts such as functions, methods, constructors, arrow functions, event handlers, callbacks, nested functions, global scope, strict mode, modules, classes, prototypes, async functions, promises, generators, iterators, destructuring, spread operator, rest parameters, default parameters, computed properties, dynamic properties, getters, setters, static methods, private methods, public methods, protected methods, instance methods, static properties, private properties, public properties, protected properties, instance properties, static accessors, private accessors, etc.","source":"@site/docs/javascript/this-keyword.md","sourceDirName":"javascript","slug":"/javascript/this-keyword-in-javascript","permalink":"/docs/javascript/this-keyword-in-javascript","draft":false,"unlisted":false,"editUrl":"https://github.com/Ajay-Dhangar/ajay-dhangar.github.io/edit/main/docs/javascript/this-keyword.md","tags":[{"inline":true,"label":"JavaScript","permalink":"/docs/tags/java-script"},{"inline":true,"label":"this","permalink":"/docs/tags/this"},{"inline":true,"label":"this keyword","permalink":"/docs/tags/this-keyword"},{"inline":true,"label":"this binding","permalink":"/docs/tags/this-binding"},{"inline":true,"label":"this value","permalink":"/docs/tags/this-value"},{"inline":true,"label":"this context","permalink":"/docs/tags/this-context"},{"inline":true,"label":"this in functions","permalink":"/docs/tags/this-in-functions"},{"inline":true,"label":"this in methods","permalink":"/docs/tags/this-in-methods"},{"inline":true,"label":"this in constructors","permalink":"/docs/tags/this-in-constructors"},{"inline":true,"label":"this in arrow functions","permalink":"/docs/tags/this-in-arrow-functions"},{"inline":true,"label":"this in event handlers","permalink":"/docs/tags/this-in-event-handlers"},{"inline":true,"label":"this in callbacks","permalink":"/docs/tags/this-in-callbacks"},{"inline":true,"label":"this in nested functions","permalink":"/docs/tags/this-in-nested-functions"},{"inline":true,"label":"this in global scope","permalink":"/docs/tags/this-in-global-scope"},{"inline":true,"label":"this in strict mode","permalink":"/docs/tags/this-in-strict-mode"},{"inline":true,"label":"this in modules","permalink":"/docs/tags/this-in-modules"},{"inline":true,"label":"this in classes","permalink":"/docs/tags/this-in-classes"},{"inline":true,"label":"this in prototypes","permalink":"/docs/tags/this-in-prototypes"},{"inline":true,"label":"this in async functions","permalink":"/docs/tags/this-in-async-functions"},{"inline":true,"label":"this in promises","permalink":"/docs/tags/this-in-promises"},{"inline":true,"label":"this in generators","permalink":"/docs/tags/this-in-generators"},{"inline":true,"label":"this in iterators","permalink":"/docs/tags/this-in-iterators"},{"inline":true,"label":"this in destructuring","permalink":"/docs/tags/this-in-destructuring"},{"inline":true,"label":"this in spread operator","permalink":"/docs/tags/this-in-spread-operator"},{"inline":true,"label":"this in rest parameters","permalink":"/docs/tags/this-in-rest-parameters"},{"inline":true,"label":"this in default parameters","permalink":"/docs/tags/this-in-default-parameters"},{"inline":true,"label":"this in computed properties","permalink":"/docs/tags/this-in-computed-properties"},{"inline":true,"label":"this in dynamic properties","permalink":"/docs/tags/this-in-dynamic-properties"},{"inline":true,"label":"this in getters","permalink":"/docs/tags/this-in-getters"},{"inline":true,"label":"this in setters","permalink":"/docs/tags/this-in-setters"},{"inline":true,"label":"this in static methods","permalink":"/docs/tags/this-in-static-methods"},{"inline":true,"label":"this in private methods","permalink":"/docs/tags/this-in-private-methods"},{"inline":true,"label":"this in public methods","permalink":"/docs/tags/this-in-public-methods"},{"inline":true,"label":"this in protected methods","permalink":"/docs/tags/this-in-protected-methods"},{"inline":true,"label":"this in instance methods","permalink":"/docs/tags/this-in-instance-methods"},{"inline":true,"label":"this in static properties","permalink":"/docs/tags/this-in-static-properties"},{"inline":true,"label":"this in private properties","permalink":"/docs/tags/this-in-private-properties"},{"inline":true,"label":"this in public properties","permalink":"/docs/tags/this-in-public-properties"},{"inline":true,"label":"this in protected properties","permalink":"/docs/tags/this-in-protected-properties"},{"inline":true,"label":"this in instance properties","permalink":"/docs/tags/this-in-instance-properties"},{"inline":true,"label":"this in static accessors","permalink":"/docs/tags/this-in-static-accessors"},{"inline":true,"label":"this in private accessors","permalink":"/docs/tags/this-in-private-accessors"}],"version":"current","lastUpdatedBy":"ajay-dhangar","lastUpdatedAt":1711152967000,"sidebarPosition":34,"frontMatter":{"id":"this-keyword-in-javascript","title":"this Keyword in JavaScript","sidebar_label":"this Keyword","sidebar_position":34,"tags":["JavaScript","this","this keyword","this binding","this value","this context","this in functions","this in methods","this in constructors","this in arrow functions","this in event handlers","this in callbacks","this in nested functions","this in global scope","this in strict mode","this in modules","this in classes","this in prototypes","this in async functions","this in promises","this in generators","this in iterators","this in destructuring","this in spread operator","this in rest parameters","this in default parameters","this in computed properties","this in dynamic properties","this in getters","this in setters","this in static methods","this in private methods","this in public methods","this in protected methods","this in instance methods","this in static properties","this in private properties","this in public properties","this in protected properties","this in instance properties","this in static accessors","this in private accessors"],"description":"In this tutorial, we will learn about the `this` keyword in JavaScript. The `this` keyword refers to the object on which a function is being invoked. The value of `this` depends on how a function is called. We will see how `this` works in different contexts such as functions, methods, constructors, arrow functions, event handlers, callbacks, nested functions, global scope, strict mode, modules, classes, prototypes, async functions, promises, generators, iterators, destructuring, spread operator, rest parameters, default parameters, computed properties, dynamic properties, getters, setters, static methods, private methods, public methods, protected methods, instance methods, static properties, private properties, public properties, protected properties, instance properties, static accessors, private accessors, etc."},"sidebar":"tutorialSidebar","previous":{"title":"Strict Mode","permalink":"/docs/javascript/strict-mode-in-javascript"},"next":{"title":"Arrow Function","permalink":"/docs/javascript/arrow-function-in-js"}}');var i=s(74848),r=s(28453);const o={id:"this-keyword-in-javascript",title:"this Keyword in JavaScript",sidebar_label:"this Keyword",sidebar_position:34,tags:["JavaScript","this","this keyword","this binding","this value","this context","this in functions","this in methods","this in constructors","this in arrow functions","this in event handlers","this in callbacks","this in nested functions","this in global scope","this in strict mode","this in modules","this in classes","this in prototypes","this in async functions","this in promises","this in generators","this in iterators","this in destructuring","this in spread operator","this in rest parameters","this in default parameters","this in computed properties","this in dynamic properties","this in getters","this in setters","this in static methods","this in private methods","this in public methods","this in protected methods","this in instance methods","this in static properties","this in private properties","this in public properties","this in protected properties","this in instance properties","this in static accessors","this in private accessors"],description:"In this tutorial, we will learn about the `this` keyword in JavaScript. The `this` keyword refers to the object on which a function is being invoked. The value of `this` depends on how a function is called. We will see how `this` works in different contexts such as functions, methods, constructors, arrow functions, event handlers, callbacks, nested functions, global scope, strict mode, modules, classes, prototypes, async functions, promises, generators, iterators, destructuring, spread operator, rest parameters, default parameters, computed properties, dynamic properties, getters, setters, static methods, private methods, public methods, protected methods, instance methods, static properties, private properties, public properties, protected properties, instance properties, static accessors, private accessors, etc."},c=void 0,h={},l=[{value:"<code>this</code> in Functions",id:"this-in-functions",level:2},{value:"<code>this</code> in Methods",id:"this-in-methods",level:2},{value:"<code>this</code> in Constructors",id:"this-in-constructors",level:2},{value:"<code>this</code> in Arrow Functions",id:"this-in-arrow-functions",level:2},{value:"<code>this</code> in Event Handlers",id:"this-in-event-handlers",level:2},{value:"<code>this</code> in Callbacks",id:"this-in-callbacks",level:2},{value:"<code>this</code> in Nested Functions",id:"this-in-nested-functions",level:2},{value:"<code>this</code> in Global Scope",id:"this-in-global-scope",level:2},{value:"<code>this</code> in Strict Mode",id:"this-in-strict-mode",level:2},{value:"<code>this</code> in Modules",id:"this-in-modules",level:2},{value:"<code>this</code> in Classes",id:"this-in-classes",level:2},{value:"<code>this</code> in Prototypes",id:"this-in-prototypes",level:2},{value:"<code>this</code> in Async Functions",id:"this-in-async-functions",level:2},{value:"<code>this</code> in Promises",id:"this-in-promises",level:2},{value:"<code>this</code> in Generators",id:"this-in-generators",level:2},{value:"<code>this</code> in Iterators",id:"this-in-iterators",level:2},{value:"<code>this</code> in Destructuring",id:"this-in-destructuring",level:2},{value:"<code>this</code> in Spread Operator",id:"this-in-spread-operator",level:2},{value:"<code>this</code> in Rest Parameters",id:"this-in-rest-parameters",level:2},{value:"<code>this</code> in Default Parameters",id:"this-in-default-parameters",level:2},{value:"<code>this</code> in Computed Properties",id:"this-in-computed-properties",level:2},{value:"<code>this</code> in Dynamic Properties",id:"this-in-dynamic-properties",level:2},{value:"<code>this</code> in Getters",id:"this-in-getters",level:2},{value:"<code>this</code> in Setters",id:"this-in-setters",level:2},{value:"<code>this</code> in Static Methods",id:"this-in-static-methods",level:2},{value:"<code>this</code> in Private Methods",id:"this-in-private-methods",level:2},{value:"<code>this</code> in Public Methods",id:"this-in-public-methods",level:2},{value:"<code>this</code> in Protected Methods",id:"this-in-protected-methods",level:2},{value:"<code>this</code> in Instance Methods",id:"this-in-instance-methods",level:2},{value:"<code>this</code> in Static Properties",id:"this-in-static-properties",level:2},{value:"<code>this</code> in Private Properties",id:"this-in-private-properties",level:2},{value:"<code>this</code> in Public Properties",id:"this-in-public-properties",level:2},{value:"<code>this</code> in Protected Properties",id:"this-in-protected-properties",level:2},{value:"<code>this</code> in Static Accessors",id:"this-in-static-accessors",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components},{BrowserWindow:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("BrowserWindow",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword refers to the object on which a function is being invoked. The value of ",(0,i.jsx)(n.code,{children:"this"})," depends on how a function is called. The ",(0,i.jsx)(n.code,{children:"this"})," keyword allows you to access the object's properties and methods from within the function."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"this"})," keyword is a special keyword in JavaScript that is used to refer to the object on which a function is being invoked. The value of ",(0,i.jsx)(n.code,{children:"this"})," is determined by how a function is called, not where it is defined. The ",(0,i.jsx)(n.code,{children:"this"})," keyword allows you to access the object's properties and methods from within the function."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"this"})," keyword can be used in different contexts such as functions, methods, constructors, arrow functions, event handlers, callbacks, nested functions, global scope, strict mode, modules, classes, prototypes, async functions, promises, generators, iterators, destructuring, spread operator, rest parameters, default parameters, computed properties, dynamic properties, getters, setters, static methods, private methods, public methods, protected methods, instance methods, static properties, private properties, public properties, protected properties, instance properties, static accessors, private accessors, etc."]}),"\n",(0,i.jsxs)(n.p,{children:["In this tutorial, we will learn how the ",(0,i.jsx)(n.code,{children:"this"})," keyword works in different contexts in JavaScript."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-functions",children:[(0,i.jsx)(n.code,{children:"this"})," in Functions"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a function refers to the global object (",(0,i.jsx)(n.code,{children:"window"})," in browsers, ",(0,i.jsx)(n.code,{children:"global"})," in Node.js) when the function is called in the global scope."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:"function greet() {\n    console.log(this); // Output: Window {...} (in browsers)\n}\n\ngreet();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the ",(0,i.jsx)(n.code,{children:"greet"})," function refers to the global object (",(0,i.jsx)(n.code,{children:"Window"})," in browsers) because the ",(0,i.jsx)(n.code,{children:"greet"})," function is called in the global scope."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-methods",children:[(0,i.jsx)(n.code,{children:"this"})," in Methods"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a method refers to the object on which the method is being invoked."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'const person = {\n    name: "Alice",\n    greet() {\n        console.log(this.name); // Output: Alice\n    }\n};\n\nperson.greet();\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the ",(0,i.jsx)(n.code,{children:"greet"})," method of the ",(0,i.jsx)(n.code,{children:"person"})," object refers to the ",(0,i.jsx)(n.code,{children:"person"})," object because the ",(0,i.jsx)(n.code,{children:"greet"})," method is called on the ",(0,i.jsx)(n.code,{children:"person"})," object."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-constructors",children:[(0,i.jsx)(n.code,{children:"this"})," in Constructors"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a constructor refers to the object being created by the constructor."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'function Person(name) {\n    this.name = name;\n    this.greet = function() {\n        console.log("Hello, " + this.name);\n    };\n}\n\nconst person = new Person("Alice");\nperson.greet(); // Output: Hello, Alice\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the ",(0,i.jsx)(n.code,{children:"Person"})," constructor refers to the object being created by the constructor. The ",(0,i.jsx)(n.code,{children:"this.name"})," property of the object is set to the ",(0,i.jsx)(n.code,{children:"name"})," argument passed to the constructor."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-arrow-functions",children:[(0,i.jsx)(n.code,{children:"this"})," in Arrow Functions"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in an arrow function refers to the ",(0,i.jsx)(n.code,{children:"this"})," value of the enclosing lexical context. Arrow functions do not have their own ",(0,i.jsx)(n.code,{children:"this"})," value. Instead, they inherit the ",(0,i.jsx)(n.code,{children:"this"})," value from the surrounding code."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'const person = {\n    name: "Alice",\n    greet: function() {\n        const greetArrow = () => {\n            console.log(this.name); // Output: Alice\n        };\n\n        greetArrow();\n    }\n};\n\nperson.greet();\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the arrow function ",(0,i.jsx)(n.code,{children:"greetArrow"})," refers to the ",(0,i.jsx)(n.code,{children:"this"})," value of the ",(0,i.jsx)(n.code,{children:"greet"})," method of the ",(0,i.jsx)(n.code,{children:"person"})," object because the arrow function does not have its own ",(0,i.jsx)(n.code,{children:"this"})," value."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-event-handlers",children:[(0,i.jsx)(n.code,{children:"this"})," in Event Handlers"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in an event handler refers to the element that triggered the event."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",metastring:'title="index.html"',children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>Event Handler</title>\n</head>\n<body>\n    <button id="btn">Click Me</button>\n\n    <script>\n        const btn = document.getElementById("btn");\n\n        btn.addEventListener("click", function() {\n            alert(this.textContent); // Output: Click Me\n        });\n    <\/script>\n</body>\n</html>\n'})}),"\n",(0,i.jsx)(s,{children:(0,i.jsx)("button",{onClick:e=>{alert(e.target.textContent)},children:"Click Me"})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the event handler function refers to the ",(0,i.jsx)(n.code,{children:"button"})," element that triggered the ",(0,i.jsx)(n.code,{children:"click"})," event."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-callbacks",children:[(0,i.jsx)(n.code,{children:"this"})," in Callbacks"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a callback function refers to the global object (",(0,i.jsx)(n.code,{children:"window"})," in browsers, ",(0,i.jsx)(n.code,{children:"global"})," in Node.js) when the function is called in the global scope."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:"function greet(callback) {\n    callback();\n}\n\nfunction sayHello() {\n    console.log(this); // Output: Window {...} (in browsers)\n}\n\ngreet(sayHello);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the ",(0,i.jsx)(n.code,{children:"sayHello"})," callback function refers to the global object (",(0,i.jsx)(n.code,{children:"Window"})," in browsers) because the ",(0,i.jsx)(n.code,{children:"sayHello"})," function is called in the global scope."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-nested-functions",children:[(0,i.jsx)(n.code,{children:"this"})," in Nested Functions"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a nested function refers to the global object (",(0,i.jsx)(n.code,{children:"window"})," in browsers, ",(0,i.jsx)(n.code,{children:"global"})," in Node.js) when the function is called in the global scope."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:"function outer() {\n    function inner() {\n        console.log(this); // Output: Window {...} (in browsers)\n    }\n\n    inner();\n}\n\nouter();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the ",(0,i.jsx)(n.code,{children:"inner"})," nested function refers to the global object (",(0,i.jsx)(n.code,{children:"Window"})," in browsers) because the ",(0,i.jsx)(n.code,{children:"inner"})," function is called in the global scope."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-global-scope",children:[(0,i.jsx)(n.code,{children:"this"})," in Global Scope"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in the global scope refers to the global object (",(0,i.jsx)(n.code,{children:"window"})," in browsers, ",(0,i.jsx)(n.code,{children:"global"})," in Node.js)."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:"console.log(this); // Output: Window {...} (in browsers)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in the global scope refers to the global object (",(0,i.jsx)(n.code,{children:"Window"})," in browsers)."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-strict-mode",children:[(0,i.jsx)(n.code,{children:"this"})," in Strict Mode"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in the global scope refers to ",(0,i.jsx)(n.code,{children:"undefined"})," in strict mode."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'"use strict";\n\nconsole.log(this); // Output: undefined\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in the global scope refers to ",(0,i.jsx)(n.code,{children:"undefined"})," because the code is running in strict mode."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-modules",children:[(0,i.jsx)(n.code,{children:"this"})," in Modules"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a module refers to ",(0,i.jsx)(n.code,{children:"undefined"})," in strict mode."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:"console.log(this); // Output: undefined\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",metastring:'title="index.html"',children:'\n<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>Module</title>\n</head>\n<body>\n    <script type="module" src="app.js"><\/script>\n</body>\n</html>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in the module ",(0,i.jsx)(n.code,{children:"app.js"})," refers to ",(0,i.jsx)(n.code,{children:"undefined"})," because the code is running in strict mode."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-classes",children:[(0,i.jsx)(n.code,{children:"this"})," in Classes"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a class method refers to the object on which the method is being invoked."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'class Person {\n    constructor(name) {\n        this.name = name;\n    }\n\n    greet() {\n        console.log("Hello, " + this.name);\n    }\n}\n\nconst person = new Person("Alice");\n\nperson.greet(); // Output: Hello, Alice\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the ",(0,i.jsx)(n.code,{children:"greet"})," method of the ",(0,i.jsx)(n.code,{children:"Person"})," class refers to the ",(0,i.jsx)(n.code,{children:"person"})," object because the ",(0,i.jsx)(n.code,{children:"greet"})," method is called on the ",(0,i.jsx)(n.code,{children:"person"})," object."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-prototypes",children:[(0,i.jsx)(n.code,{children:"this"})," in Prototypes"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a prototype method refers to the object on which the method is being invoked."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'function Person(name) {\n    this.name = name;\n}\n\nPerson.prototype.greet = function() {\n    console.log("Hello, " + this.name);\n};\n\nconst person = new Person("Alice");\n\nperson.greet(); // Output: Hello, Alice\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the ",(0,i.jsx)(n.code,{children:"greet"})," prototype method of the ",(0,i.jsx)(n.code,{children:"Person"})," constructor refers to the ",(0,i.jsx)(n.code,{children:"person"})," object because the ",(0,i.jsx)(n.code,{children:"greet"})," method is called on the ",(0,i.jsx)(n.code,{children:"person"})," object."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-async-functions",children:[(0,i.jsx)(n.code,{children:"this"})," in Async Functions"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in an async function refers to the ",(0,i.jsx)(n.code,{children:"this"})," value of the enclosing lexical context. Async functions do not have their own ",(0,i.jsx)(n.code,{children:"this"})," value. Instead, they inherit the ",(0,i.jsx)(n.code,{children:"this"})," value from the surrounding code."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'const person = {\n    name: "Alice",\n    greet: async function() {\n        console.log(this.name); // Output: Alice\n    }\n};\n\nperson.greet();\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the async function ",(0,i.jsx)(n.code,{children:"greet"})," refers to the ",(0,i.jsx)(n.code,{children:"this"})," value of the ",(0,i.jsx)(n.code,{children:"person"})," object because async functions do not have their own ",(0,i.jsx)(n.code,{children:"this"})," value."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-promises",children:[(0,i.jsx)(n.code,{children:"this"})," in Promises"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a promise callback refers to the global object (",(0,i.jsx)(n.code,{children:"window"})," in browsers, ",(0,i.jsx)(n.code,{children:"global"})," in Node.js) when the function is called in the global scope."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'const person = {\n    name: "Alice",\n    greet: function() {\n        return new Promise((resolve, reject) => {\n            resolve(this.name);\n        });\n    }\n};\n\nperson.greet().then(name => {\n    console.log(name); // Output: Alice\n});\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the promise callback refers to the global object (",(0,i.jsx)(n.code,{children:"Window"})," in browsers) because the promise callback is called in the global scope."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-generators",children:[(0,i.jsx)(n.code,{children:"this"})," in Generators"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a generator function refers to the ",(0,i.jsx)(n.code,{children:"this"})," value of the enclosing lexical context. Generator functions do not have their own ",(0,i.jsx)(n.code,{children:"this"})," value. Instead, they inherit the ",(0,i.jsx)(n.code,{children:"this"})," value from the surrounding code."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'const person = {\n    name: "Alice",\n    *greet() {\n        console.log(this.name); // Output: Alice\n    }\n};\n\nconst generator = person.greet();\n\ngenerator.next();\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the generator function ",(0,i.jsx)(n.code,{children:"greet"})," refers to the ",(0,i.jsx)(n.code,{children:"this"})," value of the ",(0,i.jsx)(n.code,{children:"person"})," object because generator functions do not have their own ",(0,i.jsx)(n.code,{children:"this"})," value."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-iterators",children:[(0,i.jsx)(n.code,{children:"this"})," in Iterators"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in an iterator function refers to the ",(0,i.jsx)(n.code,{children:"this"})," value of the enclosing lexical context. Iterator functions do not have their own ",(0,i.jsx)(n.code,{children:"this"})," value. Instead, they inherit the ",(0,i.jsx)(n.code,{children:"this"})," value from the surrounding code."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'const person = {\n    name: "Alice",\n    [Symbol.iterator]: function*() {\n        yield this.name;\n    }\n};\n\nfor (const name of person) {\n    console.log(name); // Output: Alice\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the iterator function refers to the ",(0,i.jsx)(n.code,{children:"this"})," value of the ",(0,i.jsx)(n.code,{children:"person"})," object because iterator functions do not have their own ",(0,i.jsx)(n.code,{children:"this"})," value."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-destructuring",children:[(0,i.jsx)(n.code,{children:"this"})," in Destructuring"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a destructuring assignment refers to the global object (",(0,i.jsx)(n.code,{children:"window"})," in browsers, ",(0,i.jsx)(n.code,{children:"global"})," in Node.js) when the assignment is done in the global scope."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'const person = {\n    name: "Alice"\n};\n\nconst { name } = person;\n\nconsole.log(this); // Output: Window {...} (in browsers)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the destructuring assignment refers to the global object (",(0,i.jsx)(n.code,{children:"Window"})," in browsers) because the assignment is done in the global scope."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-spread-operator",children:[(0,i.jsx)(n.code,{children:"this"})," in Spread Operator"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a spread operator refers to the global object (",(0,i.jsx)(n.code,{children:"window"})," in browsers, ",(0,i.jsx)(n.code,{children:"global"})," in Node.js) when the operator is used in the global scope."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'const person = {\n    name: "Alice"\n};\n\nconst personCopy = { ...person };\n\nconsole.log(this); // Output: Window {...} (in browsers)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the spread operator refers to the global object (",(0,i.jsx)(n.code,{children:"Window"})," in browsers) because the operator is used in the global scope."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-rest-parameters",children:[(0,i.jsx)(n.code,{children:"this"})," in Rest Parameters"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a rest parameter refers to the global object (",(0,i.jsx)(n.code,{children:"window"})," in browsers, ",(0,i.jsx)(n.code,{children:"global"})," in Node.js) when the parameter is used in the global scope."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'function greet(...args) {\n    console.log(this); // Output: Window {...} (in browsers)\n}\n\ngreet("Alice", "Bob");\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the rest parameter refers to the global object (",(0,i.jsx)(n.code,{children:"Window"})," in browsers) because the parameter is used in the global scope."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-default-parameters",children:[(0,i.jsx)(n.code,{children:"this"})," in Default Parameters"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a default parameter refers to the global object (",(0,i.jsx)(n.code,{children:"window"})," in browsers, ",(0,i.jsx)(n.code,{children:"global"})," in Node.js) when the parameter is used in the global scope."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'function greet(name = "Alice") {\n    console.log(this); // Output: Window {...} (in browsers)\n}\n\ngreet();\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the default parameter refers to the global object (",(0,i.jsx)(n.code,{children:"Window"})," in browsers) because the parameter is used in the global scope."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-computed-properties",children:[(0,i.jsx)(n.code,{children:"this"})," in Computed Properties"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a computed property refers to the object on which the property is being accessed."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'const person = {\n    name: "Alice",\n    ["greet"]() {\n        console.log("Hello, " + this.name);\n    }\n};\n\nperson.greet(); // Output: Hello, Alice\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the computed property ",(0,i.jsx)(n.code,{children:"greet"})," refers to the ",(0,i.jsx)(n.code,{children:"person"})," object because the property is accessed on the ",(0,i.jsx)(n.code,{children:"person"})," object."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-dynamic-properties",children:[(0,i.jsx)(n.code,{children:"this"})," in Dynamic Properties"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a dynamic property refers to the object on which the property is being accessed."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'const person = {\n    name: "Alice",\n    greet() {\n        console.log("Hello, " + this.name);\n    }\n};\n\nperson["greet"](); // Output: Hello, Alice\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the dynamic property ",(0,i.jsx)(n.code,{children:"greet"})," refers to the ",(0,i.jsx)(n.code,{children:"person"})," object because the property is accessed on the ",(0,i.jsx)(n.code,{children:"person"})," object."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-getters",children:[(0,i.jsx)(n.code,{children:"this"})," in Getters"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a getter refers to the object on which the property is being accessed."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'const person = {\n    name: "Alice",\n    get greeting() {\n        return "Hello, " + this.name;\n    }\n};\n\nconsole.log(person.greeting); // Output: Hello, Alice\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the getter ",(0,i.jsx)(n.code,{children:"greeting"})," refers to the ",(0,i.jsx)(n.code,{children:"person"})," object because the property is accessed on the ",(0,i.jsx)(n.code,{children:"person"})," object."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-setters",children:[(0,i.jsx)(n.code,{children:"this"})," in Setters"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a setter refers to the object on which the property is being set."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'const person = {\n    _name: "",\n    set name(value) {\n        this._name = value;\n    },\n    get name() {\n        return this._name;\n    }\n};\n\nperson.name = "Alice";\n\nconsole.log(person.name); // Output: Alice\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the setter ",(0,i.jsx)(n.code,{children:"name"})," refers to the ",(0,i.jsx)(n.code,{children:"person"})," object because the property is set on the ",(0,i.jsx)(n.code,{children:"person"})," object."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-static-methods",children:[(0,i.jsx)(n.code,{children:"this"})," in Static Methods"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a static method refers to the class itself, not an instance of the class."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'class Person {\n    static greet() {\n        console.log("Hello, world");\n    }\n}\n\nPerson.greet(); // Output: Hello, world\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the static method ",(0,i.jsx)(n.code,{children:"greet"})," refers to the ",(0,i.jsx)(n.code,{children:"Person"})," class itself, not an instance of the class."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-private-methods",children:[(0,i.jsx)(n.code,{children:"this"})," in Private Methods"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a private method refers to the object on which the method is being invoked."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'class Person {\n    #name;\n\n    constructor(name) {\n        this.#name = name;\n    }\n\n    #greet() {\n        console.log("Hello, " + this.#name);\n    }\n\n    greet() {\n        this.#greet();\n    }\n}\n\nconst person = new Person("Alice");\n\nperson.greet(); // Output: Hello, Alice\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the private method ",(0,i.jsx)(n.code,{children:"#greet"})," of the ",(0,i.jsx)(n.code,{children:"Person"})," class refers to the ",(0,i.jsx)(n.code,{children:"person"})," object because the private method is called on the ",(0,i.jsx)(n.code,{children:"person"})," object."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-public-methods",children:[(0,i.jsx)(n.code,{children:"this"})," in Public Methods"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a public method refers to the object on which the method is being invoked."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'class Person {\n    constructor(name) {\n        this.name = name;\n    }\n\n    greet() {\n        console.log("Hello, " + this.name);\n    }\n}\n\nconst person = new Person("Alice");\n\nperson.greet(); // Output: Hello, Alice\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the public method ",(0,i.jsx)(n.code,{children:"greet"})," of the ",(0,i.jsx)(n.code,{children:"Person"})," class refers to the ",(0,i.jsx)(n.code,{children:"person"})," object because the public method is called on the ",(0,i.jsx)(n.code,{children:"person"})," object."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-protected-methods",children:[(0,i.jsx)(n.code,{children:"this"})," in Protected Methods"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a protected method refers to the object on which the method is being invoked."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'class Person {\n    constructor(name) {\n        this.name = name;\n    }\n\n    #greet() {\n        console.log("Hello, " + this.name);\n    }\n\n    greet() {\n        this.#greet();\n    }\n}\n\nconst person = new Person("Alice");\n\nperson.greet(); // Output: Hello, Alice\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the protected method ",(0,i.jsx)(n.code,{children:"#greet"})," of the ",(0,i.jsx)(n.code,{children:"Person"})," class refers to the ",(0,i.jsx)(n.code,{children:"person"})," object because the protected method is called on the ",(0,i.jsx)(n.code,{children:"person"})," object."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-instance-methods",children:[(0,i.jsx)(n.code,{children:"this"})," in Instance Methods"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in an instance method refers to the object on which the method is being invoked."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'class Person {\n    constructor(name) {\n        this.name = name;\n    }\n\n    greet() {\n        console.log("Hello, " + this.name);\n    }\n}\n\nconst person = new Person("Alice");\n\nperson.greet(); // Output: Hello, Alice\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the instance method ",(0,i.jsx)(n.code,{children:"greet"})," of the ",(0,i.jsx)(n.code,{children:"Person"})," class refers to the ",(0,i.jsx)(n.code,{children:"person"})," object because the instance method is called on the ",(0,i.jsx)(n.code,{children:"person"})," object."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-static-properties",children:[(0,i.jsx)(n.code,{children:"this"})," in Static Properties"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a static property refers to the class itself, not an instance of the class."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'class Person {\n    static name = "Alice";\n\n    static greet() {\n        console.log("Hello, " + this.name);\n    }\n}\n\nPerson.greet(); // Output: Hello, Alice\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the static property ",(0,i.jsx)(n.code,{children:"name"})," of the ",(0,i.jsx)(n.code,{children:"Person"})," class refers to the ",(0,i.jsx)(n.code,{children:"Person"})," class itself, not an instance of the class."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-private-properties",children:[(0,i.jsx)(n.code,{children:"this"})," in Private Properties"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a private property refers to the object on which the property is being accessed."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'\nclass Person {\n    #name;\n\n    constructor(name) {\n        this.#name = name;\n    }\n\n    greet() {\n        console.log("Hello, " + this.#name);\n    }\n}\n\nconst person = new Person("Alice");\n\nperson.greet(); // Output: Hello, Alice\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the private property ",(0,i.jsx)(n.code,{children:"#name"})," of the ",(0,i.jsx)(n.code,{children:"Person"})," class refers to the ",(0,i.jsx)(n.code,{children:"person"})," object because the property is accessed on the ",(0,i.jsx)(n.code,{children:"person"})," object."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-public-properties",children:[(0,i.jsx)(n.code,{children:"this"})," in Public Properties"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a public property refers to the object on which the property is being accessed."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'\nclass Person {\n    constructor(name) {\n        this.name = name;\n    }\n\n    greet() {\n        console.log("Hello, " + this.name);\n    }\n}\n\nconst person = new Person("Alice");\n\nperson.greet(); // Output: Hello, Alice\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the public property ",(0,i.jsx)(n.code,{children:"name"})," of the ",(0,i.jsx)(n.code,{children:"Person"})," class refers to the ",(0,i.jsx)(n.code,{children:"person"})," object because the property is accessed on the ",(0,i.jsx)(n.code,{children:"person"})," object."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-protected-properties",children:[(0,i.jsx)(n.code,{children:"this"})," in Protected Properties"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a protected property refers to the object on which the property is being accessed."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'\nclass Person {\n    #name;\n\n    constructor(name) {\n        this.#name = name;\n    }\n\n    greet() {\n        console.log("Hello, " + this.#name);\n    }\n}\n\nconst person = new Person("Alice");\n\nperson.greet(); // Output: Hello, Alice\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the protected property ",(0,i.jsx)(n.code,{children:"#name"})," of the ",(0,i.jsx)(n.code,{children:"Person"})," class refers to the ",(0,i.jsx)(n.code,{children:"person"})," object because the property is accessed on the ",(0,i.jsx)(n.code,{children:"person"})," object."]}),"\n",(0,i.jsxs)(n.h2,{id:"this-in-static-accessors",children:[(0,i.jsx)(n.code,{children:"this"})," in Static Accessors"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"this"})," keyword in a static accessor refers to the class itself, not an instance of the class."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="app.js"',children:'class Person {\n    static #name = "Alice";\n\n    static get name() {\n        return this.#name;\n    }\n\n    static set name(value) {\n        this.#name = value;\n    }\n}\n\nconsole.log(Person.name); // Output: Alice\n\nPerson.name = "Bob";\n\nconsole.log(Person.name); // Output: Bob\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"this"})," keyword inside the static accessor ",(0,i.jsx)(n.code,{children:"name"})," of the ",(0,i.jsx)(n.code,{children:"Person"})," class refers to the ",(0,i.jsx)(n.code,{children:"Person"})," class itself, not an instance of the class."]}),"\n",(0,i.jsx)(n.admonition,{title:"\ud83e\udd16\ud83c\udfcb\ufe0f\u200d\u2642\ufe0f",type:"info",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"this"})," keyword in JavaScript is a powerful feature that allows you to access the object's properties and methods from within a function. The value of ",(0,i.jsx)(n.code,{children:"this"})," depends on how a function is called. By understanding how ",(0,i.jsx)(n.code,{children:"this"})," works in different contexts, you can write more flexible and reusable code."]})}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(n.p,{children:["In this tutorial, we have learned about the ",(0,i.jsx)(n.code,{children:"this"})," keyword in JavaScript. The ",(0,i.jsx)(n.code,{children:"this"})," keyword refers to the object on which a function is being invoked. The value of ",(0,i.jsx)(n.code,{children:"this"})," depends on how a function is called. We have seen how ",(0,i.jsx)(n.code,{children:"this"})," works in different contexts such as functions, methods, constructors, arrow functions, event handlers, callbacks, nested functions, global scope, strict mode, modules, classes, prototypes, async functions, promises, generators, iterators, destructuring, spread operator, rest parameters, default parameters, computed properties, dynamic properties, getters, setters, static methods, private methods, public methods, protected methods, instance methods, static properties, private properties, public properties, protected properties, static accessors, etc."]})]})}function a(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var t=s(96540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);