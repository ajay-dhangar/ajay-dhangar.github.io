"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[44658],{48601:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"beginner/05-linked-lists","title":"Linked Lists in Data Structures","description":"In this tutorial, we will learn about linked lists in Data Structures and Algorithms. We will discuss what linked lists are, how they are used, and how they are different from arrays.","source":"@site/dsa/beginner/05-linked-lists.md","sourceDirName":"beginner","slug":"/beginner/05-linked-lists","permalink":"/dsa/beginner/05-linked-lists","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dsa","permalink":"/dsa/tags/dsa"},{"inline":true,"label":"data-structures","permalink":"/dsa/tags/data-structures"},{"inline":true,"label":"linked-lists","permalink":"/dsa/tags/linked-lists"},{"inline":true,"label":"beginner","permalink":"/dsa/tags/beginner"},{"inline":true,"label":"javascript","permalink":"/dsa/tags/javascript"},{"inline":true,"label":"python","permalink":"/dsa/tags/python"},{"inline":true,"label":"c++","permalink":"/dsa/tags/c"},{"inline":true,"label":"java","permalink":"/dsa/tags/java"},{"inline":true,"label":"programming","permalink":"/dsa/tags/programming"},{"inline":true,"label":"tutorial","permalink":"/dsa/tags/tutorial"},{"inline":true,"label":"typescript","permalink":"/dsa/tags/typescript"}],"version":"current","lastUpdatedBy":"ajay-dhangar","lastUpdatedAt":1712073681000,"sidebarPosition":5,"frontMatter":{"id":"05-linked-lists","title":"Linked Lists in Data Structures","sidebar_label":"Linked Lists","tags":["dsa","data-structures","linked-lists","beginner","javascript","python","c++","java","programming","tutorial","typescript"],"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Stacks and Queues","permalink":"/dsa/beginner/04-stacks-and-queues"},"next":{"title":"Arrays","permalink":"/dsa/category/arrays"}}');var s=t(74848),a=t(28453);const d={id:"05-linked-lists",title:"Linked Lists in Data Structures",sidebar_label:"Linked Lists",tags:["dsa","data-structures","linked-lists","beginner","javascript","python","c++","java","programming","tutorial","typescript"],sidebar_position:5},l=void 0,r={},o=[{value:"Linked Lists in Programming",id:"linked-lists-in-programming",level:2},{value:"Types of Linked Lists",id:"types-of-linked-lists",level:2},{value:"Live Example",id:"live-example",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={admonition:"admonition",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components},{TabItem:t,Tabs:i}=n;return t||u("TabItem",!0),i||u("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"In this tutorial, we will learn about linked lists in Data Structures and Algorithms. We will discuss what linked lists are, how they are used, and how they are different from arrays."}),"\n",(0,s.jsx)(n.h2,{id:"linked-lists-in-programming",children:"Linked Lists in Programming"}),"\n",(0,s.jsx)(n.p,{children:"A linked list is a data structure that consists of a sequence of elements, where each element points to the next element in the sequence. Each element in a linked list is called a node, and it contains two parts: the data and a reference (or pointer) to the next node in the sequence."}),"\n",(0,s.jsx)(n.p,{children:"Linked lists are dynamic data structures, which means that the size of a linked list can change during the execution of a program. Unlike arrays, linked lists do not have a fixed size, and elements can be added or removed from a linked list at any time."}),"\n",(0,s.jsx)(n.p,{children:"Linked lists are used to store a collection of elements that are related to each other in some way. For example, a linked list can be used to store the nodes of a graph, the tasks in a to-do list, or the songs in a playlist."}),"\n",(0,s.jsx)(n.p,{children:"Here is an example of a linked list in some programming languages:"}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)(t,{value:"javascript",label:"JavaScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Creating a linked list in JavaScript\nclass Node {\n  constructor(data) {\n    this.data = data;\n    this.next = null;\n  }\n}\n\nclass LinkedList {\n  constructor() {\n    this.head = null;\n  }\n\n  addNode(data) {\n    const newNode = new Node(data);\n\n    if (this.head === null) {\n      this.head = newNode;\n    } else {\n      let current = this.head;\n      while (current.next !== null) {\n        current = current.next;\n      }\n      current.next = newNode;\n    }\n  }\n\n  printList() {\n    let current = this.head;\n    while (current !== null) {\n      console.log(current.data);\n      current = current.next;\n    }\n  }\n}\n\n// Creating a linked list\nconst linkedList = new LinkedList();\nlinkedList.addNode(1);\nlinkedList.addNode(2);\nlinkedList.addNode(3);\n\n// Printing the linked list\nlinkedList.printList();\n"})})}),(0,s.jsx)(t,{value:"python",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Creating a linked list in Python\nclass Node:\n  def __init__(self, data):\n    self.data = data\n    self.next = None\n\nclass LinkedList:\n  def __init__(self):\n    self.head = None\n\n  def add_node(self, data):\n    new_node = Node(data)\n\n    if self.head is None:\n      self.head = new_node\n    else:\n      current = self.head\n      while current.next is not None:\n        current = current.next\n      current.next = new_node\n\n  def print_list(self):\n    current = self.head\n    while current is not None:\n      print(current.data)\n      current = current.next\n\n# Creating a linked list\nlinked_list = LinkedList()\nlinked_list.add_node(1)\nlinked_list.add_node(2)\nlinked_list.add_node(3)\n\n# Printing the linked list\nlinked_list.print_list()\n"})})}),(0,s.jsx)(t,{value:"typescript",label:"TypeScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Creating a linked list in TypeScript\nclass Node {\n  data: number;\n  next: Node | null;\n\n  constructor(data: number) {\n    this.data = data;\n    this.next = null;\n    }\n}\n\nclass LinkedList {\n  head: Node | null;\n\n  constructor() {\n    this.head = null;\n  }\n\n  addNode(data: number) {\n    const newNode = new Node(data);\n\n    if (this.head === null) {\n      this.head = newNode;\n    } else {\n      let current = this.head;\n      while (current.next !== null) {\n        current = current.next;\n      }\n      current.next = newNode;\n    }\n  }\n\n  printList() {\n    let current = this.head;\n    while (current !== null) {\n      console.log(current.data);\n      current = current.next;\n    }\n  }\n}\n\n// Creating a linked list\nconst linkedList = new LinkedList();\nlinkedList.addNode(1);\nlinkedList.addNode(2);\nlinkedList.addNode(3);\n\n// Printing the linked list\nlinkedList.printList();\n"})})}),(0,s.jsx)(t,{value:"c++",label:"C++",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#include <iostream>\nusing namespace std;\n\n// Creating a linked list in C++\nclass Node {\npublic:\n  int data;\n  Node* next;\n\n  Node(int data) {\n    this->data = data;\n    this->next = nullptr;\n  }\n};\n\nclass LinkedList {\npublic:\n  Node* head;\n\n  LinkedList() {\n    this->head = nullptr;\n  }\n\n  void addNode(int data) {\n    Node* newNode = new Node(data);\n\n    if (this->head == nullptr) {\n      this->head = newNode;\n    } else {\n      Node* current = this->head;\n      while (current->next != nullptr) {\n        current = current->next;\n      }\n      current->next = newNode;\n    }\n  }\n\n  void printList() {\n    Node* current = this->head;\n    while (current != nullptr) {\n      cout << current->data << endl;\n      current = current->next;\n    }\n  }\n};\n\nint main() {\n  // Creating a linked list\n  LinkedList linkedList;\n  linkedList.addNode(1);\n  linkedList.addNode(2);\n  linkedList.addNode(3);\n\n  // Printing the linked list\n  linkedList.printList();\n\n  return 0;\n}\n"})})}),(0,s.jsx)(t,{value:"java",label:"Java",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// Creating a linked list in Java\nclass Node {\n  int data;\n  Node next;\n\n  Node(int data) {\n    this.data = data;\n    this.next = null;\n  }\n}\n\nclass LinkedList {\n  Node head;\n\n  LinkedList() {\n    this.head = null;\n  }\n\n  void addNode(int data) {\n    Node newNode = new Node(data);\n\n    if (this.head == null) {\n      this.head = newNode;\n    } else {\n      Node current = this.head;\n      while (current.next != null) {\n        current = current.next;\n      }\n      current.next = newNode;\n    }\n  }\n\n  void printList() {\n    Node current = this.head;\n    while (current != null) {\n      System.out.println(current.data);\n      current = current.next;\n    }\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    // Creating a linked list\n    LinkedList linkedList = new LinkedList();\n    linkedList.addNode(1);\n    linkedList.addNode(2);\n    linkedList.addNode(3);\n\n    // Printing the linked list\n    linkedList.printList();\n  }\n}\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:["In the example above, we have created a linked list in JavaScript, Python, TypeScript, C++, and Java. We have defined a ",(0,s.jsx)(n.code,{children:"Node"})," class to represent a node in the linked list and a ",(0,s.jsx)(n.code,{children:"LinkedList"})," class to represent the linked list itself. We have implemented methods to add nodes to the linked list and print the elements of the linked list."]}),"\n",(0,s.jsx)(n.h2,{id:"types-of-linked-lists",children:"Types of Linked Lists"}),"\n",(0,s.jsx)(n.p,{children:"There are several types of linked lists, each with its own characteristics and use cases. Some common types of linked lists include:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Singly Linked List"}),": In a singly linked list, each node points to the next node in the sequence. The last node in the list points to ",(0,s.jsx)(n.code,{children:"null"}),", indicating the end of the list."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Doubly Linked List"}),": In a doubly linked list, each node points to both the next node and the previous node in the sequence. This allows for bidirectional traversal of the list."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Circular Linked List"}),": In a circular linked list, the last node in the list points back to the first node, forming a circular structure. This allows for efficient traversal of the list without the need to check for ",(0,s.jsx)(n.code,{children:"null"})," pointers."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Sorted Linked List"}),": In a sorted linked list, the nodes are arranged in ascending or descending order based on the value of the data in each node. This allows for efficient searching and insertion of elements in the list."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Sparse Linked List"}),": In a sparse linked list, the nodes only store non-default values, reducing the memory usage of the list. This is useful for representing sparse data structures, such as matrices."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Circular Doubly Linked List"}),": In a circular doubly linked list, each node points to both the next node and the previous node, and the last node points back to the first node, forming a circular structure. This allows for bidirectional traversal of the list without the need to check for ",(0,s.jsx)(n.code,{children:"null"})," pointers."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Self-organizing Linked List"}),": In a self-organizing linked list, the order of the nodes is adjusted based on the frequency of access to each node. This allows for faster access to frequently accessed nodes."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Each type of linked list has its own advantages and disadvantages, and the choice of which type to use depends on the specific requirements of the application."}),"\n",(0,s.jsxs)(n.admonition,{title:"for better understanding \ud83e\udd13",type:"tip",children:[(0,s.jsx)(n.h2,{id:"live-example",children:"Live Example"}),(0,s.jsxs)(n.p,{children:["Let's create a singly linked list in jsx using JavaScript. We will define a ",(0,s.jsx)(n.code,{children:"Node"})," class to represent a node in the linked list and a ",(0,s.jsx)(n.code,{children:"LinkedList"})," class to represent the linked list itself. We will implement methods to add nodes to the linked list and print the elements of the linked list."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",metastring:"live",live:!0,children:'function Example() {\n  // Node class for the linked list\n  class Node {\n    constructor(data) {\n      this.data = data;\n      this.next = null;\n    }\n  }\n\n  // LinkedList class\n  class LinkedList {\n    constructor() {\n      this.head = null;\n    }\n\n    // Inserting a new node at the end of the linked list\n    append(data) {\n      let newNode = new Node(data);\n      if (!this.head) {\n        this.head = newNode;\n        return;\n      }\n      let current = this.head;\n      while (current.next) {\n        current = current.next;\n      }\n      current.next = newNode;\n    }\n\n    // Inserting a new node at the beginning of the linked list\n    prepend(data) {\n      let newNode = new Node(data);\n      newNode.next = this.head;\n      this.head = newNode;\n    }\n\n    // Deleting a node by its value\n    delete(data) {\n      if (!this.head) return;\n\n      if (this.head.data === data) {\n        this.head = this.head.next;\n        return;\n      }\n\n      let current = this.head;\n      while (current.next) {\n        if (current.next.data === data) {\n          current.next = current.next.next;\n          return;\n        }\n        current = current.next;\n      }\n    }\n\n    // Printing the linked list\n    print() {\n      let current = this.head;\n      let result = [];\n      while (current) {\n        result.push(current.data);\n        current = current.next;\n      }\n      return result.join(\' -> \');\n    }\n  }\n\n  // Creating a linked list\n  let linkedList = new LinkedList();\n\n  // Inserting elements into the linked list\n  linkedList.append(1);\n  linkedList.append(2);\n  linkedList.append(3);\n  linkedList.prepend(0);\n\n  return (\n    <div\n      style={{\n        display: "flex",\n        justifyContent: "center",\n        marginTop: "20px",\n      }}\n    >\n      <div\n        style={{\n          margin: "20px",\n          padding: "20px",\n          border: "1px solid #ccc",\n          borderRadius: "5px",\n        }}\n      >\n        <h3>Linked List Example</h3>\n        <div style={{\n          margin: "20px",\n          padding: "20px",\n          border: "1px solid #ccc",\n          borderRadius: "5px",\n        }}>\n          <p>Linked List: <code>{linkedList.print()}</code></p>\n          <p>Deleting <code>2...</code></p>\n          {linkedList.delete(2)}\n          <p>Updated Linked List:  <code>{linkedList.print()}</code></p>\n        </div>\n      </div>\n    </div>\n  );\n}\n'})}),(0,s.jsxs)(n.p,{children:["In the above example, we have created a singly linked list in JavaScript. We have defined a ",(0,s.jsx)(n.code,{children:"Node"})," class to represent a node in the linked list and a ",(0,s.jsx)(n.code,{children:"LinkedList"})," class to represent the linked list itself. We have implemented methods to add nodes to the linked list, print the elements of the linked list, prepend a node at the beginning of the list, and delete a node by its value."]})]}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"In this tutorial, we have learned about linked lists in Data Structures and Algorithms. We have discussed what linked lists are, how they are used, and how they are different from arrays. We have also explored the different types of linked lists and their characteristics."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>l});var i=t(96540);const s={},a=i.createContext(s);function d(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);