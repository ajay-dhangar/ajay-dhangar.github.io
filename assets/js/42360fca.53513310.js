"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[70632],{36425:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"index","title":"Data Structures and Algorithms Solutions","description":"In this section, you will learn about the solutions of the problems of Data Structures and Algorithms.","source":"@site/dsa-solutions/index.md","sourceDirName":".","slug":"/","permalink":"/dsa-solutions/","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"ajay-dhangar","lastUpdatedAt":1711940803000,"sidebarPosition":1,"frontMatter":{"title":"Data Structures and Algorithms Solutions","sidebar_label":"DSA Solutions","sidebar_position":1},"sidebar":"tutorialSidebar","next":{"title":"LeetCode Solutions","permalink":"/dsa-solutions/category/leetcode-solutions"}}');var t=s(74848),n=s(28453);const o={title:"Data Structures and Algorithms Solutions",sidebar_label:"DSA Solutions",sidebar_position:1},a=void 0,l={},c=[{value:"Data Structures",id:"data-structures",level:2},{value:"Algorithms",id:"algorithms",level:2},{value:"Problems",id:"problems",level:2},{value:"Resources",id:"resources",level:2}];function h(e){const i={a:"a",h2:"h2",li:"li",p:"p",ul:"ul",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.p,{children:"In this section, you will learn about the solutions of the problems of Data Structures and Algorithms."}),"\n",(0,t.jsx)(i.h2,{id:"data-structures",children:"Data Structures"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"Array"}),": Array is a collection of elements of the same type placed in contiguous memory locations that can be individually referenced by adding an index to a unique identifier."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"String"}),": A string is a sequence of characters."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"Linked List"}),": A linked list is a linear data structure, in which the elements are not stored at contiguous memory locations."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"Stack"}),": A stack is a linear data structure that follows the Last In First Out (LIFO) principle."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"Queue"}),": A queue is a linear data structure that follows the First In First Out (FIFO) principle."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"Tree"}),": A tree is a non-linear data structure that is used to store data in a hierarchical manner."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"Graph"}),": A graph is a non-linear data structure that consists of a finite set of vertices and edges."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"Hashing"}),": Hashing is a technique that is used to uniquely identify a specific object from a group of similar objects."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"Heap"}),": A heap is a complete binary tree that satisfies the heap property."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"Trie"}),": A trie is a tree-like data structure that is used to store a dynamic set of strings."]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"algorithms",children:"Algorithms"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"Searching"}),": Searching is the process of finding a specific element in a collection of elements."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"Sorting"}),": Sorting is the process of arranging the elements of a collection in a specific order."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"Recursion"}),": Recursion is a technique in which a function calls itself to solve a smaller instance of the same problem."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"Dynamic Programming"}),": Dynamic Programming is a technique used to solve problems by breaking them down into smaller subproblems."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"Greedy Algorithms"}),": Greedy Algorithms are algorithms that make a series of choices that are locally optimal at each step."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"Backtracking"}),": Backtracking is a technique used to solve problems by making a series of choices and backtracking when a choice leads to a dead end."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"Divide and Conquer"}),": Divide and Conquer is a technique used to solve problems by breaking them down into smaller subproblems, solving the subproblems, and combining the solutions to solve the original problem."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"Bit Manipulation"}),": Bit Manipulation is the act of algorithmically manipulating bits or binary digits."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"Graph Algorithms"}),": Graph Algorithms are algorithms that operate on graphs to solve problems."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"Mathematical Algorithms"}),": Mathematical Algorithms are algorithms that solve mathematical problems."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"String Algorithms"}),": String Algorithms are algorithms that operate on strings to solve problems."]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"problems",children:"Problems"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"LeetCode"}),": LeetCode is a platform that provides a collection of coding problems to practice and improve your coding skills."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"HackerRank"}),": HackerRank is a platform that provides a collection of coding problems to practice and improve your coding skills."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"Codeforces"}),": Codeforces is a platform that provides a collection of coding problems to practice and improve your coding skills."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"CodeChef"}),": CodeChef is a platform that provides a collection of coding problems to practice and improve your coding skills."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"AtCoder"}),": AtCoder is a platform that provides a collection of coding problems to practice and improve your coding skills."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"TopCoder"}),": TopCoder is a platform that provides a collection of coding problems to practice and improve your coding skills."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"InterviewBit"}),": InterviewBit is a platform that provides a collection of coding problems to practice and improve your coding skills."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"GeeksforGeeks"}),": GeeksforGeeks is a platform that provides a collection of coding problems to practice and improve your coding skills."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"Project Euler"}),": Project Euler is a platform that provides a collection of mathematical problems to practice and improve your mathematical skills."]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"resources",children:"Resources"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"#",children:"Books"}),": Books are a great way to learn about Data Structures and Algorithms."]}),"\n"]})]})}function d(e={}){const{wrapper:i}={...(0,n.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},28453:(e,i,s)=>{s.d(i,{R:()=>o,x:()=>a});var r=s(96540);const t={},n=r.createContext(t);function o(e){const i=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(n.Provider,{value:i},e.children)}}}]);