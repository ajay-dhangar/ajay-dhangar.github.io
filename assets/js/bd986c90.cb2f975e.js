"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[21580],{33525:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"javascript/type-of-in-javascript","title":"typeof Operator in JavaScript","description":"In this tutorial, we will learn about the typeof operator in JavaScript. We will learn how to use the typeof operator to determine the type of a value in JavaScript.","source":"@site/docs/javascript/type-of.md","sourceDirName":"javascript","slug":"/javascript/type-of-in-javascript","permalink":"/docs/javascript/type-of-in-javascript","draft":false,"unlisted":false,"editUrl":"https://github.com/Ajay-Dhangar/ajay-dhangar.github.io/edit/main/docs/javascript/type-of.md","tags":[{"inline":true,"label":"JavaScript","permalink":"/docs/tags/java-script"},{"inline":true,"label":"typeof","permalink":"/docs/tags/typeof"},{"inline":true,"label":"Operator","permalink":"/docs/tags/operator"},{"inline":true,"label":"Type","permalink":"/docs/tags/type"},{"inline":true,"label":"Value","permalink":"/docs/tags/value"},{"inline":true,"label":"Data","permalink":"/docs/tags/data"},{"inline":true,"label":"Typeof","permalink":"/docs/tags/typeof"},{"inline":true,"label":"Typeof Operator","permalink":"/docs/tags/typeof-operator"},{"inline":true,"label":"Typeof Keyword","permalink":"/docs/tags/typeof-keyword"},{"inline":true,"label":"Typeof Operator in JavaScript","permalink":"/docs/tags/typeof-operator-in-java-script"},{"inline":true,"label":"Typeof Keyword in JavaScript","permalink":"/docs/tags/typeof-keyword-in-java-script"},{"inline":true,"label":"Typeof Operator","permalink":"/docs/tags/typeof-operator"},{"inline":true,"label":"Typeof Keyword","permalink":"/docs/tags/typeof-keyword"},{"inline":true,"label":"Typeof Operator in JS","permalink":"/docs/tags/typeof-operator-in-js"},{"inline":true,"label":"Typeof Keyword in JS","permalink":"/docs/tags/typeof-keyword-in-js"}],"version":"current","lastUpdatedBy":"ajay-dhangar","lastUpdatedAt":1710929045000,"sidebarPosition":28,"frontMatter":{"id":"type-of-in-javascript","title":"typeof Operator in JavaScript","sidebar_label":"typeof","sidebar_position":28,"tags":["JavaScript","typeof","Operator","Type","Value","Data","Typeof","Typeof Operator","Typeof Keyword","Typeof Operator in JavaScript","Typeof Keyword in JavaScript","Typeof Operator","Typeof Keyword","Typeof Operator in JS","Typeof Keyword in JS"],"description":"In this tutorial, we will learn about the typeof operator in JavaScript. We will learn how to use the typeof operator to determine the type of a value in JavaScript."},"sidebar":"tutorialSidebar","previous":{"title":"Maps","permalink":"/docs/javascript/map-in-javascript"},"next":{"title":"Regular Expressions","permalink":"/docs/javascript/reg-exp-in-javascript"}}');var r=n(74848),i=n(28453);const s={id:"type-of-in-javascript",title:"typeof Operator in JavaScript",sidebar_label:"typeof",sidebar_position:28,tags:["JavaScript","typeof","Operator","Type","Value","Data","Typeof","Typeof Operator","Typeof Keyword","Typeof Operator in JavaScript","Typeof Keyword in JavaScript","Typeof Operator","Typeof Keyword","Typeof Operator in JS","Typeof Keyword in JS"],description:"In this tutorial, we will learn about the typeof operator in JavaScript. We will learn how to use the typeof operator to determine the type of a value in JavaScript."},a=void 0,l={},c=[{value:"Syntax",id:"syntax",level:2},{value:"Example",id:"example",level:2},{value:"Using the <code>typeof</code> Operator with Functions",id:"using-the-typeof-operator-with-functions",level:2},{value:"Using the <code>typeof</code> Operator with <code>null</code>",id:"using-the-typeof-operator-with-null",level:2},{value:"Using the <code>typeof</code> Operator with Symbols",id:"using-the-typeof-operator-with-symbols",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const o={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(o.p,{children:["In JavaScript, the ",(0,r.jsx)(o.code,{children:"typeof"})," operator is used to determine the type of a value. It is often used when you want to check the type of a variable or a value before performing an operation on it."]}),"\n",(0,r.jsx)(o.h2,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsxs)(o.p,{children:["The syntax of the ",(0,r.jsx)(o.code,{children:"typeof"})," operator is as follows:"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-js",metastring:'title="app.js"',children:"typeof value\n"})}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator is followed by the ",(0,r.jsx)(o.code,{children:"value"})," whose type you want to determine."]}),"\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"value"})," can be a variable, a literal, or an expression."]}),"\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator returns a string that represents the type of the ",(0,r.jsx)(o.code,{children:"value"}),"."]}),"\n",(0,r.jsxs)(o.li,{children:["The returned string can be one of the following values:","\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:'"undefined"'}),": If the ",(0,r.jsx)(o.code,{children:"value"})," is ",(0,r.jsx)(o.code,{children:"undefined"}),"."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:'"boolean"'}),": If the ",(0,r.jsx)(o.code,{children:"value"})," is a boolean."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:'"number"'}),": If the ",(0,r.jsx)(o.code,{children:"value"})," is a number."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:'"string"'}),": If the ",(0,r.jsx)(o.code,{children:"value"})," is a string."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:'"symbol"'}),": If the ",(0,r.jsx)(o.code,{children:"value"})," is a symbol."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:'"function"'}),": If the ",(0,r.jsx)(o.code,{children:"value"})," is a function."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:'"object"'}),": If the ",(0,r.jsx)(o.code,{children:"value"})," is an object or ",(0,r.jsx)(o.code,{children:"null"}),"."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:'"bigint"'}),": If the ",(0,r.jsx)(o.code,{children:"value"})," is a BigInt."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:'"object"'}),": If the ",(0,r.jsx)(o.code,{children:"value"})," is an object or ",(0,r.jsx)(o.code,{children:"null"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(o.h2,{id:"example",children:"Example"}),"\n",(0,r.jsxs)(o.p,{children:["The following example demonstrates how to use the ",(0,r.jsx)(o.code,{children:"typeof"})," operator to determine the type of a value:"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-js",metastring:'title="app.js"',children:'const name = "John";\nconst age = 30;\nconst isMarried = false;\nconst fruits = ["apple", "banana", "cherry"];\nconst person = {\n  name: "John",\n  age: 30,\n};\n\nconsole.log(typeof name); // string\nconsole.log(typeof age); // number\nconsole.log(typeof isMarried); // boolean\nconsole.log(typeof fruits); // object\nconsole.log(typeof person); // object\nconsole.log(typeof undefinedVariable); // undefined\nconsole.log(typeof nullVariable); // object\n'})}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:["In this example, we have used the ",(0,r.jsx)(o.code,{children:"typeof"})," operator to determine the type of different values such as strings, numbers, booleans, arrays, objects, ",(0,r.jsx)(o.code,{children:"undefined"}),", and ",(0,r.jsx)(o.code,{children:"null"}),"."]}),"\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator returns the type of the value as a string."]}),"\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator is often used to check the type of a value before performing an operation on it, such as type conversion or type-specific operations."]}),"\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator is useful when you want to handle different types of values differently in your code."]}),"\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator can be used to determine the type of a variable or a value at runtime, which can be useful in dynamic programming scenarios."]}),"\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator can be used to determine the type of a value before performing an operation on it, such as type conversion or type-specific operations."]}),"\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator can be used to handle different types of values differently in your code."]}),"\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator can be used to determine the type of a variable or a value at runtime, which can be useful in dynamic programming scenarios."]}),"\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator can be used to determine the type of a value before performing an operation on it, such as type conversion or type-specific operations."]}),"\n"]}),"\n",(0,r.jsxs)(o.h2,{id:"using-the-typeof-operator-with-functions",children:["Using the ",(0,r.jsx)(o.code,{children:"typeof"})," Operator with Functions"]}),"\n",(0,r.jsxs)(o.p,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator can be used to determine the type of a function. It returns ",(0,r.jsx)(o.code,{children:'"function"'})," if the value is a function."]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-js",metastring:'title="app.js"',children:'function greet() {\n  console.log("Hello, World!");\n}\n\nconsole.log(typeof greet); // function\n'})}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:["In this example, we have used the ",(0,r.jsx)(o.code,{children:"typeof"})," operator to determine the type of the ",(0,r.jsx)(o.code,{children:"greet"})," function."]}),"\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator returns ",(0,r.jsx)(o.code,{children:'"function"'})," because the ",(0,r.jsx)(o.code,{children:"greet"})," value is a function."]}),"\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator can be used to determine the type of a function, which can be useful when you want to handle functions differently in your code."]}),"\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator can be used to determine the type of a function at runtime, which can be useful in dynamic programming scenarios."]}),"\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator can be used to determine the type of a function before performing an operation on it, such as calling the function or passing it as an argument to another function."]}),"\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator can be used to handle functions differently in your code based on their type."]}),"\n"]}),"\n",(0,r.jsxs)(o.h2,{id:"using-the-typeof-operator-with-null",children:["Using the ",(0,r.jsx)(o.code,{children:"typeof"})," Operator with ",(0,r.jsx)(o.code,{children:"null"})]}),"\n",(0,r.jsxs)(o.p,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator returns ",(0,r.jsx)(o.code,{children:'"object"'})," if the value is ",(0,r.jsx)(o.code,{children:"null"}),". This is a historical bug in JavaScript, and it is not expected to change."]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-js",metastring:'title="app.js"',children:"const person = null;\n\nconsole.log(typeof person); // object\n"})}),"\n",(0,r.jsxs)(o.p,{children:["In this example, we have used the ",(0,r.jsx)(o.code,{children:"typeof"})," operator to determine the type of the ",(0,r.jsx)(o.code,{children:"person"})," value, which is ",(0,r.jsx)(o.code,{children:"null"}),". The ",(0,r.jsx)(o.code,{children:"typeof"})," operator returns ",(0,r.jsx)(o.code,{children:'"object"'})," because the ",(0,r.jsx)(o.code,{children:"person"})," value is ",(0,r.jsx)(o.code,{children:"null"}),"."]}),"\n",(0,r.jsxs)(o.p,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator returns ",(0,r.jsx)(o.code,{children:'"object"'})," if the value is ",(0,r.jsx)(o.code,{children:"null"}),". This is a historical bug in JavaScript, and it is not expected to change."]}),"\n",(0,r.jsxs)(o.p,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator can be used to determine the type of a value at runtime, which can be useful in dynamic programming scenarios."]}),"\n",(0,r.jsxs)(o.p,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator can be used to determine the type of a value before performing an operation on it, such as type conversion or type-specific operations."]}),"\n",(0,r.jsxs)(o.h2,{id:"using-the-typeof-operator-with-symbols",children:["Using the ",(0,r.jsx)(o.code,{children:"typeof"})," Operator with Symbols"]}),"\n",(0,r.jsxs)(o.p,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator returns ",(0,r.jsx)(o.code,{children:'"symbol"'})," if the value is a symbol."]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-js",metastring:'title="app.js"',children:'const symbol = Symbol("mySymbol");\n\nconsole.log(typeof symbol); // symbol\n'})}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:["In this example, we have used the ",(0,r.jsx)(o.code,{children:"typeof"})," operator to determine the type of the ",(0,r.jsx)(o.code,{children:"symbol"})," value, which is a symbol."]}),"\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator returns ",(0,r.jsx)(o.code,{children:'"symbol"'})," because the ",(0,r.jsx)(o.code,{children:"symbol"})," value is a symbol."]}),"\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator can be used to determine the type of a symbol, which can be useful when you want to handle symbols differently in your code."]}),"\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator can be used to determine the type of a symbol at runtime, which can be useful in dynamic programming scenarios."]}),"\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator can be used to determine the type of a symbol before performing an operation on it, such as type conversion or type-specific operations."]}),"\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator can be used to handle symbols differently in your code based on their type."]}),"\n"]}),"\n",(0,r.jsx)(o.admonition,{type:"caution",children:(0,r.jsxs)(o.p,{children:["The ",(0,r.jsx)(o.code,{children:"typeof"})," operator returns ",(0,r.jsx)(o.code,{children:'"object"'})," if the value is ",(0,r.jsx)(o.code,{children:"null"}),". This is a historical bug in JavaScript, and it is not expected to change."]})}),"\n",(0,r.jsx)(o.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsxs)(o.p,{children:["In this tutorial, you learned about the ",(0,r.jsx)(o.code,{children:"typeof"})," operator in JavaScript and how to use it to determine the type of a value. You also learned about the different types of values that the ",(0,r.jsx)(o.code,{children:"typeof"})," operator can return, such as ",(0,r.jsx)(o.code,{children:'"undefined"'}),", ",(0,r.jsx)(o.code,{children:'"boolean"'}),", ",(0,r.jsx)(o.code,{children:'"number"'}),", ",(0,r.jsx)(o.code,{children:'"string"'}),", ",(0,r.jsx)(o.code,{children:'"symbol"'}),", ",(0,r.jsx)(o.code,{children:'"function"'}),", ",(0,r.jsx)(o.code,{children:'"object"'}),", and ",(0,r.jsx)(o.code,{children:'"bigint"'}),". You also learned about the historical bug in JavaScript where the ",(0,r.jsx)(o.code,{children:"typeof"})," operator returns ",(0,r.jsx)(o.code,{children:'"object"'})," for ",(0,r.jsx)(o.code,{children:"null"})," values. The ",(0,r.jsx)(o.code,{children:"typeof"})," operator is useful when you want to handle different types of values differently in your code, and it can be used to determine the type of a variable or a value at runtime, which can be useful in dynamic programming scenarios."]})]})}function p(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,o,n)=>{n.d(o,{R:()=>s,x:()=>a});var t=n(96540);const r={},i=t.createContext(r);function s(e){const o=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:o},e.children)}}}]);